<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础语法</title>
    <url>/2024/12/04/C++_%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1. 基础语法"></a><strong>1. 基础语法</strong></h2><h3 id="1-1-引用运算-和-const-关键字"><a href="#1-1-引用运算-和-const-关键字" class="headerlink" title="1.1 引用运算 &amp; 和 const 关键字"></a><strong>1.1 引用运算 <code>&amp;</code> 和 <code>const</code> 关键字</strong></h3><h4 id="引用运算"><a href="#引用运算" class="headerlink" title="引用运算 &amp;"></a><strong>引用运算 <code>&amp;</code></strong></h4><p>引用是已有变量的别名，创建引用时不会分配新内存，而是直接操作原变量。<br><strong>引用的特性：</strong></p>
<ol>
<li>必须在定义时初始化。</li>
<li>一旦初始化，就和原变量绑定，不能重新绑定。</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;ref = a; <span class="comment">// ref 是 a 的引用</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    ref = <span class="number">20</span>; <span class="comment">// 修改 ref，相当于修改 a</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After modifying ref: a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 10, ref = 10</span><br><span class="line">After modifying ref: a = 20, ref = 20</span><br></pre></td></tr></table></figure>

<h5 id="常见应用："><a href="#常见应用：" class="headerlink" title="常见应用："></a><strong>常见应用：</strong></h5><ol>
<li><strong>函数传参：</strong> 引用作为函数参数可以避免值传递时的拷贝，提高效率。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">(<span class="type">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">increment</span>(x);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl; <span class="comment">// 输出 x = 6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>引用返回值：</strong> 引用可以作为函数返回值，允许函数返回原始变量的引用。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">getReference</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x; <span class="comment">// 返回引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;ref = <span class="built_in">getReference</span>(a); </span><br><span class="line">    ref = <span class="number">20</span>; <span class="comment">// 修改引用，影响原变量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="comment">// 输出 a = 20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a><strong><code>const</code> 关键字</strong></h4><p><code>const</code>可以修饰变量、函数参数、成员函数等，表示不可修改的属性。</p>
<p><strong>修饰变量：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> x = <span class="number">10</span>; <span class="comment">// x 是常量</span></span><br><span class="line">x = <span class="number">20</span>;           <span class="comment">// 错误：x 不能被修改</span></span><br></pre></td></tr></table></figure>

<p><strong>修饰函数参数：</strong> 用<code>const</code>修饰函数参数，可以防止函数修改传入的值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// n 是只读的，不能修改</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于类对象或结构体，通过引用传递避免拷贝开销，同时用 <code>const</code> 确保不会修改内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;MyClass display&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showObject</span><span class="params">(<span class="type">const</span> MyClass &amp;obj)</span> </span>&#123;</span><br><span class="line">    obj.<span class="built_in">display</span>(); <span class="comment">// 可以调用 const 方法</span></span><br><span class="line">    <span class="comment">// obj.modify(); // 错误：obj 是 const，不能调用能修改内容的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修饰指针：</strong></p>
<ul>
<li>指针本身不可修改：<code>int *const ptr;</code></li>
<li>指针指向的值不可修改：<code>const int *ptr;</code></li>
</ul>
<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cpp复制代码<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;        <span class="comment">// a 是常量，不能修改</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *ptr = &amp;a;     <span class="comment">// 指向常量的指针</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> *<span class="type">const</span> constPtr = &amp;b; <span class="comment">// 常量指针，地址不能修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-2-内联函数"><a href="#1-2-内联函数" class="headerlink" title="1.2 内联函数"></a><strong>1.2 内联函数</strong></h3><p>一言以蔽之，内联函数类似于宏定义</p>
<h4 id="内联函数的定义："><a href="#内联函数的定义：" class="headerlink" title="内联函数的定义："></a><strong>内联函数的定义：</strong></h4><p>内联函数是通过 <code>inline</code> 关键字声明的函数，目的是告诉编译器尽可能将该函数的代码插入到函数调用的位置，而不是通过正常的函数调用机制（如栈操作）来执行。通过这种方式，函数调用的开销可以被消除，从而提高程序的运行效率。</p>
<h4 id="内联函数的优点："><a href="#内联函数的优点：" class="headerlink" title="内联函数的优点："></a><strong>内联函数的优点：</strong></h4><ol>
<li><strong>避免函数调用开销</strong><br>每次函数调用都涉及一些开销，包括参数传递、栈帧的创建和销毁、函数返回等。对于非常简单的函数（如常见的数学计算、获取属性值等），每次调用这些小函数时，编译器可以直接将函数体嵌入到调用处，消除这些开销。</li>
<li><strong>增强代码效率，适合频繁调用的小函数</strong><br>内联函数尤其适用于那些频繁调用的函数，因为它可以减少函数调用的时间开销。当一个小函数被大量调用时，内联可以显著提高程序的执行效率。例如，一些简单的 getter、setter 函数、数值计算函数等，内联处理后能显著优化性能。</li>
<li><strong>减少函数调用栈开销</strong><br>传统函数调用需要维护调用栈，而内联函数的展开直接将代码嵌入调用处，避免了栈的创建和销毁过程，从而减少了内存和处理器的负担。</li>
</ol>
<h4 id="内联函数的语法："><a href="#内联函数的语法：" class="headerlink" title="内联函数的语法："></a><strong>内联函数的语法：</strong></h4><p>内联函数的语法与普通函数唯一的区别是在函数前加上 <code>inline</code> 关键字。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Square of 5: &quot;</span> &lt;&lt; <span class="built_in">square</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在这个例子中，<code>square</code> 函数被声明为内联函数。<code>inline</code> 关键字告诉编译器尽可能将这个函数的代码直接插入到调用它的地方。</li>
<li>当程序运行时，编译器会将 <code>square(5)</code> 替换为 <code>5 * 5</code>，避免了调用函数的传统开销。</li>
</ul>
<h4 id="内联函数的使用场景："><a href="#内联函数的使用场景：" class="headerlink" title="内联函数的使用场景："></a><strong>内联函数的使用场景：</strong></h4><p>内联函数最适合用于以下几种情况：</p>
<ol>
<li><strong>简单函数</strong>：内联函数最适合那些计算量小、逻辑简单的函数。例如，单纯的数学运算、获取和设置变量值等。内联不会对大型、复杂的函数有显著的优化效果。</li>
<li><strong>频繁调用的函数</strong>：对于需要频繁调用的短小函数，内联可以减少函数调用的时间和开销，尤其是在嵌套调用和循环中调用的函数。</li>
<li><strong>不涉及递归</strong>：内联函数不适合递归函数，因为递归的每一次调用都涉及到不同的栈帧和参数，因此递归的内联展开会导致性能下降。</li>
<li><strong>避免大量栈操作的函数</strong>：如果一个函数没有太多的局部变量，也没有复杂的逻辑，使用内联可以避免函数调用时产生的栈开销。</li>
</ol>
<h4 id="内联函数的限制："><a href="#内联函数的限制：" class="headerlink" title="内联函数的限制："></a><strong>内联函数的限制：</strong></h4><ol>
<li><strong>不同编译器标准不同</strong><br>通过 <code>inline</code> 关键字声明函数并不意味着编译器一定会将其内联展开。编译器可能会基于函数的复杂性、调用频率、优化目标等因素决定是否进行内联展开。因此，内联函数只是对编译器的一个建议，而非强制要求。</li>
<li><strong>复杂函数不适合内联</strong><br>内联函数适用于简单的、计算量小的函数。对于逻辑复杂、体积较大的函数，内联可能导致代码膨胀，使得代码变得冗长、占用更多内存，甚至可能引发性能下降。</li>
<li><strong>递归函数不应内联</strong><br>递归函数是不能内联的，因为每次递归都会创建新的栈帧，而内联函数的目的是减少栈开销。递归展开会导致栈帧无法共享，进而消除内联的优势。</li>
</ol>
<h4 id="编译器如何决定内联展开："><a href="#编译器如何决定内联展开：" class="headerlink" title="编译器如何决定内联展开："></a><strong>编译器如何决定内联展开：</strong></h4><ul>
<li>对于小函数，编译器通常会自动进行内联优化，即使没有显式声明 <code>inline</code>。</li>
<li>对于较大的函数，编译器一般不会内联，因为内联会导致代码膨胀，增加 CPU 缓存的压力，反而可能带来性能下降。</li>
<li>编译器还可能根据一些编译选项、优化级别等决定是否内联。</li>
</ul>
<h4 id="内联与宏的比较："><a href="#内联与宏的比较：" class="headerlink" title="内联与宏的比较："></a><strong>内联与宏的比较：</strong></h4><p>内联函数有时可以替代宏（<code>#define</code>）来进行常见的计算，但它们之间有一些重要区别：</p>
<ul>
<li><strong>类型安全</strong>：内联函数是强类型的，宏没有类型检查，容易引发隐式类型转换错误。</li>
<li><strong>调试友好</strong>：内联函数可以被调试器追踪，而宏无法单步调试。</li>
<li><strong>作用域</strong>：内联函数遵循正常的作用域规则，而宏在预处理阶段进行替换，可能引发作用域问题。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x)) <span class="comment">// 宏</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x * x; &#125; <span class="comment">// 内联函数</span></span><br></pre></td></tr></table></figure>

<p>内联函数相较于宏有更强的类型检查和更好的可维护性。</p>
<hr>
<h3 id="1-3-函数参数缺省值"><a href="#1-3-函数参数缺省值" class="headerlink" title="1.3 函数参数缺省值"></a><strong>1.3 函数参数缺省值</strong></h3><h4 id="缺省参数的规则："><a href="#缺省参数的规则：" class="headerlink" title="缺省参数的规则："></a><strong>缺省参数的规则：</strong></h4><ol>
<li>缺省值从右向左定义。(不能两边有缺省值，中间夹着一个正常的)</li>
<li>调用时可以省略有缺省值的参数。</li>
</ol>
<h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a><strong>代码示例：</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">greet</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name = <span class="string">&quot;Guest&quot;</span>, <span class="type">int</span> age = <span class="number">18</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;! Age: &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">greet</span>();                 <span class="comment">// 使用默认值</span></span><br><span class="line">    <span class="built_in">greet</span>(<span class="string">&quot;Alice&quot;</span>);          <span class="comment">// 覆盖第一个参数</span></span><br><span class="line">    <span class="built_in">greet</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>);        <span class="comment">// 覆盖所有参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Hello, Guest! Age: <span class="number">18</span></span><br><span class="line">Hello, Alice! Age: <span class="number">18</span></span><br><span class="line">Hello, Bob! Age: <span class="number">25</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-4-输入输出"><a href="#1-4-输入输出" class="headerlink" title="1.4 输入输出"></a><strong>1.4 输入输出</strong></h3><h4 id="标准输入输出："><a href="#标准输入输出：" class="headerlink" title="标准输入输出："></a><strong>标准输入输出：</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cpp复制代码<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter a number: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;You entered: &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>cin</code> 从键盘输入。</li>
<li><code>cout</code> 输出到屏幕。</li>
</ul>
<h4 id="格式化输出："><a href="#格式化输出：" class="headerlink" title="格式化输出："></a><strong>格式化输出：</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; fixed &lt;&lt; <span class="number">3.14159</span>; <span class="comment">// 输出 3.14</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a><strong>二进制文件读写</strong></h4><h5 id="写入二进制文件："><a href="#写入二进制文件：" class="headerlink" title="写入二进制文件："></a><strong>写入二进制文件：</strong></h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Data d = &#123;<span class="number">1</span>, <span class="string">&quot;Alice&quot;</span>&#125;;</span><br><span class="line">    <span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;data.bin&quot;</span>, ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (outFile) &#123;</span><br><span class="line">        outFile.<span class="built_in">write</span>((<span class="type">char</span> *)&amp;d, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    &#125;</span><br><span class="line">    outFile.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="读取二进制文件："><a href="#读取二进制文件：" class="headerlink" title="读取二进制文件："></a><strong>读取二进制文件：</strong></h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;data.bin&quot;</span>, ios::binary)</span></span>;</span><br><span class="line">Data d;</span><br><span class="line"><span class="keyword">if</span> (inFile) &#123;</span><br><span class="line">    inFile.<span class="built_in">read</span>((<span class="type">char</span> *)&amp;d, <span class="built_in">sizeof</span>(d));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ID: &quot;</span> &lt;&lt; d.id &lt;&lt; <span class="string">&quot;, Name: &quot;</span> &lt;&lt; d.name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">inFile.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-5-异常处理"><a href="#1-5-异常处理" class="headerlink" title="1.5 异常处理"></a><strong>1.5 异常处理</strong></h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20250105145816419.png" alt="image-20250105145816419"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20250105145901566.png" alt="image-20250105145901566"></p>
<h4 id="异常的基本结构："><a href="#异常的基本结构：" class="headerlink" title="异常的基本结构："></a><strong>异常的基本结构：</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> runtime_error &amp;e) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Caught exception: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Caught exception: Division by zero!</span><br></pre></td></tr></table></figure>

<h4 id="常见异常类型："><a href="#常见异常类型：" class="headerlink" title="常见异常类型："></a><strong>常见异常类型：</strong></h4><ul>
<li><code>std::exception</code>：所有异常的基类。</li>
<li><code>std::runtime_error</code>：运行时错误。</li>
<li><code>std::invalid_argument</code>：无效参数。</li>
</ul>
<h2 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2. 类与对象"></a><strong>2. 类与对象</strong></h2><h3 id="2-1-构造函数、复制构造函数、析构函数"><a href="#2-1-构造函数、复制构造函数、析构函数" class="headerlink" title="2.1 构造函数、复制构造函数、析构函数"></a><strong>2.1 构造函数、复制构造函数、析构函数</strong></h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h4><p>构造函数是类的特殊函数，在对象创建时自动调用，用于初始化对象。<br><strong>特点：</strong></p>
<ol>
<li>名字与类名相同，无返回值。</li>
<li>可以重载（支持多个构造函数）。</li>
</ol>
<p><strong>语法与示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Constructor called, value = &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">obj1</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 调用构造函数</span></span><br><span class="line">    obj<span class="number">1.</span><span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Constructor called, value = <span class="number">10</span></span><br><span class="line">Value: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a><strong>复制构造函数</strong></h4><p>复制构造函数用于通过已有对象创建新对象。<br><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ClassName</span>(<span class="type">const</span> ClassName &amp;obj);</span><br></pre></td></tr></table></figure>

<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass &amp;obj) &#123;</span><br><span class="line">        value = obj.value;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Copy constructor called!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">obj1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    MyClass obj2 = obj1; <span class="comment">// 调用复制构造函数</span></span><br><span class="line">    obj<span class="number">2.</span><span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Copy constructor called!</span><br><span class="line">Value: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a><strong>析构函数</strong></h4><p>析构函数用于释放对象销毁时占用的资源。<br><strong>特点：</strong></p>
<ol>
<li>名字为类名前加 <code>~</code>。</li>
<li>无参数、无返回值。</li>
<li>一个类只能有一个析构函数，<strong>不能重载</strong>。</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Constructor called!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Destructor called!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Inside main function.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 程序结束，调用析构函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Constructor called!</span><br><span class="line">Inside main function.</span><br><span class="line">Destructor called!</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-2-this-指针"><a href="#2-2-this-指针" class="headerlink" title="2.2 this 指针"></a><strong>2.2 <code>this</code> 指针</strong></h3><p><code>this</code> 是一个指针，指向调用成员函数的当前对象。常用于以下场景：</p>
<ol>
<li>区分成员变量和局部变量同名的情况。</li>
<li>在链式调用中返回当前对象的引用。</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value; <span class="comment">// 使用 this 指针区分成员变量和局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">MyClass &amp;<span class="title">setValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 返回当前对象引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    obj.<span class="built_in">setValue</span>(<span class="number">20</span>).<span class="built_in">display</span>(); <span class="comment">// 链式调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Value: 20</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-3-友元函数、静态成员变量、const-成员函数"><a href="#2-3-友元函数、静态成员变量、const-成员函数" class="headerlink" title="2.3 友元函数、静态成员变量、const 成员函数"></a><strong>2.3 友元函数、静态成员变量、<code>const</code> 成员函数</strong></h3><h4 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a><strong>友元函数</strong></h4><p>友元函数可以访问类的私有成员，通常用来实现特殊操作。<br><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> ReturnType <span class="title">FunctionName</span><span class="params">(ClassName &amp;obj)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> MyClass &amp;obj)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义友元函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> MyClass &amp;obj)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; obj.value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="built_in">display</span>(obj); <span class="comment">// 调用友元函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Value: 10</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a><strong>静态成员变量</strong></h4><p>静态成员变量属于类而不是对象，所有对象共享一份。<br><strong>特点：</strong></p>
<ol>
<li>必须在类外初始化。</li>
<li>使用 <code>ClassName::StaticMember</code> 访问。</li>
</ol>
<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count; <span class="comment">// 声明静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123; <span class="comment">// 静态成员函数</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化静态成员变量</span></span><br><span class="line"><span class="type">int</span> MyClass::count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj1, obj2, obj3;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Number of objects: &quot;</span> &lt;&lt; MyClass::<span class="built_in">getCount</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number of objects: 3</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="const-成员函数"><a href="#const-成员函数" class="headerlink" title="const 成员函数"></a><strong><code>const</code> 成员函数</strong></h4><p><code>const</code> 成员函数保证函数不会修改类的成员变量。<br><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ReturnType <span class="title">FunctionName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>代码示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="comment">// const 成员函数</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> MyClass <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; obj.<span class="built_in">getValue</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// obj.setValue(20); // 错误：const 对象只能调用 const 成员函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Value: 10</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-4-数据封装与访问限定符"><a href="#2-4-数据封装与访问限定符" class="headerlink" title="2.4 数据封装与访问限定符"></a><strong>2.4 数据封装与访问限定符</strong></h3><h4 id="访问限定符"><a href="#访问限定符" class="headerlink" title="访问限定符"></a><strong>访问限定符</strong></h4><ul>
<li><strong><code>public</code>:</strong> 公有成员，类外部可访问。</li>
<li><strong><code>private</code>:</strong> 私有成员，仅类内部可访问。</li>
<li><strong><code>protected</code>:</strong> 受保护成员，仅类及其子类可访问。</li>
</ul>
<h4 id="代码示例：-1"><a href="#代码示例：-1" class="headerlink" title="代码示例："></a><strong>代码示例：</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> publicValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> protectedValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() : <span class="built_in">privateValue</span>(<span class="number">10</span>), <span class="built_in">publicValue</span>(<span class="number">20</span>), <span class="built_in">protectedValue</span>(<span class="number">30</span>) &#123;&#125; <span class="comment">//构造函数初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Private: &quot;</span> &lt;&lt; privateValue &lt;&lt; <span class="string">&quot;, Public: &quot;</span> &lt;&lt; publicValue</span><br><span class="line">             &lt;&lt; <span class="string">&quot;, Protected: &quot;</span> &lt;&lt; protectedValue &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    obj.publicValue = <span class="number">50</span>; <span class="comment">// 公有成员可直接访问</span></span><br><span class="line">    <span class="comment">// obj.privateValue = 60; // 错误：私有成员不能直接访问</span></span><br><span class="line">    obj.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Private: 10, Public: 50, Protected: 30</span><br></pre></td></tr></table></figure>



<h2 id="3-运算符重载"><a href="#3-运算符重载" class="headerlink" title="3. 运算符重载"></a><strong>3. 运算符重载</strong></h2><p>运算符重载允许为用户自定义的类定义运算符的行为。<br><strong>注意：</strong></p>
<ul>
<li>不能重载 <code>::</code>（作用域解析）、<code>.</code>（成员访问）等。</li>
<li>至少有一个操作数是用户定义类型。</li>
</ul>
<hr>
<h3 id="3-1-类内运算符重载"><a href="#3-1-类内运算符重载" class="headerlink" title="3.1 类内运算符重载"></a><strong>3.1 类内运算符重载</strong></h3><p>运算符可以作为类的成员函数重载。<br><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ReturnType <span class="title">operatorSymbol</span><span class="params">(Arguments)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="示例：重载-运算符"><a href="#示例：重载-运算符" class="headerlink" title="示例：重载 + 运算符"></a><strong>示例：重载 <code>+</code> 运算符</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i) : <span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载 + 运算符</span></span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="type">const</span> Complex &amp;c) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(real + c.real, imag + c.imag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; real &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; imag &lt;&lt; <span class="string">&quot;i&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1.5</span>, <span class="number">2.5</span>)</span>, <span class="title">c2</span><span class="params">(<span class="number">2.0</span>, <span class="number">3.0</span>)</span></span>;</span><br><span class="line">    Complex c3 = c1 + c2; <span class="comment">// 调用运算符重载</span></span><br><span class="line">    c<span class="number">3.</span><span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3.5</span> + <span class="number">5.5</span>i</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-2-类外运算符重载"><a href="#3-2-类外运算符重载" class="headerlink" title="3.2 类外运算符重载"></a><strong>3.2 类外运算符重载</strong></h3><p>类外定义运算符时需要将其声明为友元函数。<br><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> ReturnType <span class="title">operatorSymbol</span><span class="params">(<span class="type">const</span> ClassName &amp;lhs, <span class="type">const</span> ClassName &amp;rhs)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="示例：重载"><a href="#示例：重载" class="headerlink" title="示例：重载 &lt;&lt; 运算符"></a><strong>示例：重载 <code>&lt;&lt;</code> 运算符</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i) : <span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明友元函数</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> Complex &amp;c);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义友元函数</span></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> Complex &amp;c) &#123;</span><br><span class="line">    out &lt;&lt; c.real &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.imag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1.5</span>, <span class="number">2.5</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Complex number: &quot;</span> &lt;&lt; c1 &lt;&lt; endl; <span class="comment">// 使用重载运算符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex number: <span class="number">1.5</span> + <span class="number">2.5</span>i</span><br></pre></td></tr></table></figure>

<h3 id="3-3-类内运算符重载和类外运算符重载的区别"><a href="#3-3-类内运算符重载和类外运算符重载的区别" class="headerlink" title="3.3 类内运算符重载和类外运算符重载的区别"></a>3.3 类内运算符重载和类外运算符重载的区别</h3><h4 id="1-定义方式"><a href="#1-定义方式" class="headerlink" title="1. 定义方式"></a><strong>1. 定义方式</strong></h4><h5 id="类内运算符重载"><a href="#类内运算符重载" class="headerlink" title="类内运算符重载"></a><strong>类内运算符重载</strong></h5><ul>
<li><p><strong>定义位置：</strong> 在类的内部定义为类的成员函数。</p>
</li>
<li><p><strong>调用方式：</strong> 隐式使用类的对象调用。</p>
</li>
<li><p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类内重载运算符+</span></span><br><span class="line">    MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MyClass</span>(value + other.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">a</span><span class="params">(<span class="number">10</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    MyClass c = a + b; <span class="comment">// 调用类内的operator+</span></span><br><span class="line">    c.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h5 id="类外运算符重载"><a href="#类外运算符重载" class="headerlink" title="类外运算符重载"></a><strong>类外运算符重载</strong></h5><ul>
<li><p><strong>定义位置：</strong> 在类的外部定义为普通函数，通常声明为类的 <strong>友元函数</strong>（如果需要访问私有或保护成员）。</p>
</li>
<li><p><strong>调用方式：</strong> 使用运算符直接作用于类的对象。</p>
</li>
<li><p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明类外友元函数用于重载运算符+</span></span><br><span class="line">    <span class="keyword">friend</span> MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass &amp;a, <span class="type">const</span> MyClass &amp;b);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外定义operator+</span></span><br><span class="line">MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass &amp;a, <span class="type">const</span> MyClass &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MyClass</span>(a.value + b.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">a</span><span class="params">(<span class="number">10</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    MyClass c = a + b; <span class="comment">// 调用类外的operator+</span></span><br><span class="line">    c.<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="2-参数与调用区别"><a href="#2-参数与调用区别" class="headerlink" title="2. 参数与调用区别"></a><strong>2. 参数与调用区别</strong></h4><h5 id="类内运算符重载-1"><a href="#类内运算符重载-1" class="headerlink" title="类内运算符重载"></a><strong>类内运算符重载</strong></h5><ul>
<li><p><strong>隐式传递左操作数：</strong> 类的成员函数默认会把调用者作为 <strong>左操作数</strong>，右操作数需要通过参数传递。</p>
</li>
<li><p><strong>参数数量：</strong> 一元运算符不需要参数，二元运算符只需要一个参数（右操作数）。</p>
</li>
<li><p>调用方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass a, b;</span><br><span class="line">a + b; <span class="comment">// 等价于 a.operator+(b);</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="类外运算符重载-1"><a href="#类外运算符重载-1" class="headerlink" title="类外运算符重载"></a><strong>类外运算符重载</strong></h5><ul>
<li><p><strong>显式传递操作数：</strong> 所有操作数都通过参数传递，包括左操作数。</p>
</li>
<li><p><strong>参数数量：</strong> 一元运算符需要一个参数，二元运算符需要两个参数。</p>
</li>
<li><p>调用方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass a, b;</span><br><span class="line">a + b; <span class="comment">// 等价于 operator+(a, b);</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="3-访问权限"><a href="#3-访问权限" class="headerlink" title="3. 访问权限"></a><strong>3. 访问权限</strong></h4><h5 id="类内运算符重载-2"><a href="#类内运算符重载-2" class="headerlink" title="类内运算符重载"></a><strong>类内运算符重载</strong></h5><ul>
<li>类内的成员函数可以直接访问类的 <strong>私有成员</strong> 和 <strong>保护成员</strong>，无需额外处理。</li>
</ul>
<h5 id="类外运算符重载-2"><a href="#类外运算符重载-2" class="headerlink" title="类外运算符重载"></a><strong>类外运算符重载</strong></h5><ul>
<li><p>如果类外的重载函数需要访问类的私有成员或保护成员，必须将其声明为 </p>
<p>友元函数</p>
<p>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> MyClass <span class="keyword">operator</span>+(<span class="type">const</span> MyClass &amp;a, <span class="type">const</span> MyClass &amp;b);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="4-功能范围"><a href="#4-功能范围" class="headerlink" title="4. 功能范围"></a><strong>4. 功能范围</strong></h4><h5 id="类内运算符重载-3"><a href="#类内运算符重载-3" class="headerlink" title="类内运算符重载"></a><strong>类内运算符重载</strong></h5><ul>
<li><p>类内重载通常用于运算符的 </p>
<p>左操作数</p>
<p> 必须是类的对象，例如：</p>
<ul>
<li><code>a + b</code> 中，<code>a</code> 必须是类的对象。</li>
<li>如果左操作数不是类的对象（如 <code>3 + a</code>），类内运算符无法直接处理。</li>
</ul>
</li>
</ul>
<h5 id="类外运算符重载-3"><a href="#类外运算符重载-3" class="headerlink" title="类外运算符重载"></a><strong>类外运算符重载</strong></h5><ul>
<li>类外重载可以处理更灵活的场景，比如：<ul>
<li>左操作数是类对象时：<code>a + b</code>。</li>
<li>左操作数不是类对象时：<code>3 + a</code>。</li>
</ul>
</li>
</ul>
<p><strong>示例：支持 <code>3 + a</code> 的类外重载：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> MyClass <span class="keyword">operator</span>+(<span class="type">int</span> num, <span class="type">const</span> MyClass &amp;a); <span class="comment">// 支持3 + a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外定义</span></span><br><span class="line">MyClass <span class="keyword">operator</span>+(<span class="type">int</span> num, <span class="type">const</span> MyClass &amp;a) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">MyClass</span>(num + a.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass <span class="title">a</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    MyClass b = <span class="number">3</span> + a; <span class="comment">// 支持左操作数为普通数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="5-代码设计与适用场景"><a href="#5-代码设计与适用场景" class="headerlink" title="5. 代码设计与适用场景"></a><strong>5. 代码设计与适用场景</strong></h4><table>
<thead>
<tr>
<th><strong>比较维度</strong></th>
<th><strong>类内运算符重载</strong></th>
<th><strong>类外运算符重载</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>适用性</strong></td>
<td>左操作数必须是类对象。</td>
<td>左操作数可以是类对象或其他类型。</td>
</tr>
<tr>
<td><strong>访问权限</strong></td>
<td>能直接访问类的私有或保护成员。</td>
<td>需要声明为友元函数才能访问私有成员。</td>
</tr>
<tr>
<td><strong>代码风格</strong></td>
<td>更紧密地绑定类本身，逻辑集中在类内。</td>
<td>功能更灵活，适合跨类或跨类型的操作符重载。</td>
</tr>
<tr>
<td><strong>实现复杂度</strong></td>
<td>较简单，适合常见的运算符重载。</td>
<td>适合需要更高灵活性的重载场景。</td>
</tr>
</tbody></table>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><ul>
<li><strong>类内运算符重载：</strong><ul>
<li>左操作数必须是类对象。</li>
<li>使用更简单，适合内部逻辑紧密绑定类的情况。</li>
</ul>
</li>
<li><strong>类外运算符重载：</strong><ul>
<li>左操作数可以是类对象，也可以是其他类型。</li>
<li>更灵活，适合需要处理跨类或多种数据类型操作的场景。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="4-多线程"><a href="#4-多线程" class="headerlink" title="4. 多线程"></a><strong>4. 多线程</strong></h2><p>多线程使程序可以同时运行多个任务，提高效率。C++11 提供了 <code>std::thread</code> 支持多线程。</p>
<hr>
<h3 id="4-1-创建线程"><a href="#4-1-创建线程" class="headerlink" title="4.1 创建线程"></a><strong>4.1 创建线程</strong></h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a><strong>语法：</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线程要执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(function)</span></span>; <span class="comment">// 创建线程</span></span><br><span class="line">    t.<span class="built_in">join</span>(); <span class="comment">// 等待线程执行完毕</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="示例：简单线程创建"><a href="#示例：简单线程创建" class="headerlink" title="示例：简单线程创建"></a><strong>示例：简单线程创建</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMessage</span><span class="params">(<span class="type">const</span> string &amp;msg)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Message: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(printMessage, <span class="string">&quot;Hello from thread!&quot;</span>)</span></span>; <span class="comment">// 创建线程</span></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>(); <span class="comment">// 等待线程结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Message: Hello from thread!</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-2-多线程同步"><a href="#4-2-多线程同步" class="headerlink" title="4.2 多线程同步"></a><strong>4.2 多线程同步</strong></h3><p>为了避免多个线程同时修改共享资源，C++ 提供了互斥锁 (<code>std::mutex</code>)。</p>
<h4 id="示例：使用互斥锁"><a href="#示例：使用互斥锁" class="headerlink" title="示例：使用互斥锁"></a><strong>示例：使用互斥锁</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mtx; <span class="comment">// 定义互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumbers</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        mtx.<span class="built_in">lock</span>(); <span class="comment">// 加锁</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        mtx.<span class="built_in">unlock</span>(); <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(printNumbers, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(printNumbers, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出（线程顺序可能不同）：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Thread <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">Thread <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">Thread <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">Thread <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="高级的lock方式："><a href="#高级的lock方式：" class="headerlink" title="高级的lock方式："></a><strong>高级的lock方式：</strong></h4><h3 id="1-std-mutex"><a href="#1-std-mutex" class="headerlink" title="1. std::mutex"></a>1. <strong><code>std::mutex</code></strong></h3><p>首先要了解的是 **<code>std::mutex</code>**，它是一个基本的互斥量，用于实现线程间的同步。在 C++11 中，<code>std::mutex</code> 提供了基本的加锁和解锁功能。</p>
<ul>
<li>**<code>std::mutex::lock()</code>**：加锁。</li>
<li>**<code>std::mutex::unlock()</code>**：解锁。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;  <span class="comment">// 定义一个全局的互斥量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">safeFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();     <span class="comment">// 手动加锁</span></span><br><span class="line">    <span class="comment">// 访问或修改共享资源</span></span><br><span class="line">    mtx.<span class="built_in">unlock</span>();   <span class="comment">// 手动解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尽管手动加锁和解锁是有效的，但它们需要小心处理，尤其是在异常发生时。如果发生异常而未能解锁互斥量，程序可能会进入死锁状态。因此，C++ 提供了 <strong><code>std::lock_guard</code></strong> 和 <strong><code>std::unique_lock</code></strong> 来简化互斥量的管理，确保锁在作用域结束时自动释放。</p>
<h3 id="2-std-lock-guard"><a href="#2-std-lock-guard" class="headerlink" title="2. std::lock_guard"></a>2. <strong><code>std::lock_guard</code></strong></h3><p><code>std::lock_guard</code> 是一个简单的封装，它用于在作用域内自动加锁，并且在作用域结束时自动解锁。它是一种 <strong>作用域锁</strong>，非常适合于只需要加锁并自动解锁的场景。</p>
<ul>
<li><strong>作用</strong>：当 <code>std::lock_guard</code> 对象被创建时，它会自动加锁互斥量。当 <code>std::lock_guard</code> 对象超出作用域时，它会自动调用析构函数，进而解锁互斥量。</li>
<li><strong>优点</strong>：避免手动解锁，降低死锁风险。</li>
</ul>
<h4 id="语法示例："><a href="#语法示例：" class="headerlink" title="语法示例："></a>语法示例：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">safeFunctionWithLockGuard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mtx)</span></span>;  <span class="comment">// 自动加锁</span></span><br><span class="line">    <span class="comment">// 访问或修改共享资源</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Shared resource accessed with lock_guard\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 锁会在lk超出作用域时自动释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">safeFunctionWithLockGuard</span>();  <span class="comment">// 调用函数，自动加锁和解锁</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中：</p>
<ul>
<li>当 <code>lock_guard</code> 对象 <code>lk</code> 被创建时，它会自动加锁互斥量 <code>mtx</code>。</li>
<li>当 <code>lk</code> 超出作用域（即 <code>safeFunctionWithLockGuard</code> 函数结束时），<code>lk</code> 会自动解锁 <code>mtx</code>。</li>
</ul>
<p><code>std::lock_guard</code> 的特点是简单且有效，但它不支持解锁或重新锁定操作，只适合于简单的加锁和解锁场景。</p>
<h3 id="3-std-unique-lock"><a href="#3-std-unique-lock" class="headerlink" title="3. std::unique_lock"></a>3. <strong><code>std::unique_lock</code></strong></h3><p><code>std::unique_lock</code> 是一个比 <code>std::lock_guard</code> 更加灵活的锁管理工具，它提供了比 <code>std::lock_guard</code> 更多的功能，包括：</p>
<ul>
<li>可以显式地 <strong>手动解锁</strong>。</li>
<li>支持 <strong>锁的延迟</strong>（即在创建 <code>unique_lock</code> 对象时不立即加锁）。</li>
<li>可以 <strong>重新锁定</strong>。</li>
<li>可以 <strong>转移锁的所有权</strong>，即将锁的所有权从一个 <code>unique_lock</code> 对象转移到另一个。</li>
</ul>
<p><code>std::unique_lock</code> 是 <strong>可移动的</strong>，而 <code>std::lock_guard</code> 不是。</p>
<h4 id="语法示例：-1"><a href="#语法示例：-1" class="headerlink" title="语法示例："></a>语法示例：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">safeFunctionWithUniqueLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">ul</span><span class="params">(mtx)</span></span>;  <span class="comment">// 自动加锁</span></span><br><span class="line">    <span class="comment">// 访问或修改共享资源</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Shared resource accessed with unique_lock\n&quot;</span>;</span><br><span class="line">    ul.<span class="built_in">unlock</span>();  <span class="comment">// 手动解锁</span></span><br><span class="line">    <span class="comment">// 你可以在这里做其他不需要锁的操作</span></span><br><span class="line">    ul.<span class="built_in">lock</span>();  <span class="comment">// 如果需要，可以重新加锁</span></span><br><span class="line">    <span class="comment">// 访问共享资源</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Shared resource accessed after relocking\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 锁会在ul超出作用域时自动释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">safeFunctionWithUniqueLock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中：</p>
<ul>
<li><code>std::unique_lock</code> 在创建时自动加锁互斥量 <code>mtx</code>。</li>
<li>使用 <code>ul.unlock()</code> 手动解锁，之后可以执行一些不需要锁的操作。</li>
<li><code>ul.lock()</code> 可以在之后重新加锁。</li>
<li>当 <code>unique_lock</code> 对象 <code>ul</code> 超出作用域时，<code>mtx</code> 会自动解锁。</li>
</ul>
<p><code>std::unique_lock</code> 提供了比 <code>std::lock_guard</code> 更高的灵活性，但也相对复杂一些。它适用于需要更细粒度控制的场景，如需要手动解锁和重新加锁的情况。</p>
<h3 id="4-std-lock-和-std-lock-guard-与-std-unique-lock-的区别"><a href="#4-std-lock-和-std-lock-guard-与-std-unique-lock-的区别" class="headerlink" title="4. std::lock 和 std::lock_guard 与 std::unique_lock 的区别"></a>4. <code>std::lock</code> 和 <code>std::lock_guard</code> 与 <code>std::unique_lock</code> 的区别</h3><ul>
<li>**<code>std::lock_guard</code>**：<ul>
<li>简单，适用于无需手动解锁的场景。</li>
<li>自动加锁并在作用域结束时自动解锁。</li>
<li>不能显式解锁或重新加锁。</li>
<li>不能转移所有权。</li>
</ul>
</li>
<li>**<code>std::unique_lock</code>**：<ul>
<li>更灵活，适用于需要手动解锁、重新加锁、或转移锁所有权的场景。</li>
<li>支持显式解锁（<code>unlock()</code>）和重新加锁（<code>lock()</code>）。</li>
<li>支持锁的延迟和转移。</li>
</ul>
</li>
<li>**<code>std::mutex</code> 和 <code>std::lock</code>**：<ul>
<li><code>std::mutex</code> 提供了基本的加锁和解锁机制。</li>
<li><code>std::lock</code> 是一个可以同时加锁多个互斥量的工具，可以防止死锁的发生。</li>
</ul>
</li>
</ul>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. <strong>总结</strong></h3><ul>
<li><strong><code>std::lock_guard</code></strong> 和 <strong><code>std::unique_lock</code></strong> 都是用来管理互斥量锁的工具，分别适用于不同的场景。</li>
<li><strong><code>std::lock_guard</code></strong> 是简洁的自动锁管理工具，适合简单的加锁和解锁。</li>
<li><strong><code>std::unique_lock</code></strong> 提供了更灵活的锁管理方式，支持手动解锁、重新加锁等高级操作。</li>
<li>使用这些锁可以有效地避免死锁，减少编写线程安全代码时的复杂性。</li>
</ul>
<h2 id="5-STL（标准模板库）"><a href="#5-STL（标准模板库）" class="headerlink" title="5. STL（标准模板库）"></a><strong>5. STL（标准模板库）</strong></h2><p>STL 提供了常用的数据结构和算法。以下是重点内容。</p>
<hr>
<h3 id="5-1-常用容器"><a href="#5-1-常用容器" class="headerlink" title="5.1 常用容器"></a><strong>5.1 常用容器</strong></h3><h4 id="5-1-1-vector"><a href="#5-1-1-vector" class="headerlink" title="5.1.1 vector"></a><strong>5.1.1 <code>vector</code></strong></h4><p>动态数组，支持随机访问和自动扩容。</p>
<p><strong>示例：基本操作</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">4</span>); <span class="comment">// 添加元素</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>();   <span class="comment">// 删除最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : vec) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="5-1-2-queue"><a href="#5-1-2-queue" class="headerlink" title="5.1.2 queue"></a><strong>5.1.2 <code>queue</code></strong></h4><p>先进先出（FIFO）队列。</p>
<p><strong>示例：基本操作</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    q.push(1); q.push(2); q.push(3);</span><br><span class="line"></span><br><span class="line">    while (!q.empty()) &#123;</span><br><span class="line">        cout &lt;&lt; q.front() &lt;&lt; &quot; &quot;; // 获取队头元素</span><br><span class="line">        q.pop(); // 移除队头元素</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="5-1-3-deque"><a href="#5-1-3-deque" class="headerlink" title="5.1.3 deque"></a><strong>5.1.3 <code>deque</code></strong></h4><p>双端队列，可以从两端插入或删除。</p>
<p><strong>示例：基本操作</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; dq = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    dq.<span class="built_in">push_front</span>(<span class="number">0</span>); <span class="comment">// 前端插入</span></span><br><span class="line">    dq.<span class="built_in">push_back</span>(<span class="number">4</span>);  <span class="comment">// 后端插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : dq) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h5 id="记录代码"><a href="#记录代码" class="headerlink" title="记录代码"></a>记录代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">//input output 流，类似于stdio.h</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ventor 数组 的三种定义</span></span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; v1; <span class="comment">//定义一个空数组</span></span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; <span class="built_in">v2</span>(<span class="number">10</span>); <span class="comment">//定义一个10个元素的空数组</span></span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; <span class="built_in">v3</span>(<span class="number">10</span>,<span class="number">2</span>); <span class="comment">//定义一个10个元素的空数组，并且每个变量都初始化为2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v<span class="number">3.</span><span class="built_in">resize</span>(<span class="number">12</span>); <span class="comment">//resize 可以更改数组长度，增加数组长度的时候，不会修改原有值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;i &lt;<span class="number">12</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;v3[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//可替换原生for循环的工具：迭代器 (适用于c++11)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p =v<span class="number">3.</span><span class="built_in">begin</span>();p!=v<span class="number">3.</span><span class="built_in">end</span>();p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//使用迭代器的好处：无需考虑for循环的开头和结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//set: 集合，元素互异，自动从小到大排序</span></span><br><span class="line">    <span class="comment">//set在创建的时候，没有额外的参数</span></span><br><span class="line">    set &lt;<span class="type">int</span>&gt; my_set;</span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    my_set.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">    my_set.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">    my_set.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    my_set.<span class="built_in">insert</span>(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = my_set.<span class="built_in">begin</span>();p!=my_set.<span class="built_in">end</span>();p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">auto</span> p = my_set.<span class="built_in">find</span>(<span class="number">8</span>); <span class="comment">// .find(data)函数返回的是一个指针</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*p is &quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set 清除某一个元素</span></span><br><span class="line">    my_set.<span class="built_in">erase</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = my_set.<span class="built_in">begin</span>();p!=my_set.<span class="built_in">end</span>();p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    map&lt;<span class="type">int</span>,string&gt; m;</span><br><span class="line">    m[<span class="number">2</span>] =<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    m[<span class="number">1</span>] = <span class="string">&quot;wrold&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = m.<span class="built_in">begin</span>();p!=m.<span class="built_in">end</span>();p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; (*p).first &lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;p-&gt;second&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; m2;</span><br><span class="line">    m2[<span class="string">&quot;hello&quot;</span>] = <span class="number">9</span>;</span><br><span class="line">    m2[<span class="string">&quot;wrold&quot;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = m.<span class="built_in">begin</span>();p!=m.<span class="built_in">end</span>();p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; (*p).first &lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;p-&gt;second&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//stack</span></span><br><span class="line">    stack &lt;<span class="type">int</span>&gt; mystack;</span><br><span class="line">    mystack.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">    mystack.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    mystack.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    mystack.<span class="built_in">pop</span>();</span><br><span class="line">    cout&lt;&lt;mystack.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;mystack.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//queue</span></span><br><span class="line">    queue &lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">6</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">-1</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;q.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;q.<span class="built_in">back</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用哈希表实现的 unordered_map 顺序由哈希函数规定</span></span><br><span class="line">    <span class="comment">//unordered_map 默认使用 std::hash 作为哈希函数</span></span><br><span class="line">    unordered_map&lt;string,<span class="type">int</span>&gt; hashtable;</span><br><span class="line">    hashtable[<span class="string">&quot;apple&quot;</span>] = <span class="number">10</span>;</span><br><span class="line">    hashtable[<span class="string">&quot;banana&quot;</span>] = <span class="number">4</span>;</span><br><span class="line">    hashtable[<span class="string">&quot;pear&quot;</span>]  = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = hashtable.<span class="built_in">begin</span>();p!=hashtable.<span class="built_in">end</span>();p++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p-&gt;second&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用哈希表实现的 unordered_set</span></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; mySet;</span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">    mySet.<span class="built_in">insert</span>(<span class="number">10</span>); <span class="comment">// 重复元素不会插入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查元素</span></span><br><span class="line">    <span class="keyword">if</span> (mySet.<span class="built_in">find</span>(<span class="number">20</span>) != mySet.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;20 is in the set.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历元素 元素顺序由内部哈希函数决定</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; num : mySet) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="5-2-算法库"><a href="#5-2-算法库" class="headerlink" title="5.2 算法库"></a><strong>5.2 算法库</strong></h3><h4 id="5-2-1-std-sort"><a href="#5-2-1-std-sort" class="headerlink" title="5.2.1 std::sort"></a><strong>5.2.1 <code>std::sort</code></strong></h4><p>排序容器中的元素。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()); <span class="comment">// 升序排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : vec) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1 3 4 5</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-3-C-11-新特性"><a href="#5-3-C-11-新特性" class="headerlink" title="5.3 C++11 新特性"></a><strong>5.3 C++11 新特性</strong></h3><h4 id="5-3-1-auto-关键字"><a href="#5-3-1-auto-关键字" class="headerlink" title="5.3.1 auto 关键字"></a><strong>5.3.1 <code>auto</code> 关键字</strong></h4><p>自动推断变量类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">10</span>;  <span class="comment">// 推断为 int</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">3.14</span>; <span class="comment">// 推断为 double</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-Lambda-表达式c"><a href="#5-3-2-Lambda-表达式c" class="headerlink" title="5.3.2 Lambda 表达式c"></a><strong>5.3.2 Lambda 表达式c</strong></h4><p>定义匿名函数的方式，适合轻量级操作。</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[捕获列表](参数列表) -&gt; 返回类型 &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), [&amp;sum](<span class="type">int</span> x) &#123; sum += x; &#125;);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sum: &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sum: 15</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础</title>
    <url>/2025/05/30/JAVA/</url>
    <content><![CDATA[<p>[TOC]</p>
<h5 id="class-和-数组-在内存上的相似性"><a href="#class-和-数组-在内存上的相似性" class="headerlink" title="class 和 数组 在内存上的相似性"></a>class 和 数组 在内存上的相似性</h5><p>类和数组的 名 ，均保存的是地址值</p>
<p>即 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">myclass</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	string str;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a ,string s)</span></span><br><span class="line">	&#123;</span><br><span class="line">		a = a+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">...mian...()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">myclass</span> <span class="variable">class01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myclass</span>();</span><br><span class="line">    <span class="type">myclass</span> <span class="variable">class02</span> <span class="operator">=</span> class01;<span class="comment">//这一步把class01的地址值赋值给了class02，他们两个现在指向同一片内存空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h5><ul>
<li><p>初始化值不同：</p>
<p>成员变量有初始值，局部变量没有</p>
</li>
<li><p>内存位置不同：</p>
<p>成员变量在堆中（本质是跟着对象走），局部变量在栈中（本质是跟着方法走）</p>
</li>
<li><p>生命周期不同：</p>
<p>成员变量跟着对象走，随着对象的产生而产生，随着对象的消亡而消亡</p>
<p>局部变量跟着方法走，随着方法的调用而产生，随着方法结束而消亡</p>
</li>
</ul>
<h5 id="this关键字——-区分成员变量和局部变量"><a href="#this关键字——-区分成员变量和局部变量" class="headerlink" title="this关键字——&gt;区分成员变量和局部变量"></a>this关键字——&gt;区分成员变量和局部变量</h5><ul>
<li>局部变量和成员变量重名时，遵循“就近原则”</li>
<li>如果就想用成员变量，那就用 this.变量名 来引用成员变量</li>
</ul>
<p>对象之间如何区分？</p>
<ul>
<li>哪个对象调用的方法，this就指向哪个对象</li>
</ul>
<h5 id="引用数据类型，要先new"><a href="#引用数据类型，要先new" class="headerlink" title="引用数据类型，要先new"></a>引用数据类型，要先new</h5><p>（什么是引用数据类型：除了基本数据类型，都是引用数据类型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyData</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	string s;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">float</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========== 其他作用域=========</span></span><br><span class="line"></span><br><span class="line"><span class="type">string</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;666&quot;</span>;    <span class="comment">//正常赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> string b.length; <span class="comment">//报错，空指针，根本原因是没有初始化string类型具体是什么，而直接操作他的成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同理：</span></span><br><span class="line"></span><br><span class="line"><span class="type">MyData</span> <span class="variable">mydata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyData</span>();</span><br><span class="line">mydata.a = <span class="number">1</span>;      <span class="comment">//正常，先new了一个对象，然后操作他的成员变量</span></span><br><span class="line"></span><br><span class="line">MyData mydata_error.a = <span class="number">2</span>; <span class="comment">//空指针，因为连mydata_error对象都还没创建，就直接操作他的成员变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是，static的变量可以直接通过 类名 访问，（不是对象名）</span></span><br><span class="line"></span><br><span class="line">MyData.c = <span class="string">&quot;我是静态变量&quot;</span>; <span class="comment">//正常</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="javabean在业务处理中的作用"><a href="#javabean在业务处理中的作用" class="headerlink" title="javabean在业务处理中的作用"></a>javabean在业务处理中的作用</h5><p><strong>javabean与表的对应关系</strong>：</p>
<p>类名——&gt;表名</p>
<p>各个实例化对象——&gt;每一行</p>
<p>成员变量——&gt;每一列的列头（也就是对应的参数）</p>
<ul>
<li>添加功能：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20250403200744494.png" alt="image-20250403200744494"></p>
<ul>
<li>查询功能：<br><img src="C:\Users\EdwardNygma\AppData\Roaming\Typora\typora-user-images\image-20250403201600516.png" alt="image-20250403201600516"></li>
</ul>
<p>标准javabean生成快捷键：alt + insert</p>
<h5 id="java中，static的用法"><a href="#java中，static的用法" class="headerlink" title="java中，static的用法"></a>java中，static的用法</h5><p><strong>静态成员随着类的调用而产生，非静态成员随着对象的产生而产生</strong></p>
<p>因此注意四种辨析：</p>
<ul>
<li><p>在静态成员中能直接访问非静态成员吗：</p>
<p>不能，想在静态成员中访问非静态成员，要先new对象<br>eg：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args）&#123;</span></span><br><span class="line"><span class="params">        test01()</span>;   <span class="comment">//——————&gt;可行，静态调用静态</span></span><br><span class="line">        test02();   <span class="comment">//——————&gt;不可行，静态不能直接调用非静态，因为静态成员比非静态先产生</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//===正确调用：========        </span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">mydemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        mydemo.test02();</span><br><span class="line">        <span class="comment">//====================</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;我是静态成员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;我是非静态成员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
<li><p>在非静态方法中能直接访问静态成员吗：</p>
<p>可以，同类下的话，直接调用即可，不同类的话，通过类名调用（也就是静态方法跟着类走，不跟着对象走）</p>
<p>当然，也可以不管是不是同类，直接类名调用</p>
</li>
<li><p>在静态方法中能直接调用静态成员吗：</p>
<p>可以，同上</p>
</li>
<li><p>在非静态方法中能直接调用非静态成员吗？</p>
<p>可以，同类下可以直接调用，也可以new对象调用，不同类下需要new对象调用</p>
<p>当然，也可以不管是否同类，都通过new对象调用</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<p>1.不管在不在同一个类中,非静态成员都可以new对象调用</p>
<p>2.不管在不在同一个类中,静态成员都可以类名调用</p>
<h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>可变参数本质上是一个数组,用于传递类型已知但数量未知的数据类型</p>
<p>形式：</p>
<p>数据类型…变量名，如 int…nums  String…kids</p>
<p><strong>还有，可变参数必须位于传参的最后面位置</strong></p>
<h5 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h5><p>就是数组的元素是对象，类如</p>
<p>int数组：int[] arr_int &#x3D; new int[3]</p>
<p>Person数组： Person arr_person &#x3D; new Person[3]</p>
<h5 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h5><ul>
<li><p>先调用方法再生成：</p>
<p>alt+回车</p>
</li>
<li><p>将一段代码抽取到一个方法：</p>
<p>ctrl+alt+m</p>
</li>
</ul>
<h5 id="有关继承："><a href="#有关继承：" class="headerlink" title="有关继承："></a>有关继承：</h5><h6 id="子类可以继承什么"><a href="#子类可以继承什么" class="headerlink" title="子类可以继承什么"></a><strong>子类可以继承什么</strong></h6><p>  a.子类可以继承父类中私有和非私有成员,但是不能使用父类中私有成员</p>
<p>  b.构造方法不能继承</p>
<h6 id="成员变量和成员方法各自的访问特点（同样适用于多态）"><a href="#成员变量和成员方法各自的访问特点（同样适用于多态）" class="headerlink" title="成员变量和成员方法各自的访问特点（同样适用于多态）"></a><strong>成员变量和成员方法各自的访问特点</strong>（同样适用于多态）</h6><ul>
<li><p>成员变量：看等号左边，左边是谁就用谁的成员变量，比如如果等号左边是子类，且没有，再去找父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fu</span> &#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zi</span> <span class="keyword">extends</span> <span class="title class_">fu</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;  <span class="comment">//也叫num，两者重名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">fu</span> <span class="variable">fu_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">fu</span>();</span><br><span class="line">    <span class="type">zi</span> <span class="variable">zi_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">zi</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    sout(fu.num)  		——&gt;父类的num</span></span><br><span class="line"><span class="comment">    sout(zi.num)		——&gt;子类的num</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//多态：</span></span><br><span class="line">    <span class="type">fu</span> <span class="variable">fu_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">zi</span>();</span><br><span class="line"> <span class="comment">// sout(fu_2.num)		——&gt;子类的num，因为继承中的成员变量看等号左边</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>成员方法：与成员变量相反，他看等号右边new的是谁，不做展示</p>
</li>
</ul>
<h6 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a><strong>方法的重写</strong></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.概述:子类中有一个和父类方法名以及参数列表相同的方法</span><br><span class="line">2.前提:继承</span><br><span class="line">3.访问:看new的是谁,先调用谁中的,如果new的是子类,调用调用子类重写的方法,子类没有,找父类</span><br><span class="line">4.检测是否为重写方法:在该方法上写</span><br><span class="line">  @Override  </span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>子类重写父类方法之后,权限必须要保证大于等于父类权限(权限指的是访问权限)</span><br><span class="line">  <span class="keyword">public</span> -&gt; <span class="keyword">protected</span> -&gt; 默认 -&gt; <span class="keyword">private</span></span><br><span class="line"><span class="number">2.</span>子类方法重写父类方法,方法名和参数列表要一样 <span class="comment">//和重载要求参数列表不同不一样，这个要求一样</span></span><br><span class="line"><span class="number">3.</span>私有方法不能被重写,构造方法不能被重写,静态方法不能被重写</span><br><span class="line"><span class="number">4.</span>子类重写父类方法之后,返回值类型应该是父类方法返回值类型的子类类型  <span class="comment">//意思就是，子类的返回值如果是一个类的话，那这个类必须是父类返回值的那个类的子类</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h6 id="super和this"><a href="#super和this" class="headerlink" title="super和this"></a><strong>super和this</strong></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.注意:new子类对象时,会先初始化父类(先走父类无参构造方法)</span><br><span class="line">2.原因:</span><br><span class="line">  每个构造方法的第一行,默认都会有一个super(),不写jvm自动提供一个</span><br><span class="line">  super()代表的是父类无参构造  </span><br></pre></td></tr></table></figure>

<p>也就是说，子必有父，调用子类，如果不 <strong>显示使用super（有参）的话</strong> 父类一定会默认走一次无参构造</p>
<p>super的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>概述:代表的是父类引用</span><br><span class="line"><span class="number">2.</span>作用:可以调用父类中的成员</span><br><span class="line"><span class="number">3.</span>使用:</span><br><span class="line">  a.调用父类构造方法-&gt; 在子类中的构造中写</span><br><span class="line">    <span class="built_in">super</span>() -&gt; 调用父类无参构造</span><br><span class="line">    <span class="built_in">super</span>(实参)  -&gt; 调用父类有参构造</span><br><span class="line">      </span><br><span class="line">  b.调用父类成员变量:</span><br><span class="line">    <span class="built_in">super</span>.成员变量名</span><br><span class="line">        </span><br><span class="line">  c.调用父类成员方法:</span><br><span class="line">    <span class="built_in">super</span>.成员方法名(实参)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">this</span>概述:代表的是当前对象(哪个对象调用的<span class="built_in">this</span>所在的方法,<span class="built_in">this</span>就代表哪个对象)</span><br><span class="line"><span class="number">2.</span>作用:</span><br><span class="line">  a.区分重名的成员变量和局部变量</span><br><span class="line">  b.调用当前对象中的成员</span><br><span class="line"><span class="number">3.</span>使用:</span><br><span class="line">  a.调用当前对象的构造:在构造中写</span><br><span class="line">    <span class="built_in">this</span>():调用当前对象的无参构造</span><br><span class="line">    <span class="built_in">this</span>(实参):调用当前对象的有参构造</span><br><span class="line">  b.调用当前对象的成员变量:</span><br><span class="line">    <span class="built_in">this</span>.成员变量名</span><br><span class="line">  c.调用当前对象的成员方法:</span><br><span class="line">    <span class="built_in">this</span>.成员方法名(实参)</span><br><span class="line"><span class="number">4.</span>注意:</span><br><span class="line">  不管是<span class="built_in">super</span>还是<span class="built_in">this</span>,只要在构造中使用,都必须在第一行,所以二者不能同时手写出来</span><br></pre></td></tr></table></figure>

<p>super 和 this 不能同时出现，因为两个都要在第一行</p>
<h6 id="继承的特点："><a href="#继承的特点：" class="headerlink" title="继承的特点："></a>继承的特点：</h6><p><strong>只能单继承，不能多继承</strong></p>
<p>想给private赋值或读取，那就要用到非私有的方法，getset也好，构造方法也行</p>
<h5 id="抽象："><a href="#抽象：" class="headerlink" title="抽象："></a>抽象：</h5><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20250411215743850.png" alt="image-20250411215743850"></p>
<p>抽象的真正意义：</p>
<ul>
<li>可以将抽象类看成是一类事物的标准,要求只要是属于这一类的,都必须要拥有抽象类中的方法,必须要给我实现</li>
<li>怎么证明拥有了,怎么证明实现了呢?-&gt; 重写</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>学生信息管理系统</title>
    <url>/2025/04/10/JAVA%E5%AD%A6%E7%94%9F%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="功能概述："><a href="#功能概述：" class="headerlink" title="功能概述："></a>功能概述：</h2><ul>
<li>每个Student 对象存储一个学生的信息</li>
<li>查询功能：<ul>
<li>通过姓名查询（考虑重名情况）</li>
<li>通过学号查询</li>
</ul>
</li>
<li>修改功能：<ul>
<li>修改姓名</li>
<li>修改学号</li>
<li>修改年龄</li>
<li>修改班级信息</li>
</ul>
</li>
<li>增删信息：<ul>
<li>增加&#x2F;删除条目</li>
</ul>
</li>
<li>展示全部：<ul>
<li>展示当前全部信息</li>
</ul>
</li>
</ul>
<h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">    └─com</span><br><span class="line">        └─stu_info_manage</span><br><span class="line">            ├─controller</span><br><span class="line">            │      main.java</span><br><span class="line">            │      UserInput.java</span><br><span class="line">            │</span><br><span class="line">            ├─data</span><br><span class="line">            │      Add_rm.java</span><br><span class="line">            │      Change_info.java</span><br><span class="line">            │      Info_Stroage.java</span><br><span class="line">            │      Search.java</span><br><span class="line">            │      Student.java</span><br><span class="line">            │</span><br><span class="line">            └─service</span><br><span class="line">                    Add_rm.java</span><br><span class="line">                    ChangeInfo.java</span><br><span class="line">                    Search.java</span><br></pre></td></tr></table></figure>

<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>首先创建一个Student标准JavaBean，包含各个get，set方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu_info_manage.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId_num</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id_num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId_num</span><span class="params">(String id_num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id_num = id_num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClass_info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> class_info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClass_info</span><span class="params">(String class_info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.class_info = class_info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String id_num;</span><br><span class="line">    <span class="keyword">private</span> String class_info;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后，根据标准Java管理系统结构，分出3个package：</p>
<ul>
<li>表层：controller</li>
<li>服务层：service</li>
<li>数据层：dao（我写的data）</li>
</ul>
<p>表层中，使用Userinputt类处理用户的输入输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu_info_manage.controller;</span><br><span class="line"><span class="keyword">import</span> com.stu_info_manage.data.Student;</span><br><span class="line"><span class="keyword">import</span> com.stu_info_manage.service.Search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInput</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print_init_info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Welcome,输入你的操作&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1：查询\n2.修改\n3.添加\\删除\n4.列出所有&quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">init_sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">init_choice</span> <span class="operator">=</span> init_sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (init_choice ==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                choice1_init();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (init_choice == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">                choice2_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (init_choice == <span class="number">3</span>) &#123;</span><br><span class="line"></span><br><span class="line">                add_rm_stu_init();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (init_choice == <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">                show_all();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">choice1_init</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        stu = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;你想通过什么查询？，输入\n1.姓名\n2.学号&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">choice1_sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice1_choice</span> <span class="operator">=</span> choice1_sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(choice1_choice == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你选择从姓名查询&quot;</span>);</span><br><span class="line">            garbage_char = choice1_sc.nextLine();</span><br><span class="line">            name = choice1_sc.nextLine();</span><br><span class="line">            stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            stu_list = Search.search_form_name(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(choice1_choice == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你选择从学号查询&quot;</span>);</span><br><span class="line">            garbage_char = choice1_sc.nextLine();</span><br><span class="line">            id_num = choice1_sc.nextLine();</span><br><span class="line">            stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            stu_list = Search.search_form_id_num(id_num);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的查询结果：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stu_list.size(); i++) &#123;</span><br><span class="line">            stu = stu_list.get(i);</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+stu.getName()+<span class="string">&quot; id:&quot;</span>+stu.getId_num()+<span class="string">&quot; age:&quot;</span>+stu.getAge()+<span class="string">&quot; class:&quot;</span>+stu.getClass_info());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">choice2_init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想修改的人的学号&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">choice2_sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        id_num = choice2_sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;你选择了学号为：&quot;</span>+id_num+<span class="string">&quot; 的人&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你想修改的信息：\n 1.姓名 \n 2.学号 \n 3.年龄 \n 4.班级&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> choice2_sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你要将姓名改成什么：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">trash</span> <span class="operator">=</span> choice2_sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">rename</span> <span class="operator">=</span> choice2_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将姓名修改为 &quot;</span>+rename);</span><br><span class="line"></span><br><span class="line">            com.stu_info_manage.service.<span class="type">ChangeInfo</span> <span class="variable">changeInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.service.ChangeInfo();</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">renamed</span> <span class="operator">=</span> changeInfo.Rename(rename,id_num);</span><br><span class="line">            <span class="keyword">if</span>(renamed)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将学号改成什么？&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">trash</span> <span class="operator">=</span> choice2_sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">re_id_num</span> <span class="operator">=</span> choice2_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将学号改成：&quot;</span>+re_id_num);</span><br><span class="line"></span><br><span class="line">            com.stu_info_manage.service.<span class="type">ChangeInfo</span> <span class="variable">changeInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.service.ChangeInfo();</span><br><span class="line">            System.out.println(<span class="string">&quot;before: &quot;</span>+id_num+<span class="string">&quot; after: &quot;</span>+re_id_num);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">re_id_numed</span> <span class="operator">=</span> changeInfo.Re_id_num(id_num,re_id_num);</span><br><span class="line">            <span class="keyword">if</span>(re_id_numed)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将年龄改成什么？&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">trash</span> <span class="operator">=</span> choice2_sc.nextLine();</span><br><span class="line">            <span class="type">int</span> <span class="variable">reage</span> <span class="operator">=</span> choice2_sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将年龄改为&quot;</span>+reage);</span><br><span class="line">            com.stu_info_manage.service.<span class="type">ChangeInfo</span> <span class="variable">changeInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.service.ChangeInfo();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">reaged</span> <span class="operator">=</span> changeInfo.Reage(reage,id_num);</span><br><span class="line">            <span class="keyword">if</span>(reaged)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">4</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将班级改成什么？&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">trash</span> <span class="operator">=</span> choice2_sc.nextLine();</span><br><span class="line">            String reclass= choice2_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;你想将班级改为&quot;</span>+reclass);</span><br><span class="line">            com.stu_info_manage.service.<span class="type">ChangeInfo</span> <span class="variable">changeInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.service.ChangeInfo();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">reclassed</span> <span class="operator">=</span> changeInfo.Reclass(reclass,id_num);</span><br><span class="line">            <span class="keyword">if</span>(reclassed)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add_rm_stu_init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加成员按1，减成员按2&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">choice3_sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">add_or_rm</span> <span class="operator">=</span> choice3_sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(add_or_rm==<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入姓名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">trush</span> <span class="operator">=</span> choice3_sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">add_name</span> <span class="operator">=</span> choice3_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学号&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">add_id</span> <span class="operator">=</span> choice3_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入年龄&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">add_age</span> <span class="operator">=</span> choice3_sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入班级&quot;</span>);</span><br><span class="line">            trush = choice3_sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">add_class</span> <span class="operator">=</span> choice3_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;你想添加：&quot;</span>+add_name+<span class="string">&quot; &quot;</span>+add_id+<span class="string">&quot; &quot;</span>+add_age+<span class="string">&quot; &quot;</span>+add_class);</span><br><span class="line">            com.stu_info_manage.service.<span class="type">Add_rm</span> <span class="variable">add_rm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.service.Add_rm();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> add_rm.add_item(add_name,add_id,add_age,add_class);</span><br><span class="line">            <span class="keyword">if</span>(added)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (add_or_rm==<span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入你要删除的学号&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">trush</span> <span class="operator">=</span> choice3_sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">rm_id</span> <span class="operator">=</span> choice3_sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;你想删除：&quot;</span>+rm_id);</span><br><span class="line">            com.stu_info_manage.service.<span class="type">Add_rm</span> <span class="variable">add_rm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.service.Add_rm();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">rmed</span> <span class="operator">=</span> add_rm.rm_item(rm_id);</span><br><span class="line">            <span class="keyword">if</span>(rmed)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show_all</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        com.stu_info_manage.data.Info_Stroage.show_all();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String id_num;</span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line">    <span class="keyword">private</span> String garbage_char;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; stu_list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务层中，分出 增删条目 &#x2F; 修改信息 &#x2F; 查找条目 三块，因为这个小系统服务层不用处理什么东西，所以基本是一个转接头的作用，不过还是写出来了框架：</p>
<ul>
<li>增删条目：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu_info_manage.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Add_rm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add_item</span><span class="params">(String add_name,String add_id_num,<span class="type">int</span> add_age,String add_class)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(add_age&gt;<span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            added = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            com.stu_info_manage.data.<span class="type">Add_rm</span> <span class="variable">add_rm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Add_rm();</span><br><span class="line">            added = add_rm.add_item(add_name,add_id_num,add_age,add_class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> added;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">rm_item</span><span class="params">(String rm_id_num)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rmed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Add_rm</span> <span class="variable">add_rm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Add_rm();</span><br><span class="line">        rmed = add_rm.rm_item(rm_id_num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rmed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改信息：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu_info_manage.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeInfo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Rename</span><span class="params">(String rename,String id_num)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.rename = rename;</span><br><span class="line">        <span class="built_in">this</span>.id_num = id_num;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Change_info</span> <span class="variable">change_info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Change_info();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">renamed</span> <span class="operator">=</span> change_info.Rename(<span class="built_in">this</span>.id_num,<span class="built_in">this</span>.rename);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> renamed;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Re_id_num</span><span class="params">(String id_num,String id_num_aft)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.id_num = id_num;</span><br><span class="line">        <span class="built_in">this</span>.id_num_aft = id_num_aft;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Change_info</span> <span class="variable">change_info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Change_info();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">re_id_numed</span> <span class="operator">=</span> change_info.Re_id_numed(<span class="built_in">this</span>.id_num,<span class="built_in">this</span>.id_num_aft);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> re_id_numed;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Reage</span><span class="params">(<span class="type">int</span> reage,String id_num)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.reage = reage;</span><br><span class="line">        <span class="built_in">this</span>.id_num = id_num;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Change_info</span> <span class="variable">change_info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Change_info();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">reaged</span> <span class="operator">=</span> change_info.Reage(<span class="built_in">this</span>.id_num,<span class="built_in">this</span>.reage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reaged;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Reclass</span><span class="params">(String reclass,String id_num)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.reclass = reclass;</span><br><span class="line">        <span class="built_in">this</span>.id_num = id_num;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Change_info</span> <span class="variable">change_info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Change_info();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">reclassed</span> <span class="operator">=</span> change_info.Reclass(<span class="built_in">this</span>.id_num,<span class="built_in">this</span>.reclass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reclassed;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rename;</span><br><span class="line">    <span class="keyword">private</span> String reclass;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> reage;</span><br><span class="line">    <span class="keyword">private</span> String id_num;</span><br><span class="line">    <span class="keyword">private</span> String id_num_aft;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查找条目：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu_info_manage.service;</span><br><span class="line"><span class="keyword">import</span> com.stu_info_manage.data.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Search</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Student&gt; <span class="title function_">search_form_name</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Search</span> <span class="variable">sh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Search</span>();</span><br><span class="line">        sh.name = name;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Search</span> <span class="variable">sh_data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Search();</span><br><span class="line">        sh.stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        sh.stu_list = sh_data.search_form_name(sh.name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  sh.stu_list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Student&gt; <span class="title function_">search_form_id_num</span><span class="params">(String id_num)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Search</span> <span class="variable">sh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Search</span>();</span><br><span class="line">        sh.id_num = id_num;</span><br><span class="line">        com.stu_info_manage.data.<span class="type">Search</span> <span class="variable">sh_data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.stu_info_manage.data.Search();</span><br><span class="line">        sh.stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        sh.stu_list = sh_data.search_form_id_num(sh.id_num);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sh.stu_list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id_num ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> Student stu;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; stu_list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>数据层同样分出三层，也相当于转接头，不予列出</p>
<p>最终数据处理在Info_stroage类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu_info_manage.data;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Info_Stroage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init_example</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stu_null = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu_null .setName(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        stu_null.setAge(<span class="number">000</span>);</span><br><span class="line">        stu_null.setId_num(<span class="string">&quot;000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        students = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            students[i] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        students[<span class="number">0</span>].setName(<span class="string">&quot;ctx&quot;</span>);</span><br><span class="line">        students[<span class="number">0</span>].setAge(<span class="number">20</span>);</span><br><span class="line">        students[<span class="number">0</span>].setId_num(<span class="string">&quot;2023211949&quot;</span>);</span><br><span class="line">        students[<span class="number">0</span>].setClass_info(<span class="string">&quot;23dx0211&quot;</span>);</span><br><span class="line"></span><br><span class="line">        students[<span class="number">2</span>].setName(<span class="string">&quot;ctx&quot;</span>);</span><br><span class="line">        students[<span class="number">2</span>].setAge(<span class="number">21</span>);</span><br><span class="line">        students[<span class="number">2</span>].setId_num(<span class="string">&quot;2023211950&quot;</span>);</span><br><span class="line">        students[<span class="number">2</span>].setClass_info(<span class="string">&quot;23dx0211&quot;</span>);</span><br><span class="line"></span><br><span class="line">        students[<span class="number">1</span>].setName(<span class="string">&quot;zwc&quot;</span>);</span><br><span class="line">        students[<span class="number">1</span>].setAge(<span class="number">20</span>);</span><br><span class="line">        students[<span class="number">1</span>].setId_num(<span class="string">&quot;2023211940&quot;</span>);</span><br><span class="line">        students[<span class="number">1</span>].setClass_info(<span class="string">&quot;23dx0210&quot;</span>);</span><br><span class="line"></span><br><span class="line">        stu_num = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Student&gt; <span class="title function_">getStudents_name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">stu_num</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (students[i].getName()!=<span class="literal">null</span>&amp;&amp;students[i].getName().equals(name))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;find the studrent:&quot;</span>+i);</span><br><span class="line">                stu_list.add(students[i]);</span><br><span class="line">                stu_num ++ ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stu_num==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;stu_name_is_null&quot;</span>);</span><br><span class="line">            stu_list.add(stu_null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stu_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Student&gt; <span class="title function_">getStudents_id_num</span><span class="params">(String id_num)</span> &#123;</span><br><span class="line">        stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">stu_num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (students[i].getId_num()!=<span class="literal">null</span> &amp;&amp; students[i].getId_num().equals(id_num))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;find the studrent:&quot;</span>+i);</span><br><span class="line">                stu_list.add(students[i]);</span><br><span class="line">                stu_num++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stu_num == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;the student is null&quot;</span>);</span><br><span class="line">            stu_list.add(stu_null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stu_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">Rename</span><span class="params">(String id_num,String rename)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">renamed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(students[i].getId_num()!=<span class="literal">null</span>&amp;&amp;students[i].getId_num().equals(id_num))</span><br><span class="line">            &#123;</span><br><span class="line">                students[i].setName(rename);</span><br><span class="line">                renamed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> renamed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">Re_id_num</span><span class="params">(String id_num_pre,String id_num_aft)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">re_id_numed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(students[i].getId_num()!=<span class="literal">null</span>&amp;&amp;students[i].getId_num().equals(id_num_pre))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;find_stu&quot;</span>+i);</span><br><span class="line">                students[i].setId_num(id_num_aft);</span><br><span class="line">                re_id_numed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(re_id_numed);</span><br><span class="line">        <span class="keyword">return</span> re_id_numed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">Reage</span><span class="params">(String id_num,<span class="type">int</span> reage)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">reaged</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(students[i].getId_num()!=<span class="literal">null</span>&amp;&amp;students[i].getId_num().equals(id_num))</span><br><span class="line">            &#123;</span><br><span class="line">                students[i].setAge(reage);</span><br><span class="line">                reaged = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reaged;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">Reclass</span><span class="params">(String id_num,String reclass)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">reclassed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(students[i].getId_num()!=<span class="literal">null</span>&amp;&amp;students[i].getId_num().equals(id_num))</span><br><span class="line">            &#123;</span><br><span class="line">                students[i].setClass_info(reclass);</span><br><span class="line">                reclassed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reclassed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">add_item</span><span class="params">(String add_name,String add_id_num,<span class="type">int</span> add_age,String add_class)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        students[stu_num].setName(add_name);</span><br><span class="line">        students[stu_num].setId_num(add_id_num);</span><br><span class="line">        students[stu_num].setAge(add_age);</span><br><span class="line">        students[stu_num].setClass_info(add_class);</span><br><span class="line">        stu_num++;</span><br><span class="line">        added = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> added;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">rm_item</span><span class="params">(String rm_id_num)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rmed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(students[i].getId_num().equals(rm_id_num)) &#123;</span><br><span class="line">                loc = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> loc; i &lt; stu_num; i++) &#123;</span><br><span class="line">            students[i] = students[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stu_num--;</span><br><span class="line">        rmed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> rmed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show_all</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;total: &quot;</span>+stu_num);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stu_num; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name: &quot;</span>+students[i].getName()+<span class="string">&quot; age: &quot;</span>+students[i].getAge()+<span class="string">&quot; id: &quot;</span>+students[i].getId_num()+<span class="string">&quot; class: &quot;</span>+students[i].getClass_info());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Student[] students;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Student stu_null;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Student&gt; stu_list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> stu_num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="开发记录"><a href="#开发记录" class="headerlink" title="开发记录"></a>开发记录</h2><h3 id="1-ArrayList-的使用"><a href="#1-ArrayList-的使用" class="headerlink" title="1.ArrayList 的使用"></a>1.ArrayList 的使用</h3><p>在存储对象的时候，一开始想把对象存储在数组中，也就是对象数组，当然最后也是这么存的，但在查找类的构建过程中，意识到可能存在重名情况，因此不能固定返回一个Student对象，而应该返回一个数组</p>
<p>然而，数组的长度是不确定的，所以引入ArrayList可变长数组来进行对象的动态数目存储</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new ArrayList 对象：</span></span><br><span class="line">ArrayList&lt;Student&gt; stu_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加元素：</span></span><br><span class="line">stu_list.add(stu_example);</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为函数返回值：</span></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;stduent&gt; <span class="title function_">method</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>基础语法</title>
    <url>/2025/01/07/cmake/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="CMakeLists-txt编写"><a href="#CMakeLists-txt编写" class="headerlink" title="CMakeLists.txt编写"></a>CMakeLists.txt编写</h2><ul>
<li>文件名必须严格写为CMakeLists</li>
</ul>
<h3 id="基础的三句话："><a href="#基础的三句话：" class="headerlink" title="基础的三句话："></a>基础的三句话：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake_minmum_required (VERSION <span class="number">2.8</span>) //这句话指的是支持的cmake最低版本</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (<span class="keyword">test</span>)						//这句话是项目名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(test_executable_file main.c) </span><br><span class="line">//这句话有两类参数，第一个参数是预计生成的可执行文件，后面的参数是Cpp语言源文件，</span><br><span class="line">如果说有多个源文件，则在第二类参数里面添加，比如：</span><br><span class="line"><span class="keyword">add_executable</span>(test2 main.cpp <span class="keyword">test</span>.cpp)</span><br></pre></td></tr></table></figure>

<h3 id="清除命令："><a href="#清除命令：" class="headerlink" title="清除命令："></a>清除命令：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">make clean //清除test_executable_file可执行文件</span><br><span class="line"></span><br><span class="line">rm -rf CMakeFiles CMakeCache.txt cmake_install.cmake Makefile test_executable_file //删干净</span><br></pre></td></tr></table></figure>

<h3 id="将所有文件包含进去的命令："><a href="#将所有文件包含进去的命令：" class="headerlink" title="将所有文件包含进去的命令："></a>将所有文件包含进去的命令：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">aux_source_directionary(dir var)</span><br><span class="line"><span class="comment">#这句话有两个参数，前面一个dir指的是目标路径，后面的var指的是一个变量</span></span><br><span class="line"><span class="comment">#因此这句话的作用就是，把dir路径下的cpp文件列表存到var变量里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对应的，add_executable() 的第二个参数变为 $&#123;var&#125;:</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> <span class="variable">$&#123;var&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="用set命令来指定我们想包含的文件："><a href="#用set命令来指定我们想包含的文件：" class="headerlink" title="用set命令来指定我们想包含的文件："></a>用set命令来指定我们想包含的文件：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> (var</span><br><span class="line">	./mian.c</span><br><span class="line">	./test1.c</span><br><span class="line">	./test2.c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个命令把上面三个c文件列表存到了var变量，同样的 add_executable()的第二个参数也是变为$&#123;var&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="指定头文件路径"><a href="#指定头文件路径" class="headerlink" title="指定头文件路径"></a>指定头文件路径</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span> (dir1 dir2)</span><br><span class="line"><span class="comment">#把dir1 和dir2 内的头文件包含进去</span></span><br></pre></td></tr></table></figure>

<h2 id="构建项目结构"><a href="#构建项目结构" class="headerlink" title="构建项目结构"></a>构建项目结构</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>source_dir 源代码目录</p>
<p>指定一个包含CMakeLists.txt和代码文件所在的目录，该目录可以是绝对路径，也可以是相对路径，对于后者相对路径的起点是CMAKE_CURRENT_SOURCE_DIR。此外，如果子目录再次包含的CMakeLists.txt，则将继续处理里层的CMakeLists.txt，而不是继续处理当前源代码</p>
</li>
<li><p>binary_dir 二进制代码目录</p>
<p>这个目录是可选的，如果指定，cmake命令执行后的输出文件将会存放在此处，若没有指定，默认情况等于<code>source_dir</code>没有进行相对路径计算前的路径，也就是<code>CMAKE_BINARY_DIR</code></p>
</li>
<li><p>EXCLUDE_FEOM_ALL</p>
<p>这个标志是可选的，如果传递了该参数表示新增加的子目录将会排除在ALL目录之外</p>
</li>
</ul>
<h4 id="双CMakeLists法："><a href="#双CMakeLists法：" class="headerlink" title="双CMakeLists法："></a>双CMakeLists法：</h4><ul>
<li><p>在根目录下构建 CMakeLists.txt ，然后再这个lists里面，使用add_subdirectionary命令，使编译过程转到src文件夹内的CMakeLists里面</p>
</li>
<li><p>在src的CMakeLists里面，编写主要工作：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">aux_source_directionary (. src_list)</span><br><span class="line"><span class="keyword">include_directories</span> (../<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;src_list&#125;</span>)</span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></figure>

<ul>
<li>EXECUTABLE_OUTPUT_PATH ：目标二进制可执行文件的存放位置</li>
<li>PROJECT_SOURCE_DIR：工程的根目录</li>
</ul>
<p>这两个都是cmake的预定义变量，直接拿来用</p>
</li>
<li><p>在build目录下执行cmake过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>cd build以后，会把执行编译生成的文件放在build里面，防止把代码结构变成史</p>
<p>cmake .. 的含义，是从上一级目录中寻找cmakelist</p>
</li>
</ul>
<h4 id="单CMakeLists法"><a href="#单CMakeLists法" class="headerlink" title="单CMakeLists法"></a>单CMakeLists法</h4><p>直接在根目录下编写cmakelist，并把参数写好</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake_minmun_required (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(single_cmakelist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin) <span class="comment">#把可执行文件放到bin里边</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span> (src SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span> (<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>同样的，新建一个bulid文件夹然后在里面cmake .. make即可</p>
<h4 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h4><p>最明显的区别就是，双cmakelist利用了add_subdirectoryI()函数进入后优先执行字母里cmakelist的特性</p>
<p>把整个编译过程分层了，分成外层的控制全局和内层的具体实现</p>
<h2 id="动态库和静态库的编译控制"><a href="#动态库和静态库的编译控制" class="headerlink" title="动态库和静态库的编译控制"></a>动态库和静态库的编译控制</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (SRC_LIST <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/testFunc.c) <span class="comment">#把src路径设置好</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span> (testFunc_shared SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)  <span class="comment">#第1个参数指定库的名字；第2个参数决定是动态还是静态，如果没有就默认静态；第3个参数指定生成库的源文件</span></span><br><span class="line"><span class="keyword">add_library</span> (testFunc_static STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set_target_properties</span> (testFunc_shared PROPERTIES OUTPUT_NAME <span class="string">&quot;testFunc&quot;</span>) </span><br><span class="line"><span class="keyword">set_target_properties</span> (testFunc_static PROPERTIES OUTPUT_NAME <span class="string">&quot;testFunc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (SRC_LIST <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find testFunc.h</span></span><br><span class="line"><span class="keyword">include_directories</span> (<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/inc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(TESTFUNC_LIB testFunc HINTS <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (main <span class="variable">$&#123;TESTFUNC_LIB&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>find_library: 在指定目录下查找指定库，并把库的绝对路径存放到变量里，其第一个参数是变量名称，第二个参数是库名称，第三个参数是HINTS，第4个参数是路径，其它用法可以参考cmake文档</li>
<li>target_link_libraries: 把目标文件与库文件进行链接</li>
</ul>
<h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><h3 id="简单程序"><a href="#简单程序" class="headerlink" title="简单程序"></a>简单程序</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_compile_options</span>(-std=c++<span class="number">11</span> -Wall)  <span class="comment">#这句话</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成指定的bin"><a href="#生成指定的bin" class="headerlink" title="生成指定的bin"></a>生成指定的bin</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span>(MYDEBUG <span class="string">&quot;enable debug compilation&quot;</span> <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用option命令，第一个参数是用户自己规定的名字，中间是显示的信息，最后一个是开关，不写默认是关</p>
<p>然后在src的cmakelist里面就可以读取呼呼自己输入的名字的开关状态来决定：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main1 main1.c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (MYDEBUG) <span class="comment">#如果为ON</span></span><br><span class="line">    <span class="keyword">add_executable</span>(main2 main2.c)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;Currently is not in debug mode&quot;</span>)    </span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>基础语法</title>
    <url>/2025/01/07/opencv/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="CMakeLists-txt编写"><a href="#CMakeLists-txt编写" class="headerlink" title="CMakeLists.txt编写"></a>CMakeLists.txt编写</h2><ul>
<li>文件名必须严格写为CMakeLists</li>
</ul>
<h3 id="基础的三句话："><a href="#基础的三句话：" class="headerlink" title="基础的三句话："></a>基础的三句话：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake_minmum_required (VERSION <span class="number">2.8</span>) //这句话指的是支持的cmake最低版本</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (<span class="keyword">test</span>)						//这句话是项目名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(test_executable_file main.c) </span><br><span class="line">//这句话有两类参数，第一个参数是预计生成的可执行文件，后面的参数是Cpp语言源文件，</span><br><span class="line">如果说有多个源文件，则在第二类参数里面添加，比如：</span><br><span class="line"><span class="keyword">add_executable</span>(test2 main.cpp <span class="keyword">test</span>.cpp)</span><br></pre></td></tr></table></figure>

<h3 id="清除命令："><a href="#清除命令：" class="headerlink" title="清除命令："></a>清除命令：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">make clean //清除test_executable_file可执行文件</span><br><span class="line"></span><br><span class="line">rm -rf CMakeFiles CMakeCache.txt cmake_install.cmake Makefile test_executable_file //删干净</span><br></pre></td></tr></table></figure>

<h3 id="将所有文件包含进去的命令："><a href="#将所有文件包含进去的命令：" class="headerlink" title="将所有文件包含进去的命令："></a>将所有文件包含进去的命令：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">aux_source_directionary(dir var)</span><br><span class="line"><span class="comment">#这句话有两个参数，前面一个dir指的是目标路径，后面的var指的是一个变量</span></span><br><span class="line"><span class="comment">#因此这句话的作用就是，把dir路径下的cpp文件列表存到var变量里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对应的，add_executable() 的第二个参数变为 $&#123;var&#125;:</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> <span class="variable">$&#123;var&#125;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="用set命令来指定我们想包含的文件："><a href="#用set命令来指定我们想包含的文件：" class="headerlink" title="用set命令来指定我们想包含的文件："></a>用set命令来指定我们想包含的文件：</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> (var</span><br><span class="line">	./mian.c</span><br><span class="line">	./test1.c</span><br><span class="line">	./test2.c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个命令把上面三个c文件列表存到了var变量，同样的 add_executable()的第二个参数也是变为$&#123;var&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="指定头文件路径"><a href="#指定头文件路径" class="headerlink" title="指定头文件路径"></a>指定头文件路径</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span> (dir1 dir2)</span><br><span class="line"><span class="comment">#把dir1 和dir2 内的头文件包含进去</span></span><br></pre></td></tr></table></figure>

<h2 id="构建项目结构"><a href="#构建项目结构" class="headerlink" title="构建项目结构"></a>构建项目结构</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>source_dir 源代码目录</p>
<p>指定一个包含CMakeLists.txt和代码文件所在的目录，该目录可以是绝对路径，也可以是相对路径，对于后者相对路径的起点是CMAKE_CURRENT_SOURCE_DIR。此外，如果子目录再次包含的CMakeLists.txt，则将继续处理里层的CMakeLists.txt，而不是继续处理当前源代码</p>
</li>
<li><p>binary_dir 二进制代码目录</p>
<p>这个目录是可选的，如果指定，cmake命令执行后的输出文件将会存放在此处，若没有指定，默认情况等于<code>source_dir</code>没有进行相对路径计算前的路径，也就是<code>CMAKE_BINARY_DIR</code></p>
</li>
<li><p>EXCLUDE_FEOM_ALL</p>
<p>这个标志是可选的，如果传递了该参数表示新增加的子目录将会排除在ALL目录之外</p>
</li>
</ul>
<h4 id="双CMakeLists法："><a href="#双CMakeLists法：" class="headerlink" title="双CMakeLists法："></a>双CMakeLists法：</h4><ul>
<li><p>在根目录下构建 CMakeLists.txt ，然后再这个lists里面，使用add_subdirectionary命令，使编译过程转到src文件夹内的CMakeLists里面</p>
</li>
<li><p>在src的CMakeLists里面，编写主要工作：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">aux_source_directionary (. src_list)</span><br><span class="line"><span class="keyword">include_directories</span> (../<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;src_list&#125;</span>)</span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></figure>

<ul>
<li>EXECUTABLE_OUTPUT_PATH ：目标二进制可执行文件的存放位置</li>
<li>PROJECT_SOURCE_DIR：工程的根目录</li>
</ul>
<p>这两个都是cmake的预定义变量，直接拿来用</p>
</li>
<li><p>在build目录下执行cmake过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>cd build以后，会把执行编译生成的文件放在build里面，防止把代码结构变成史</p>
<p>cmake .. 的含义，是从上一级目录中寻找cmakelist</p>
</li>
</ul>
<h4 id="单CMakeLists法"><a href="#单CMakeLists法" class="headerlink" title="单CMakeLists法"></a>单CMakeLists法</h4><p>直接在根目录下编写cmakelist，并把参数写好</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake_minmun_required (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(single_cmakelist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin) <span class="comment">#把可执行文件放到bin里边</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span> (src SRC_LIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span> (<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>同样的，新建一个bulid文件夹然后在里面cmake .. make即可</p>
<h4 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h4><p>最明显的区别就是，双cmakelist利用了add_subdirectoryI()函数进入后优先执行字母里cmakelist的特性</p>
<p>把整个编译过程分层了，分成外层的控制全局和内层的具体实现</p>
<h2 id="动态库和静态库的编译控制"><a href="#动态库和静态库的编译控制" class="headerlink" title="动态库和静态库的编译控制"></a>动态库和静态库的编译控制</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (SRC_LIST <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/testFunc.c) <span class="comment">#把src路径设置好</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span> (testFunc_shared SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)  <span class="comment">#第1个参数指定库的名字；第2个参数决定是动态还是静态，如果没有就默认静态；第3个参数指定生成库的源文件</span></span><br><span class="line"><span class="keyword">add_library</span> (testFunc_static STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set_target_properties</span> (testFunc_shared PROPERTIES OUTPUT_NAME <span class="string">&quot;testFunc&quot;</span>) </span><br><span class="line"><span class="keyword">set_target_properties</span> (testFunc_static PROPERTIES OUTPUT_NAME <span class="string">&quot;testFunc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (SRC_LIST <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find testFunc.h</span></span><br><span class="line"><span class="keyword">include_directories</span> (<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/inc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_library</span>(TESTFUNC_LIB testFunc HINTS <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/testFunc/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (main <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span> (main <span class="variable">$&#123;TESTFUNC_LIB&#125;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>find_library: 在指定目录下查找指定库，并把库的绝对路径存放到变量里，其第一个参数是变量名称，第二个参数是库名称，第三个参数是HINTS，第4个参数是路径，其它用法可以参考cmake文档</li>
<li>target_link_libraries: 把目标文件与库文件进行链接</li>
</ul>
<h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><h3 id="简单程序"><a href="#简单程序" class="headerlink" title="简单程序"></a>简单程序</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_compile_options</span>(-std=c++<span class="number">11</span> -Wall)  <span class="comment">#这句话</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成指定的bin"><a href="#生成指定的bin" class="headerlink" title="生成指定的bin"></a>生成指定的bin</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span>(MYDEBUG <span class="string">&quot;enable debug compilation&quot;</span> <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用option命令，第一个参数是用户自己规定的名字，中间是显示的信息，最后一个是开关，不写默认是关</p>
<p>然后在src的cmakelist里面就可以读取呼呼自己输入的名字的开关状态来决定：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main1 main1.c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (MYDEBUG) <span class="comment">#如果为ON</span></span><br><span class="line">    <span class="keyword">add_executable</span>(main2 main2.c)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;Currently is not in debug mode&quot;</span>)    </span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32学习笔记002</title>
    <url>/2024/10/16/stm3202/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="任务一：GPIO输入输出"><a href="#任务一：GPIO输入输出" class="headerlink" title="任务一：GPIO输入输出"></a>任务一：GPIO输入输出</h2><h3 id="原理（实现步骤）"><a href="#原理（实现步骤）" class="headerlink" title="原理（实现步骤）"></a>原理（实现步骤）</h3><ul>
<li>选择两个GPIO引脚，PB0负责输出，PB1作为输入端。</li>
</ul>
<ol>
<li><strong>GPIO配置</strong><ul>
<li>设置GPIOB0,B1为推挽输出模式</li>
</ul>
</li>
<li><strong>控制逻辑</strong><ul>
<li>第一个gpio输出高低电平，控制第一个灯亮灭</li>
<li>每次循环开始时，ReadInputDataBit函数<strong>读取GPIOB0的输入寄存器（IDR）</strong>，记为int led1_status</li>
<li>根据led1_status，延时200ms将GPIOB1调整为与GPIO0 一致</li>
<li>调整一致以后，延时200ms将GPIO0的状态反过来，看起来就是led1先灭了</li>
<li>如此往复，产生led2跟着led1跑的的感觉</li>
</ul>
</li>
</ol>
<h3 id="代码如下：（lLEDD-ON-和LED-OFF为我自定义的函数，详见任务三——代码模块化）"><a href="#代码如下：（lLEDD-ON-和LED-OFF为我自定义的函数，详见任务三——代码模块化）" class="headerlink" title="代码如下：（lLEDD_ON 和LED_OFF为我自定义的函数，详见任务三——代码模块化）"></a>代码如下：（lLEDD_ON 和LED_OFF为我自定义的函数，详见任务三——代码模块化）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	LED_Init(<span class="number">1</span>);</span><br><span class="line">	LED_Init(<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> led1_status = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);</span><br><span class="line">		<span class="keyword">if</span>(led1_status)</span><br><span class="line">		&#123;</span><br><span class="line">			Delay_ms(<span class="number">200</span>);<span class="comment">//ÑÓÊ±Ò»ÏÂ</span></span><br><span class="line">			LED_OFF(<span class="number">2</span>);</span><br><span class="line">			Delay_ms(<span class="number">200</span>);</span><br><span class="line">			LED_ON(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			Delay_ms(<span class="number">200</span>);</span><br><span class="line">			LED_ON(<span class="number">2</span>);</span><br><span class="line">			Delay_ms(<span class="number">200</span>);</span><br><span class="line">			LED_OFF(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h3><p><a href="https://cloud.video.taobao.com/play/u/44392709/p/1/d/ld/e/6/t/1/487344496185.mp4?auth_key=YXBwX2tleT04MDAwMDAwMTImYXV0aF9pbmZvPXsidGltZXN0YW1wRW5jcnlwdGVkIjoiMzc2ZDk2YzdjNGRhNGMyMTA4MjMwODNhYmFmNDc3YzQifSZkdXJhdGlvbj0mdGltZXN0YW1wPTE3Mjk2OTgxOTc=">点击查看视频</a></p>
<h2 id="任务二-PWM控制舵机"><a href="#任务二-PWM控制舵机" class="headerlink" title="任务二 PWM控制舵机"></a>任务二 PWM控制舵机</h2><h5 id="1-pwm驱动呼吸灯"><a href="#1-pwm驱动呼吸灯" class="headerlink" title="1.pwm驱动呼吸灯"></a>1.pwm驱动呼吸灯</h5><p>概念：（oc为输出比较，oi为输入捕获，cc为输入捕获和输出比较的单元）</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017103420122.png" alt="image-20241017103420122"></p>
<p><strong>原理</strong></p>
<p>ccr为我们自己设定的一个数值，cnt为周期自增的，每当cnt结束一个周期，就触发一次事件（重新自增），在这个周期内，比较cnt和ccr的大小，来调控pwm输出<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017104240355.png" alt="image-20241017104240355"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017104928031.png" alt="image-20241017104928031"></p>
<p>输出模式控制器的不同状态：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017105149834.png" alt="image-20241017105149834"></p>
<ul>
<li><p>冻结：用于暂停</p>
</li>
<li><p>置有效电平 &#x3D;&#x3D; 置高电平      置无效电平 &#x3D;&#x3D; 置低电平</p>
</li>
<li><p>电平反转：方便的输出一个频率可调，占空比为50%的pwm波</p>
</li>
<li><p>强制：可调高低的冻结</p>
</li>
<li><p>pwm模式：最常用<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017105859083.png" alt="image-20241017105859083"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017105938711.png" alt="image-20241017105938711"></p>
</li>
</ul>
<p>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//使能时钟</span></span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//使能afio时钟</span></span><br><span class="line">	GPIO_PinRemapConfig(GPIO_PartialRemap1_TIM2,ENABLE);<span class="comment">//重映射（如果是jatg调试端口，再加上下面一句）</span></span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE); <span class="comment">//用afio将jtag解除</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;<span class="comment">//注意这个位置设置为复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_15;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	TIM_InternalClockConfig(TIM2);</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; <span class="comment">//ָ设置时钟分频（1分频）</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; <span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Period=<span class="number">100</span><span class="number">-1</span>;   <span class="comment">//ARR</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">720</span><span class="number">-1</span>; <span class="comment">//72mzh / 7200 = 10k ,72mhz / 7200 = 10k   //PSC</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数（高级计时器有，现在不用）</span></span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_OCInitTypeDef TIM_OCInitStructure; </span><br><span class="line">	</span><br><span class="line">	TIM_OCStructInit(&amp;TIM_OCInitStructure);<span class="comment">//默认给所有变量一个初始值，防止出错</span></span><br><span class="line">	<span class="comment">//下面再改自己想改的</span></span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;<span class="comment">//设置输出比较的模式</span></span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_High;<span class="comment">//设置输出比较的极性</span></span><br><span class="line">	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Enable;<span class="comment">//设置输出使能</span></span><br><span class="line">	TIM_OCInitStructure.TIM_Pulse=<span class="number">0</span>;<span class="comment">//设置ccr寄存器值</span></span><br><span class="line">	TIM_OC1Init(TIM2,&amp;TIM_OCInitStructure);</span><br><span class="line"></span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare1</span><span class="params">(<span class="type">uint16_t</span> Compare)</span></span><br><span class="line">&#123;</span><br><span class="line">	TIM_SetCompare1(TIM2,Compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是mian函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PWM_Init();</span><br><span class="line">	OLED_Init();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			OLED_ShowNum(<span class="number">2</span>,<span class="number">1</span>,i,<span class="number">3</span>);</span><br><span class="line">			PWM_SetCompare1(i);</span><br><span class="line">			Delay_ms(<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="视频：-1"><a href="#视频：-1" class="headerlink" title="视频："></a>视频：</h4><p><a href="https://cloud.video.taobao.com/play/u/44392709/p/1/d/sd_265/e/6/t/1/487638019397.mp4?auth_key=YXBwX2tleT04MDAwMDAwMTImYXV0aF9pbmZvPXsidGltZXN0YW1wRW5jcnlwdGVkIjoiZGQ1MTM5ZThmZmIyYzhkMzY3ODlkYjhiYjRlZjM5YmYifSZkdXJhdGlvbj0mdGltZXN0YW1wPTE3Mjk2OTgxOTg=">点击查看视频</a></p>
<h5 id="2-pwm驱动舵机（主任务2）"><a href="#2-pwm驱动舵机（主任务2）" class="headerlink" title="2.pwm驱动舵机（主任务2）"></a>2.pwm驱动舵机（主任务2）</h5><p><strong>技术点介绍</strong>：</p>
<p>定时器的比较输出：</p>
<p>原理：主要依靠cnt（自增计数器）和ccr（我们自己设定的一个值）进行比较，当cnt等于ccr的时候，触发事件–重新计数（详见pwm驱动呼吸点灯中的图片）</p>
<h6 id="详细过程："><a href="#详细过程：" class="headerlink" title="详细过程："></a><strong>详细过程：</strong></h6><p><strong>计数器（CNT）</strong>根据定时器的时钟频率和预分频器的设置自动增加（或减少）。当计数器达到 ARR（自动重装载寄存器）的值时，计数器会重置，并从头开始计数。</p>
<p><strong>比较值（CCR）</strong>每个定时器通道都有一个比较寄存器（CCRx），它存储定时器的比较值。当计数器的值（CNT）与比较寄存器的值相等时，定时器会触发一个事件，改变输出引脚的状态</p>
<p><strong>ARR（自动重装载寄存器）</strong>设置了计数器的最大值，也就是 PWM 信号的<strong>周期</strong>。计数器在每次达到 ARR的值后会自动重置，开始新的周期。</p>
<p><strong>CCR（捕获比较寄存器）</strong>用于设置比较值，也就是定时器在这个值时改变输出状态</p>
<h6 id="pwm是什么："><a href="#pwm是什么：" class="headerlink" title="pwm是什么："></a>pwm是什么：</h6><p>在一个很短的周期内，我们规定一定一定时间高电平，一段时间的低电平（即占空比），这样电平就会以较高的频率进行高低变化，输出一个方波，这个波就是pwm波，可以用来驱动舵机</p>
<h6 id="pwm的实现："><a href="#pwm的实现：" class="headerlink" title="pwm的实现："></a>pwm的实现：</h6><p>就像上面说的那样，pwm的实现首先要规定一个很小的周期，以舵机为例，想要控制舵机，周期就要设置为20ms,对应的arr和psc要符合20ms的周期</p>
<h5 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a><strong>核心代码：</strong></h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	TIM_TimeBaseInitStructure.TIM_Period=<span class="number">20000</span><span class="number">-1</span>;   <span class="comment">//ARR</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">72</span><span class="number">-1</span>; <span class="comment">//PSC</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算定时器的计数频率</span></span><br><span class="line"><span class="comment">定时器计数频率由 系统时钟频率 / (PSC + 1) 决定。</span></span><br><span class="line"><span class="comment">比如，如果 PSC = 71，那么定时器的计数频率为：</span></span><br><span class="line"><span class="comment">计数频率=72MHz除以（71+1）=1MHz</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这意味着定时器每微秒计数一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">设置 ARR 值</span></span><br><span class="line"><span class="comment">在 1MHz 计数频率下，20ms 对应的计数值为：</span></span><br><span class="line"><span class="comment">ARR=20ms×1MHz=20000</span></span><br><span class="line"><span class="comment">因此，将 ARR 设置为 20000-1 就可以产生一个 20ms 周期的 PWM 信号。*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PWM_SetCompare2</span><span class="params">(<span class="type">uint16_t</span> Compare)</span><span class="comment">//初始化哪个通道，就compare几</span></span><br><span class="line">&#123;</span><br><span class="line">	TIM_SetCompare2(TIM5,Compare); <span class="comment">//占空比</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Servo_SetAngle</span><span class="params">(<span class="type">float</span> Angele)</span></span><br><span class="line">&#123;</span><br><span class="line">	PWM_SetCompare2(Angele/<span class="number">180</span>*<span class="number">2000</span>+<span class="number">500</span>); <span class="comment">//把角度线性映射到占空比</span></span><br><span class="line">	</span><br><span class="line">&#125;	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Servo.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> KeyNumAfter = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> KeyNumBefore = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> Angle = <span class="number">90</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	Servo_Init();</span><br><span class="line">	OLED_Init();</span><br><span class="line">	OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;Angle:&quot;</span>);</span><br><span class="line">	OLED_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;KNum:&quot;</span>);</span><br><span class="line">	Key_Init();</span><br><span class="line">	</span><br><span class="line">	Servo_SetAngle(Angle);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		KeyNumAfter = Key_GetNum();<span class="comment">//设置一个中间缓冲变量，防止oled上的key标识一闪而过</span></span><br><span class="line">		<span class="keyword">if</span>(KeyNumAfter!=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			KeyNumBefore = KeyNumAfter;</span><br><span class="line">		&#125;</span><br><span class="line">		OLED_ShowNum(<span class="number">2</span>,<span class="number">7</span>,KeyNumBefore,<span class="number">5</span>);</span><br><span class="line">		<span class="keyword">if</span>(KeyNumAfter)</span><br><span class="line">		&#123;</span><br><span class="line">			Angle+=<span class="number">30</span>;</span><br><span class="line">			<span class="keyword">if</span>(Angle&gt;<span class="number">180</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				Angle = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Delay_ms(<span class="number">30</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Servo_SetAngle(Angle);</span><br><span class="line">		OLED_ShowNum(<span class="number">1</span>,<span class="number">7</span>,Angle,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频现象："><a href="#视频现象：" class="headerlink" title="视频现象："></a>视频现象：</h3><p><a href="https://cloud.video.taobao.com/play/u/44392709/p/1/d/sd_265/e/6/t/1/487432637028.mp4?auth_key=YXBwX2tleT04MDAwMDAwMTImYXV0aF9pbmZvPXsidGltZXN0YW1wRW5jcnlwdGVkIjoiZGQ1MTM5ZThmZmIyYzhkMzY3ODlkYjhiYjRlZjM5YmYifSZkdXJhdGlvbj0mdGltZXN0YW1wPTE3Mjk2OTgxOTg=">点击查看视频</a></p>
<h2 id="任务三：阅读参考手册"><a href="#任务三：阅读参考手册" class="headerlink" title="任务三：阅读参考手册"></a>任务三：阅读参考手册</h2><h3 id="gpio原理："><a href="#gpio原理：" class="headerlink" title="gpio原理："></a>gpio原理：</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/5d9aacdc3cbe0d2f22295cf8c98733d.png" alt="5d9aacdc3cbe0d2f22295cf8c98733d"></p>
<h6 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h6><ol>
<li>图中上半部分是输入示意图，信号从io引脚进入后，先经过<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017202833215.png" alt="image-20241017202833215" style="zoom:33%;" />这个结构（用于控制是上拉输入还是下拉输入的结构），然后下面是这个结构<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241017203040197.png" alt="image-20241017203040197" style="zoom:33%;" />这个肖特基结构的作用是把信号分为高低电平（<strong>模拟信号转化为数字信号（当然更有可能是把数字信号处理一下变得更稳定）</strong>），如果在这个结构直接就直接输入，那就是直接输入模拟信号（走最上面一路）（记为模拟输入），经过肖特基触发器以后的信号就被转化为了稳定的数字信号</li>
<li>从肖特基触发器出来以后，有两条路，一条是复用（使用remap函数）输入，一条是直接放入输入数据寄存器，直接输入了</li>
</ol>
<h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><ol>
<li>下面有两条路径进入，一条是进入位设置&#x2F;清除寄存器，这个寄存器的作用是单独设置某位，而不影响其他位</li>
<li>第二条直接控制输出数据寄存器，这个是直接控制整个gpio口的所有位</li>
<li>最下面一条是来自片上外设的<strong>复用功能</strong>输入，例子可以看前面的pwm控制led（将gpioa15复用）</li>
</ol>
<h3 id="tim计时器相关"><a href="#tim计时器相关" class="headerlink" title="tim计时器相关"></a>tim计时器相关</h3><p>详见文末  其他——tim定时器学习笔记</p>
<h2 id="进阶任务–函数封装–流水灯"><a href="#进阶任务–函数封装–流水灯" class="headerlink" title="进阶任务–函数封装–流水灯"></a>进阶任务–函数封装–流水灯</h2><h3 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h3><h4 id="跨文件调用"><a href="#跨文件调用" class="headerlink" title="跨文件调用"></a>跨文件调用</h4><p>在主函数中include头文件，这个头文件用来存放函数声明</p>
<p>他所声明的函数存放于同名的.c文件中</p>
<h4 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h4><p>代码的封装能使代码更加简洁，更重要的是，它可以实现编程的模块化，对各个功能的增添，修补等更方便，如果工程较大的话，代码的封装是必不可少的</p>
<h4 id="条件编译的使用"><a href="#条件编译的使用" class="headerlink" title="条件编译的使用"></a>条件编译的使用</h4><p>以刚刚写的 waterfall.h为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __WATERFALL_H <span class="comment">//如果没有定义这个头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WATERFALL_H<span class="comment">//那么定义它</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_waterfall</span><span class="params">(<span class="type">uint8_t</span> leds)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//定义结束标志</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>条件编译的使用，能够防止重复定义导致错误，因为c语言引入头文件的方式就是直接把代码块复制粘贴到相应位置，如果同一个头文件在程序中粘贴两次，那就会出现大量重复定义的错误</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol>
<li><p>首先，定义一个枚举类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	led1 = <span class="number">0x01</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">	led2 = <span class="number">0x01</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">	led3 = <span class="number">0x01</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">	led4 = <span class="number">0x01</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">	led5 = <span class="number">0x01</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">	led6 = <span class="number">0x01</span> &lt;&lt; <span class="number">5</span>	</span><br><span class="line">&#125;leds;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个头文件，一个库文件</p>
</li>
<li><p>首先，定义最关键的函数，也是唯一和main函数链接的函数led_waterfall（uint8_t leds）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">led_waterfall</span><span class="params">(<span class="type">uint8_t</span> leds)</span></span><br><span class="line">&#123;</span><br><span class="line">	LED_Init();</span><br><span class="line">	TIM_Init();</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; <span class="number">0x01</span>) == <span class="number">0x01</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">1</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">2</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">3</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">4</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">5</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">6</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个函数巧妙地运用了<strong>二进制的位运算</strong>，函数的形参看上去只能传入一个整数，实际上通过之前的枚举类型，再结合二进制的按位或运算，可以<strong>只用一个二进制数把多个信息传递进函数</strong>（每位的0和1代表每个灯的参数）</li>
<li>进入函数后，再把mix得到的一个二进制数和各自<strong>只有自己为1的二进制数进行按位与</strong>操作，就能把自身从按位或之后的二进制数中<strong>剥离</strong>出来</li>
</ul>
</li>
<li><p>接着，初始化led灯，配置tim2计时器，配置nvic</p>
<p>（其中包含对pb4的复用）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//给pb4 remap</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//afio (to remap pb4)</span></span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); <span class="comment">//用afio将jtag解除</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"><span class="comment">//pb0</span></span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line"><span class="comment">//pb1	</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line"><span class="comment">//pb5	</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);	</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line"><span class="comment">//pf11</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_SetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line"><span class="comment">//pf12</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);	</span><br><span class="line">	GPIO_SetBits(GPIOF,GPIO_Pin_12);	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">//pb4</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);	</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===============================</span></span><br><span class="line"><span class="comment">//开启tim定时器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_InitStructure;</span><br><span class="line">	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;</span><br><span class="line">	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class="line">	TIM_InitStructure.TIM_Period = <span class="number">10000</span><span class="number">-1</span>;</span><br><span class="line">	TIM_InitStructure.TIM_Prescaler = <span class="number">7200</span><span class="number">-1</span>;</span><br><span class="line">	TIM_InitStructure.TIM_RepetitionCounter = <span class="number">0</span>;</span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_InitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_ClearFlag(TIM2,TIM_FLAG_Update);<span class="comment">//清空中断标志位</span></span><br><span class="line">	TIM_ITConfig(TIM2,TIM_FLAG_Update,ENABLE);<span class="comment">//开启中断到nvic的通路</span></span><br><span class="line">	</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority =<span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后一步，事件函数的编写</p>
<ul>
<li>每秒钟进行一次操作，先打开当前要开的灯，再根据上一个灯的位置坝上一个灯熄灭</li>
<li>根据数组中下一个元素是否为0来判断i应该加一还是清零</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)</span><br><span class="line">	&#123;</span><br><span class="line">		LED_ON(led_should_on[i]);</span><br><span class="line">		<span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			LED_OFF(led_should_on[i<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> j = led_count<span class="number">-1</span>;</span><br><span class="line">			LED_OFF(led_should_on[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(led_should_on[i+<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//============================</span></span><br><span class="line"><span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//给pb4 remap</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);<span class="comment">//afio (to remap pb4)</span></span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); <span class="comment">//用afio将jtag解除</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"><span class="comment">//pb0</span></span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line"><span class="comment">//pb1	</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line"><span class="comment">//pb5	</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);	</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line"><span class="comment">//pf11</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_SetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line"><span class="comment">//pf12</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);	</span><br><span class="line">	GPIO_SetBits(GPIOF,GPIO_Pin_12);	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">//pb4</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStructure);	</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================================</span></span><br><span class="line"><span class="comment">//设置开关led的函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_ON</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span>(i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			GPIO_ResetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			GPIO_ResetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			GPIO_ResetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			GPIO_ResetBits(GPIOB,GPIO_Pin_4);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			GPIO_ResetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			GPIO_ResetBits(GPIOF,GPIO_Pin_12);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_OFF</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span>(i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			GPIO_SetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			GPIO_SetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			GPIO_SetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			GPIO_SetBits(GPIOB,GPIO_Pin_4);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			GPIO_SetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">			GPIO_SetBits(GPIOF,GPIO_Pin_12);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===============================</span></span><br><span class="line"><span class="comment">//开启tim定时器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_InitStructure;</span><br><span class="line">	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;</span><br><span class="line">	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class="line">	TIM_InitStructure.TIM_Period = <span class="number">10000</span><span class="number">-1</span>;</span><br><span class="line">	TIM_InitStructure.TIM_Prescaler = <span class="number">7200</span><span class="number">-1</span>;</span><br><span class="line">	TIM_InitStructure.TIM_RepetitionCounter = <span class="number">0</span>;</span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_InitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_ClearFlag(TIM2,TIM_FLAG_Update);<span class="comment">//清空中断标志位</span></span><br><span class="line">	TIM_ITConfig(TIM2,TIM_FLAG_Update,ENABLE);<span class="comment">//开启中断到nvic的通路</span></span><br><span class="line">	</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority =<span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================================</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> led_should_on[<span class="number">6</span>]; <span class="comment">//存要开关的灯,多留一个0位，用于标记</span></span><br><span class="line"><span class="type">int</span> led_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_waterfall</span><span class="params">(<span class="type">uint8_t</span> leds)</span></span><br><span class="line">&#123;</span><br><span class="line">	LED_Init();</span><br><span class="line">	TIM_Init();</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; <span class="number">0x01</span>) == <span class="number">0x01</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">1</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">2</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">2</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">3</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">3</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">4</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">4</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">5</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((leds &amp; (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>)) == (<span class="number">0x01</span> &lt;&lt; <span class="number">5</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		led_should_on[led_count] = <span class="number">6</span>;</span><br><span class="line">		led_count++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================================</span></span><br><span class="line"><span class="comment">//具体事件编写</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)</span><br><span class="line">	&#123;</span><br><span class="line">		LED_ON(led_should_on[i]);</span><br><span class="line">		<span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			LED_OFF(led_should_on[i<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> j = led_count<span class="number">-1</span>;</span><br><span class="line">			LED_OFF(led_should_on[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(led_should_on[i+<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频：-2"><a href="#视频：-2" class="headerlink" title="视频："></a>视频：</h3><p><a href ="https://lark-video.oss-cn-hangzhou.aliyuncs.com/outputs/prod/yuque/2024/44392709/mp4/1729184451456-34aaa9d9-2689-4abb-862b-9df182355abb.mp4?OSSAccessKeyId=LTAI4GKnqTWmz2X8mzA1Sjbv&amp;Expires=1729705398&amp;Signature=C8MTR6QCKfZAFqcr67jZ3QvdfwY%3D">点击查看视频</a></p>
</li>
</ol>
<h2 id="进阶任务：共地和上拉-下拉电阻的作用"><a href="#进阶任务：共地和上拉-下拉电阻的作用" class="headerlink" title="进阶任务：共地和上拉\下拉电阻的作用"></a>进阶任务：共地和上拉\下拉电阻的作用</h2><h3 id="1-共地"><a href="#1-共地" class="headerlink" title="1. 共地"></a>1. <strong>共地</strong></h3><p>共地是指电路中的不同部分（如电源、传感器、外设、处理器等）共享同一个GND作为电压为零的参考点，所有信号电压都是相对于这个参考点来测量的，避免信号传输过程中产生误差。</p>
<p>如果不共地，信号可能会不稳定，不共地的电路可能会在地线之间形成环路，产生电磁干扰，可能损坏电路元件</p>
<h3 id="2-上拉电阻和下拉电阻"><a href="#2-上拉电阻和下拉电阻" class="headerlink" title="2. 上拉电阻和下拉电阻"></a>2. <strong>上拉电阻和下拉电阻</strong></h3><p>上拉电阻 和 下拉电阻 是用来稳定数字电路中未连接状态时的信号电平的电阻器。它们用于防止输入引脚悬空，并确保其处于已知的逻辑电平。上拉电阻连接在 信号引脚和电源正极 之间。当输入引脚没有驱动时，上拉电阻将引脚电压拉高到高电平，确保信号处于稳定的高电平。下拉电阻连接信号引脚和地 之间。当输入引脚没有驱动时，下拉电阻将引脚电压拉低到逻辑低电平，确保信号处于稳定的低电平。</p>
<h3 id="分析图片"><a href="#分析图片" class="headerlink" title="分析图片"></a>分析图片</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018005115582.png" alt="image-20241018005115582" style="zoom:33%;" />这个图片中，当开关断开时，nrst直接连在上拉电阻上，为稳定的高电平，当开关闭合时，nrst接地，为低电平</p>
<h2 id="其它——tim定时器学习笔记"><a href="#其它——tim定时器学习笔记" class="headerlink" title="其它——tim定时器学习笔记"></a>其它——tim定时器学习笔记</h2><h3 id="定时器外部中断"><a href="#定时器外部中断" class="headerlink" title="定时器外部中断"></a>定时器外部中断</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241016182413622.png" alt="image-20241016182413622"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241016182924178.png" alt="image-20241016182924178"></p>
<ul>
<li>主从触发模式的作用：它能让内部的硬件在不受程序的控制下实现自动运行（可以减轻cpu的负担）</li>
</ul>
<h4 id="基本定时器工作原理：（只能向上计数）"><a href="#基本定时器工作原理：（只能向上计数）" class="headerlink" title="基本定时器工作原理：（只能向上计数）"></a>基本定时器工作原理：（只能向上计数）</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241016184838791.png" alt="image-20241016184838791"></p>
<ul>
<li>把下面那个U映射到触发输出（TRGO），无需频繁中断，也可进行dac转换，触发定时器的的更新</li>
<li>上面那个ui，计数值等于更新重装值产生的中断，叫做“更新中断”</li>
</ul>
<p>通用定时器和高级定时器还支持向下计数和中央对齐计数</p>
<h4 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h4><p>模式二——最简单，最直接</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241016203406894.png" alt="image-20241016203406894"></p>
<p>模式1——trgi当作外部时钟使用：（主要使用etr）</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241016202456391.png" alt="image-20241016202456391"></p>
<ul>
<li>定时器的级联：黄色那条线，一个tim计时器的事件可以驱动另一个计时器的itr，这个计时器通过trgi输出，就实现了两个计时器的级联</li>
</ul>
<h4 id="三种定时器的区别："><a href="#三种定时器的区别：" class="headerlink" title="三种定时器的区别："></a>三种定时器的区别：</h4><p><strong>基本定时器</strong>：基本定时器有计数器、预分频器和自动重装载寄存器，能完成基本的计数和触发中断，主要用于生成定时中断。<strong>没有输入捕获、输出比较和 PWM 功能</strong>。常用于 DAC 触发或简单的时间间隔生成</p>
<p><strong>通用定时器</strong>：通用定时器具备计数、捕获比较、PWM 生成等功能。</p>
<p><strong>高级定时器</strong>：包括复杂的 PWM 输出、死区控制、互补输出等功能</p>
<h5 id="定时中断基本结构"><a href="#定时中断基本结构" class="headerlink" title="定时中断基本结构"></a>定时中断基本结构</h5><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241016204528525.png" alt="image-20241016204528525"></p>
<p>中断输出控制：中断输出的允许位，在一个时钟配置里，可能有很多地方申请中断，如果用不到，就把中断输出允许位设置为不允许，要用的话就设为允许</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> Num;</span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OLED_Init();</span><br><span class="line">	Timer_Init();</span><br><span class="line">	OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;Num:&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		OLED_ShowNum(<span class="number">1</span>,<span class="number">5</span>,Num,<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)</span><br><span class="line">	&#123;</span><br><span class="line">		Num++;</span><br><span class="line">		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个程序使用内部时钟</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Timer.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//使能时钟</span></span><br><span class="line">	</span><br><span class="line">	TIM_InternalClockConfig(TIM2);</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; <span class="comment">//ָ设置时钟分频（1分频）</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; <span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Period=<span class="number">10000</span><span class="number">-1</span>;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">7200</span><span class="number">-1</span>; <span class="comment">//72mzh / 7200 = 10k ,72mhz / 7200 = 10k</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数（高级计时器有，现在不用）</span></span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_ClearFlag(TIM2,TIM_FLAG_Update); <span class="comment">//清除TIM2的更新中断标志位，确保定时器开始时没有残留的中断标志</span></span><br><span class="line">	</span><br><span class="line">	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);<span class="comment">//开启更新中断到nvic通路</span></span><br><span class="line">	</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">	</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel= TIM2_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* //用的时候复制进mian</span></span><br><span class="line"><span class="comment">void TIM2_IRQHandler(void)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	if(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="红外对管"><a href="#红外对管" class="headerlink" title="红外对管"></a>红外对管</h5><h5 id="pwm驱动呼吸灯"><a href="#pwm驱动呼吸灯" class="headerlink" title="pwm驱动呼吸灯"></a>pwm驱动呼吸灯</h5><p>更新中</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>STM32学习</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32学习笔记003</title>
    <url>/2024/10/21/stm3203/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="任务（1）：串⼝中断接收回显"><a href="#任务（1）：串⼝中断接收回显" class="headerlink" title="任务（1）：串⼝中断接收回显"></a>任务（1）：串⼝中断接收回显</h2><h3 id="知识学习（技术点介绍——-通信协议-双工模式）"><a href="#知识学习（技术点介绍——-通信协议-双工模式）" class="headerlink" title="知识学习（技术点介绍——&gt;通信协议&#x2F;双工模式）"></a>知识学习（技术点介绍——&gt;通信协议&#x2F;双工模式）</h3><h4 id="通信的目的-协议"><a href="#通信的目的-协议" class="headerlink" title="通信的目的&#x2F;协议"></a>通信的目的&#x2F;协议</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021105006393.png" alt="image-20241021105006393"></p>
<ul>
<li><p>在stm32内部，pwm输出，定时器计数等功能，都是在单片机内部的输出寄存器，数据寄存器实现的</p>
</li>
<li><p>在stm32外部，想要使用其他的外挂的芯片，就要与stm32<strong>进行通信</strong></p>
</li>
<li><p>协议：双方约定的用于通信的规则</p>
</li>
<li><p>USART     TX： Transmit Exchange 数据发送    RX: Receive Exchange 数据接收 </p>
</li>
<li><p>I2C            SCL： 时钟          SDA：数据</p>
</li>
<li><p>SPI            SCLK：时钟         MOSI：主机输出数据脚       MISO： 主机输入数据脚       CS：片选，用于指定通信对象</p>
</li>
<li><p>CAN          CAN-H   CAN_L：两个差分数据脚，用两个引脚表示一个差分的数据</p>
</li>
<li><p>USB          DP  DM，或者脚D+   D-, 也是一对差分数据脚</p>
</li>
</ul>
<h4 id="双工模式的区别："><a href="#双工模式的区别：" class="headerlink" title="双工模式的区别："></a>双工模式的区别：</h4><ul>
<li>全双工：是指通信双方能够同时进行双向通信，一般来说都有两根通信线</li>
<li>半双工：同一时刻 只能进行单方向的通信 （同一时间下只能进行单向传输，但是不同的时间传输的方向可以不同）</li>
<li>单工： 无论什么时刻，都只能由一个设备传到另一个设备，不能反着来 （比如把串口的rx引脚去掉，那串口就退化成单工了）</li>
</ul>
<h4 id="时钟特性"><a href="#时钟特性" class="headerlink" title="时钟特性"></a>时钟特性</h4><ul>
<li>如果有单独的时钟信号线，就是同步的，没有就是异步的</li>
<li>异步相比于同步，只是说两个设备之间时钟的信息（采样频率）不能传递罢了，所以在开始前设置好两者约定的采样频率，并添加帧头帧尾等，进行采样位置的对齐</li>
</ul>
<h4 id="电平特性"><a href="#电平特性" class="headerlink" title="电平特性"></a>电平特性</h4><ul>
<li>单端：单端电平所谓的高低电平，都是相对于gnd的，因此单端通信的双方必须<strong>共地</strong>，因此，前三个通信协议严格来说引脚一栏还要加上GND引脚</li>
<li>差分：差分信号是通过两个信号的电压差来进行通信的，因此不需要接地（主要是说can，因为usb里面有些东西也是单端信号，还是得接地）</li>
</ul>
<h4 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h4><ul>
<li>点对点：两个设备之间点对点，直接传输就行了</li>
<li>多设备：支持不止有两个设备之间的通信，可以挂载多个设备，在通信前要进行<strong>寻址</strong>操作，来确定要进行通信的对象</li>
</ul>
<h3 id="技术点介绍——-串口通信"><a href="#技术点介绍——-串口通信" class="headerlink" title="技术点介绍——&gt;串口通信"></a>技术点介绍——&gt;串口通信</h3><h5 id="硬件电路接法："><a href="#硬件电路接法：" class="headerlink" title="硬件电路接法："></a>硬件电路接法：</h5><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021112612894.png" alt="image-20241021112612894" style="zoom: 33%;" />

<p>电平标准（使用的主要都是ttl电平）</p>
<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021112838627.png" alt="image-20241021112838627" style="zoom: 33%;" />

<h5 id="串口参数和时序"><a href="#串口参数和时序" class="headerlink" title="串口参数和时序"></a>串口参数和时序</h5><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021113332364.png" alt="image-20241021113332364"></p>
<ul>
<li><p>注意，当串口空闲的时候，始终是高电平，起始位和终止位的作用就是：</p>
<p>起始位——产生一个下降沿，告诉设备要开始发数据了         </p>
<p>终止位——产生一个上升沿，标志着这个字节传输完成，同时将电平拉回高电平</p>
</li>
<li><p>数据位——低位先行的含义</p>
<p>假设要发送一个0x0F，第一步，首先把他转化成二进制 00001111 ，然后从低位开始传入，即传入顺序为11110000，产生的波形就是</p>
<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021113946893.png" alt="image-20241021113946893" style="zoom: 67%;" />

<p>当然，接收的一方也是低位先行，产生的波形就是00001111，还是回到了0 x0F</p>
</li>
<li><p>校验位：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021114145525.png" alt="image-20241021114145525"></p>
</li>
</ul>
<p>校验分为奇校验和偶校验，奇校验就是自动补全最后一位，使<strong>数据位</strong>所有位置上的1为奇数个，偶校验是偶数个</p>
<h5 id="USTAR"><a href="#USTAR" class="headerlink" title="USTAR"></a>USTAR</h5><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021130136230.png" alt="image-20241021130136230"></p>
<ul>
<li><p>最常使用配置：收发器：异步	波特率：9600&#x2F;115200	数据位长度：8	停止位长度：1	无校验</p>
</li>
<li><p>硬件流控制的意思，就是在rx和tx中还有一根线用于通信，这条线的的信号发射端是接收端设备，默认高电平</p>
<p>当接收端设备准备好接收的时候，就置低电平，发送端就开始发信号，这样能避免接如果收端性能比较低，还没准备好就接受一堆数据从而出错 ，但是硬件控制流一般也不用</p>
</li>
<li><p>usatr资源： usatr1在apb2总线上，usatr2，usatr3在apb1总线上</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021181937363.png" alt="image-20241021181937363"></p>
<p>USTAR基本结构：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241021184406936.png" alt="image-20241021184406936"></p>
<h5 id="串口通信中的hex模式和文本模式"><a href="#串口通信中的hex模式和文本模式" class="headerlink" title="串口通信中的hex模式和文本模式"></a>串口通信中的hex模式和文本模式</h5><p>hex模式：以原始数据的形式展示</p>
<p>文本模式：以原始数据编码后的形式显示</p>
<p>示意图：</p>
<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241022001324298.png" alt="image-20241022001324298" style="zoom: 67%;" />

<h3 id="技术点介绍：串⼝-RXNE-中断（如何配置，如何使⽤）"><a href="#技术点介绍：串⼝-RXNE-中断（如何配置，如何使⽤）" class="headerlink" title="技术点介绍：串⼝ RXNE 中断（如何配置，如何使⽤）"></a>技术点介绍：串⼝ RXNE 中断（如何配置，如何使⽤）</h3><h4 id="配置exne中断："><a href="#配置exne中断：" class="headerlink" title="配置exne中断："></a>配置exne中断：</h4><p>配置中断，无非就是把当前蕴含某个可以当做中断事件的外设连接通路到nvic</p>
<p>比如之前的tim中断，就是使用tim2_it_config函数连接到nvic通路以配置中断</p>
<p>所以类似的，配置中断的第一步也是，配置usart1到nvic的通路</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//这句usatr1的itconfig配置了usatr1到nvic的通路</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面就是常规的配置nvic</p>
<ul>
<li>先分组，默认一般使用group2</li>
<li>创建一个nvic初始化结构体，结构体包含channel，cmd，响应优先级和抢占优先级</li>
<li>channel（通道）：就具体通道而定，配置谁的nvic，就用谁的nvic到自身的通道，比如对于tim2来说，通道就是tim2_irqn,这里对于usart1来说，通道就是usart1_irqn</li>
<li>cmd：就是个开关，enable即可，两个优先级视情况而定</li>
<li>最后初始化nvic结构体，并开启usart开关</li>
</ul>
<p>关键代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面配置接收中断</span></span><br><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//这句usatr1的itconfig配置了usatr1到nvic的通路</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//下面配置nvic</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//先分组</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitSturcture;</span><br><span class="line">NVIC_InitSturcture.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//配置nvic的irqn通道</span></span><br><span class="line">NVIC_InitSturcture.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_InitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;</span><br><span class="line">NVIC_InitSturcture.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitSturcture);</span><br><span class="line"></span><br><span class="line">USART_Cmd(USART1,ENABLE);<span class="comment">//打开开关</span></span><br></pre></td></tr></table></figure>

<p>这样，nvic就会自动调用中断函数，当中断函数里我们给出的条件为真时，就能只想我们想要的操作</p>
<h4 id="使用exne中断："><a href="#使用exne中断：" class="headerlink" title="使用exne中断："></a>使用exne中断：</h4><p>中断执行时最核心的代码就是中断执行函数：USART1_IRQHandler</p>
<p>因此我们配置一个判断条件，这里想用exne是否为真来进行判断，所以条件应设为</p>
<p>if(USART_GetITStatus(USART1,USART_IT_RXNE)&#x3D;&#x3D; SET)</p>
<p>如果这个条件为真，那么说明计算机向单片机发送了数据，我们此时的任务是<strong>接受这个数据，并把它回显到计算机上</strong>，那在中断函数中，我们可以设置一个标志位来标志单片机接收到了数据，再设置一个临时变量用于存储接收到的数据，在主函数中，如果标志位为真，那就把数据拿出来并发送到计算机上</p>
<p>在serial.c中，设置两个临时变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> Serial_RxData;</span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag;</span><br></pre></td></tr></table></figure>

<p>两个封装函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GetRxFlag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GetRxData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> Serial_RxData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并按照我们的设想配置中断函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1,USART_IT_RXNE)== SET)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_RxData = USART_ReceiveData(USART1);</span><br><span class="line">		Serial_RxFlag = <span class="number">1</span>;</span><br><span class="line">		USART_ClearITPendingBit(USART1,USART_IT_RXNE);<span class="comment">//清除标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们就只需要在主函数中不断检查flag是否为1，如果为1，设置一个临时变量，并将它赋值为getrxdata函数的返回值，然后将这个返回值发回计算机，即可完成</p>
<p>主函数内关键代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> RxData;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OLED_Init();</span><br><span class="line">	Serial_Init();</span><br><span class="line">	Serial_Printf(<span class="string">&quot;num is %d&quot;</span>,<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Serial_GetRxFlag() == <span class="number">1</span>)<span class="comment">//判断flag是否为1</span></span><br><span class="line">		&#123;</span><br><span class="line">			RxData = Serial_GetRxData();<span class="comment">//是的话，获取信息</span></span><br><span class="line">			Serial_Printf(<span class="string">&quot;%c&quot;</span>,RxData);<span class="comment">//回显</span></span><br><span class="line">			OLED_ShowHexNum(<span class="number">1</span>,<span class="number">1</span>,RxData,<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>serial.c总代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxData;</span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);<span class="comment">//USATR1在APB2总线上</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; <span class="comment">//tx设置为复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//rx设置为上拉输入（输入不存在复用不复用的，因为输出只能有一个，但是输入可以有多个）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//设置波特率</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//设置没有硬件流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx|USART_Mode_Tx; <span class="comment">//设置模式为rx和tx都用</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//设置不进行奇偶校验</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//设置终止位长度位1</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//设置数据长度为8位</span></span><br><span class="line">	</span><br><span class="line">	USART_Init(USART1,&amp;USART_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//下面配置接收中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//这句usatr1的itconfig配置了usatr1到nvic的通路</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//下面配置nvic</span></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//先分组</span></span><br><span class="line">	NVIC_InitTypeDef NVIC_InitSturcture;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//配置nvic的irqn通道</span></span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitSturcture);</span><br><span class="line">	</span><br><span class="line">	USART_Cmd(USART1,ENABLE);<span class="comment">//打开开关</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GetRxFlag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GetRxData</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> Serial_RxData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1,USART_IT_RXNE)== SET)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_RxData = USART_ReceiveData(USART1);</span><br><span class="line">		Serial_RxFlag = <span class="number">1</span>;</span><br><span class="line">		USART_ClearITPendingBit(USART1,USART_IT_RXNE);<span class="comment">//清除标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line">	USART_SendData(USART1,Byte);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendArray</span><span class="params">(<span class="type">uint8_t</span> *Array,<span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint16_t</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i =<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_SendByte(Array[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendString</span><span class="params">(<span class="type">char</span>* String)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint8_t</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;String[i]!=<span class="number">0</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_SendByte(String[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">Serial_Pow</span><span class="params">(<span class="type">uint32_t</span> X, <span class="type">uint32_t</span> Y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint32_t</span> Result = <span class="number">1</span>;	</span><br><span class="line">	<span class="keyword">while</span> (Y --)			</span><br><span class="line">	&#123;</span><br><span class="line">		Result *= X;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_SendNumber</span><span class="params">(<span class="type">uint32_t</span> Number, <span class="type">uint8_t</span> Length)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint8_t</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i ++)		</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_SendByte(Number / Serial_Pow(<span class="number">10</span>, Length - i - <span class="number">1</span>) % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line">	Serial_SendByte(ch);			<span class="comment">//将printf的底层重定向到自己的发送字节函数</span></span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Printf</span><span class="params">(<span class="type">char</span> *format, ...)</span><span class="comment">//多参数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> String[<span class="number">100</span>];				</span><br><span class="line">	va_list arg;					</span><br><span class="line">	va_start(arg, format);			</span><br><span class="line">	<span class="built_in">vsprintf</span>(String, format, arg);	</span><br><span class="line">	va_end(arg);					</span><br><span class="line">	Serial_SendString(String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h3><h2 id="2-任务二：串口控制LED亮灭"><a href="#2-任务二：串口控制LED亮灭" class="headerlink" title="(2)任务二：串口控制LED亮灭"></a>(2)任务二：串口控制LED亮灭</h2><h3 id="技术点介绍-：串⼝-RXNE-中断（如何利⽤读取到的数据）"><a href="#技术点介绍-：串⼝-RXNE-中断（如何利⽤读取到的数据）" class="headerlink" title="技术点介绍 ：串⼝ RXNE 中断（如何利⽤读取到的数据）"></a>技术点介绍 ：串⼝ RXNE 中断（如何利⽤读取到的数据）</h3><h4 id="使用数据包获取输入的数据："><a href="#使用数据包获取输入的数据：" class="headerlink" title="使用数据包获取输入的数据："></a>使用数据包获取输入的数据：</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023161552791.png" alt="image-20241023161552791"></p>
<h5 id="1-什么是数据包？"><a href="#1-什么是数据包？" class="headerlink" title="1. 什么是数据包？"></a>1. 什么是数据包？</h5><p>在串口通信中，数据包是用来传输有结构的数据的一种“包装”。它就像寄快递一样，把我们要传输的信息（比如控制命令或传感器数据）装进一个“包裹”里，再通过串口把这个包裹从上位机（比如电脑）发到单片机（STM32）。数据包是为了让双方清楚地知道，传过来的这些数据是什么意思，如何处理，如何检查有没有出错。</p>
<h5 id="2-数据包的基本组成"><a href="#2-数据包的基本组成" class="headerlink" title="2. 数据包的基本组成"></a>2. 数据包的基本组成</h5><p>一个标准的数据包一般包括以下部分：</p>
<ol>
<li><strong>起始符</strong>：告诉接收端，“数据要开始了！”。这是一个特殊的字符或字节</li>
<li><strong>数据字段</strong>：这里才是实际有用的信息，可能是传感器的数据、控制命令或者状态反馈。数据字段可以是一个字节或多个字节。</li>
<li><strong>结束符</strong>：告诉接收端，“数据传完了！”。常用的结束符也是一个特定字符，</li>
<li>有时候，结束符前面还可以加个校验符</li>
</ol>
<p><strong>例子</strong>：假设你想通过串口传递两个字节的数据，我们可以构造一个简单的数据包：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">起始符@| 数据<span class="number">1</span>| 数据<span class="number">2</span>| 结束符 $</span><br></pre></td></tr></table></figure>

<p>在这个例子中：</p>
<ul>
<li><strong>@</strong> 是起始符</li>
<li>数据1 和 数据2 是实际要传输的数据</li>
<li><strong>$</strong> 是结束符</li>
</ul>
<h5 id="3-为什么要使用数据包？有什么好处？"><a href="#3-为什么要使用数据包？有什么好处？" class="headerlink" title="3. 为什么要使用数据包？有什么好处？"></a>3. 为什么要使用数据包？有什么好处？</h5><ul>
<li><strong>数据有序传输，避免混乱</strong>,串口通信是<strong>逐个字节</strong>地传输数据。如果没有数据包的概念，单片机无法知道接收到的某些字节到底是什么——是开始的命令还是中途传过来的数据？使用数据包后，起始符和结束符让STM32清楚地知道数据从哪里开始、哪里结束，避免了数据混乱。</li>
</ul>
<h5 id="4-使用数据包的步骤"><a href="#4-使用数据包的步骤" class="headerlink" title="4. 使用数据包的步骤"></a>4. 使用数据包的步骤</h5><p><strong>(1) 构造数据包并发送</strong></p>
<ul>
<li>上位机（比如电脑）根据预定好的格式，构造一个数据包。假如你想控制一个灯的亮灭，可以构造一个数据包，里面包括：设备ID（代表灯）、控制命令（开或关），以及校验位来保证数据没有出错。</li>
</ul>
<p><strong>(2) 接收数据包</strong></p>
<ul>
<li>STM32 会通过串口接收数据。在接收到数据时，它首先要找到起始符，确定这是一个新的数据包，然后开始接收后面的数据字段。如果有校验位，还能通过他来检查数据是否正确。</li>
</ul>
<p><strong>(4) 执行相应操作</strong></p>
<ul>
<li>解析完成后，STM32可以根据数据字段中的命令，执行对应的操作，比如打开或关闭灯，读取传感器数据等。</li>
</ul>
<h4 id="画状态机进行程序设计"><a href="#画状态机进行程序设计" class="headerlink" title="画状态机进行程序设计"></a>画状态机进行程序设计</h4><p><strong>在设计程序的时候，可以利用状态机来画出程序的流程，来理清逻辑</strong>，如下便是文本数据包接收的状态机示意图:</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023162516302.png" alt="image-20241023162516302"></p>
<h4 id="rxne中断的实现："><a href="#rxne中断的实现：" class="headerlink" title="rxne中断的实现："></a>rxne中断的实现：</h4><p><strong>核心：</strong></p>
<p>同任务一，中断执行时最核心的代码依然是是中断执行函数：USART1_IRQHandler，我们所需要的中断后引发的功能要在这里面配置</p>
<p><strong>方法：</strong></p>
<p>要想让stm32通过接收 ledoff 和ledon 来进行相应的操作，无非是把任务1接收数字的地方改成接收字符串数据包即可，接收数据包的程序按照状态机的画法设计，接收到数据以后，与LEDOFF LEDON这两个字符串进行比对，如果是同一个字符串，那就执行相应操作，对不上号的话就返回error</p>
<h5 id="总结一下步骤："><a href="#总结一下步骤：" class="headerlink" title="总结一下步骤："></a>总结一下步骤：</h5><ol>
<li>使能usart1时钟，gpio时钟，配置好gpio和usatr1的初始化结构体</li>
<li>使用usatr的itconfig函数打通rxne到nvic的通路</li>
<li>配置好nvic，设置好中断参数</li>
<li>编写USART1_IRQHandler函数，把中断函数执行步骤写好</li>
</ol>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><h4 id="库函数："><a href="#库函数：" class="headerlink" title="库函数："></a>库函数：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Serial_RxPacket[<span class="number">100</span>];		<span class="comment">//数据包数组		</span></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag;			<span class="comment">//数据包接受标志位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);<span class="comment">//USATR1在APB2总线上</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; <span class="comment">//tx设置为复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//rx设置为上拉输入（输入不存在复用不复用的，因为输出只能有一个，但是输入可以有多个）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	 </span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//设置波特率</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//设置没有硬件流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx|USART_Mode_Tx; <span class="comment">//设置模式为rx和tx都用</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//设置不进行奇偶校验</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//设置终止位长度位1</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//设置数据长度为8位</span></span><br><span class="line">	</span><br><span class="line">	USART_Init(USART1,&amp;USART_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//下面配置接收中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//这句usatr1的itconfig配置了usatr1到nvic的通路</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//下面配置nvic</span></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//先分组</span></span><br><span class="line">	NVIC_InitTypeDef NVIC_InitSturcture;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//配置nvic的irqn通道</span></span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitSturcture);</span><br><span class="line">	</span><br><span class="line">	USART_Cmd(USART1,ENABLE);<span class="comment">//打开开关</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GetRxFlag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">uint8_t</span> RxState = <span class="number">0</span>;		<span class="comment">//当前状态机状态的静态变量，出函数之后不会销毁，下次用的时候保持上次用最后的值</span></span><br><span class="line">	<span class="type">static</span> <span class="type">uint8_t</span> pRxPacket = <span class="number">0</span>;	<span class="comment">//当前接收数据位置的静态变量</span></span><br><span class="line">	<span class="keyword">if</span> (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)	<span class="comment">//是否是USART1的接收触发中断</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">uint8_t</span> RxData = USART_ReceiveData(USART1);			<span class="comment">//读取数据寄存器，存放在接收的数据变量</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据状态机画的图编写下面的程序：</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//rxstate为0，接收数据包包头</span></span><br><span class="line">		<span class="keyword">if</span> (RxState == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (RxData == <span class="string">&#x27;@&#x27;</span> &amp;&amp; Serial_RxFlag == <span class="number">0</span>)		<span class="comment">//数据是包头，并且上一个数据包已处理完了</span></span><br><span class="line">			&#123;</span><br><span class="line">				RxState = <span class="number">1</span>;			<span class="comment">//下面接受数据</span></span><br><span class="line">				pRxPacket = <span class="number">0</span>;			<span class="comment">//数据包的位置归零，开始挨个往里塞</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//restate为1，接收数据包数据，同时判断是否接收到了第一个包尾</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (RxState == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (RxData == <span class="string">&#x27;\r&#x27;</span>)			<span class="comment">//如果收到第一个包尾</span></span><br><span class="line">			&#123;</span><br><span class="line">				RxState = <span class="number">2</span>;			<span class="comment">//置下一个状态</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>						<span class="comment">//接收到了正常的数据</span></span><br><span class="line">			&#123;</span><br><span class="line">				Serial_RxPacket[pRxPacket] = RxData;		<span class="comment">//数据存入数据包数组的对应的位置</span></span><br><span class="line">				pRxPacket ++;			<span class="comment">//标记下一次该存放的位置</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//rxstate为2，接收数据包第二个包尾</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (RxState == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (RxData == <span class="string">&#x27;\n&#x27;</span>)			<span class="comment">//如果收到第二个包尾</span></span><br><span class="line">			&#123;</span><br><span class="line">				RxState = <span class="number">0</span>;			<span class="comment">//状态归0</span></span><br><span class="line">				Serial_RxPacket[pRxPacket] = <span class="string">&#x27;\0&#x27;</span>;			<span class="comment">//将收到的字符数据包添加一个字符串结束标志（不然不会自带）</span></span><br><span class="line">				Serial_RxFlag = <span class="number">1</span>;		<span class="comment">//rxflag为1，成功接收一个数据包</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		USART_ClearITPendingBit(USART1, USART_IT_RXNE);		<span class="comment">//清除标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数;"></a>主函数;</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="type">uint8_t</span> RxData;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OLED_Init();</span><br><span class="line">	LED_Init(<span class="number">1</span>);</span><br><span class="line">	Serial_Init();</span><br><span class="line">	Serial_Printf(<span class="string">&quot;num is %d&quot;</span>,<span class="number">10</span>);</span><br><span class="line">	OLED_ShowString(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;TxPacket&quot;</span>);</span><br><span class="line">	OLED_ShowString(<span class="number">3</span>, <span class="number">1</span>, <span class="string">&quot;RxPacket&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Serial_RxFlag == <span class="number">1</span>)		<span class="comment">//如果接收到数据包</span></span><br><span class="line">		&#123;</span><br><span class="line">			OLED_ShowString(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);			<span class="comment">//OLED清除原有的显示</span></span><br><span class="line">			OLED_ShowString(<span class="number">4</span>, <span class="number">1</span>, Serial_RxPacket);				<span class="comment">//显示接收到的数据包</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">//将收到的数据包进行字符串比对，执行对应操作</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(Serial_RxPacket, <span class="string">&quot;LEDON&quot;</span>) == <span class="number">0</span>)			</span><br><span class="line">			&#123;</span><br><span class="line">				LED_ON(<span class="number">1</span>);										</span><br><span class="line">				Serial_SendString(<span class="string">&quot;LEDONOK\r\n&quot;</span>);				</span><br><span class="line">				OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">				OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;LEDONOK&quot;</span>);				</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(Serial_RxPacket, <span class="string">&quot;LEDOFF&quot;</span>) == <span class="number">0</span>)	</span><br><span class="line">			&#123;</span><br><span class="line">				LED_OFF(<span class="number">1</span>);										</span><br><span class="line">				Serial_SendString(<span class="string">&quot;LEDOFFOK\r\n&quot;</span>);			</span><br><span class="line">				OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">				OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;LEDOFFOK&quot;</span>);			</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>						<span class="comment">//输入不是我们指定的格式</span></span><br><span class="line">			&#123;</span><br><span class="line">				Serial_SendString(<span class="string">&quot;ERROR\r\n&quot;</span>);			</span><br><span class="line">				OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">				OLED_ShowString(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;ERROR&quot;</span>);			</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			Serial_RxFlag = <span class="number">0</span>;			<span class="comment">//将接收数据包标志位清零，否则无法接收后续数据包</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实现视频："><a href="#实现视频：" class="headerlink" title="实现视频："></a>实现视频：</h3><h2 id="任务（3）：通过串⼝调整LED闪烁频率"><a href="#任务（3）：通过串⼝调整LED闪烁频率" class="headerlink" title="任务（3）：通过串⼝调整LED闪烁频率"></a>任务（3）：通过串⼝调整LED闪烁频率</h2><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>相比于任务二，无非是改变一下中断事件，这个事件就是改变一个float变量而已</strong></p>
<p>这个float变量范围取值0-3，精度0.1</p>
<p>当然，涉及到时间就要配置一下tim计时器来结合使用</p>
<p>我们搬出之前秒计时器的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//使能时钟</span></span><br><span class="line">	</span><br><span class="line">	TIM_InternalClockConfig(TIM2);</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; <span class="comment">//ָ设置时钟分频（1分频）</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; <span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Period=<span class="number">10000</span><span class="number">-1</span>;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">7200</span><span class="number">-1</span>; <span class="comment">//72mzh / 7200 = 10k ,72mhz / 7200 = 10k</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数（高级计时器有，现在不用）</span></span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_ClearFlag(TIM2,TIM_FLAG_Update); <span class="comment">//清除TIM2的更新中断标志位，确保定时器开始时没有残留的中断标志</span></span><br><span class="line">	</span><br><span class="line">	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);<span class="comment">//开启更新中断到nvic通路</span></span><br><span class="line">	</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"><span class="comment">//省略</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于周期的设定，<strong>核心代码</strong>就是这两个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TIM_TimeBaseInitStructure.TIM_Period=<span class="number">10000</span><span class="number">-1</span>;</span><br><span class="line">TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">7200</span><span class="number">-1</span>; <span class="comment">//72mzh / 7200 = 10k ,72mhz / 7200 = 10k</span></span><br></pre></td></tr></table></figure>

<p>上面一行是arr（自动重装计数值），下面一行是把72mhz<strong>分成7200份</strong></p>
<p>如果说上面是10000的话，那周期就是1秒，如果把上面改成5k，那周期就是0.5秒</p>
<p><strong>因此，我们可以通过只修改arr来实现改变周期</strong></p>
<p>修改arr的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TIM_SetAutoreload</span><span class="params">(TIM_TypeDef* TIMx, <span class="type">uint16_t</span> Autoreload)</span>;</span><br></pre></td></tr></table></figure>

<p>动态修改 TIM_Period：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改自动重装载值</span><br><span class="line">TIM_SetAutoreload(TIM2, new_arr);</span><br><span class="line"></span><br><span class="line">// 触发更新事件，让新的ARR值立即生效</span><br><span class="line">TIM_GenerateEvent(TIM2, TIM_EventSource_Update);</span><br></pre></td></tr></table></figure>

<h4 id="串口中断，tim中断："><a href="#串口中断，tim中断：" class="headerlink" title="串口中断，tim中断："></a>串口中断，tim中断：</h4><p>串口中断：</p>
<p>源于上位机的信息输入，中断后引起事件——tim2计时器周期修改</p>
<p>tim中断：</p>
<p>源于自增计数器达到预设值，中断后引起事件——开关led</p>
<h3 id="二者的配合："><a href="#二者的配合：" class="headerlink" title="二者的配合："></a>二者的配合：</h3><p>将这个程序的执行过程提炼出来，就是：</p>
<p>启用tim2计时器，启用usart1</p>
<p>——&gt;把tim2的自动重装计数事件连接到NVIC，把usart1的rxne事件连接到NVIC</p>
<p>——&gt;配置tim2的中断事件为亮灯灭灯，rxne的中断事件配置为 <strong>更改tim2计数器的周期</strong></p>
<p>——&gt;配置usart1的串口输入参数，配置好它的接收数据包格式</p>
<p>——&gt;在主函数中整合计算，分拣数据，实现功能</p>
<p>serial.c:</p>
<h3 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h3><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Serial_RxPacket[<span class="number">100</span>];		<span class="comment">//数据包数组		</span></span><br><span class="line"><span class="type">uint8_t</span> Serial_RxFlag;			<span class="comment">//数据包接受标志位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Serial_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);<span class="comment">//USATR1在APB2总线上</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; <span class="comment">//tx设置为复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//rx设置为上拉输入（输入不存在复用不复用的，因为输出只能有一个，但是输入可以有多个）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	 </span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	USART_InitStructure.USART_BaudRate = <span class="number">9600</span>; <span class="comment">//设置波特率</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; <span class="comment">//设置没有硬件流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx|USART_Mode_Tx; <span class="comment">//设置模式为rx和tx都用</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No; <span class="comment">//设置不进行奇偶校验</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//设置终止位长度位1</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//设置数据长度为8位</span></span><br><span class="line">	</span><br><span class="line">	USART_Init(USART1,&amp;USART_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//下面配置接收中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//这句usatr1的itconfig配置了usatr1到nvic的通路</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//下面配置nvic</span></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//先分组</span></span><br><span class="line">	NVIC_InitTypeDef NVIC_InitSturcture;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannel = USART1_IRQn; <span class="comment">//配置nvic的irqn通道</span></span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_InitSturcture.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitSturcture);</span><br><span class="line">	</span><br><span class="line">	USART_Cmd(USART1,ENABLE);<span class="comment">//打开开关</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">Serial_GetRxFlag</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(Serial_RxFlag == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Serial_RxFlag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">uint8_t</span> RxState = <span class="number">0</span>;		<span class="comment">//当前状态机状态的静态变量，出函数之后不会销毁，下次用的时候保持上次用最后的值</span></span><br><span class="line">	<span class="type">static</span> <span class="type">uint8_t</span> pRxPacket = <span class="number">0</span>;	<span class="comment">//当前接收数据位置的静态变量</span></span><br><span class="line">	<span class="keyword">if</span> (USART_GetITStatus(USART1, USART_IT_RXNE) == SET)	<span class="comment">//是否是USART1的接收触发中断</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">uint8_t</span> RxData = USART_ReceiveData(USART1);			<span class="comment">//读取数据寄存器，存放在接收的数据变量</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据状态机画的图编写下面的程序：</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//rxstate为0，接收数据包包头</span></span><br><span class="line">		<span class="keyword">if</span> (RxState == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (RxData == <span class="string">&#x27;@&#x27;</span> &amp;&amp; Serial_RxFlag == <span class="number">0</span>)		<span class="comment">//数据是包头，并且上一个数据包已处理完了</span></span><br><span class="line">			&#123;</span><br><span class="line">				RxState = <span class="number">1</span>;			<span class="comment">//下面接受数据</span></span><br><span class="line">				pRxPacket = <span class="number">0</span>;			<span class="comment">//数据包的位置归零，开始挨个往里塞</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//restate为1，接收数据包数据，同时判断是否接收到了第一个包尾</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (RxState == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (RxData == <span class="string">&#x27;\r&#x27;</span>)			<span class="comment">//如果收到第一个包尾</span></span><br><span class="line">			&#123;</span><br><span class="line">				RxState = <span class="number">2</span>;			<span class="comment">//置下一个状态</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>						<span class="comment">//接收到了正常的数据</span></span><br><span class="line">			&#123;</span><br><span class="line">				Serial_RxPacket[pRxPacket] = RxData;		<span class="comment">//数据存入数据包数组的对应的位置</span></span><br><span class="line">				pRxPacket ++;			<span class="comment">//标记下一次该存放的位置</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//rxstate为2，接收数据包第二个包尾</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (RxState == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (RxData == <span class="string">&#x27;\n&#x27;</span>)			<span class="comment">//如果收到第二个包尾</span></span><br><span class="line">			&#123;</span><br><span class="line">				RxState = <span class="number">0</span>;			<span class="comment">//状态归0</span></span><br><span class="line">				Serial_RxPacket[pRxPacket] = <span class="string">&#x27;\0&#x27;</span>;			<span class="comment">//将收到的字符数据包添加一个字符串结束标志（不然不会自带）</span></span><br><span class="line">				Serial_RxFlag = <span class="number">1</span>;		<span class="comment">//rxflag为1，成功接收一个数据包</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		USART_ClearITPendingBit(USART1, USART_IT_RXNE);		<span class="comment">//清除标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主函数："><a href="#主函数：" class="headerlink" title="主函数："></a>主函数：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="type">uint8_t</span> RxData;</span><br><span class="line"><span class="type">uint8_t</span> ledstate = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(TIM_GetITStatus(TIM2,TIM_IT_Update) == SET)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ledstate == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ledstate = <span class="number">1</span>;</span><br><span class="line">			LED_ON(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ledstate = <span class="number">0</span>;</span><br><span class="line">			LED_OFF(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OLED_Init();</span><br><span class="line">	LED_Init(<span class="number">1</span>);</span><br><span class="line">	Serial_Init();</span><br><span class="line">	Timer_Init();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Serial_RxFlag == <span class="number">1</span>)		<span class="comment">//如果接收到数据包</span></span><br><span class="line">		&#123;</span><br><span class="line">			OLED_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;num:&quot;</span>);</span><br><span class="line">			OLED_ShowString(<span class="number">1</span>,<span class="number">6</span>,Serial_RxPacket);</span><br><span class="line">			</span><br><span class="line">			<span class="type">float</span> tempint = Serial_RxPacket[<span class="number">0</span>]<span class="number">-48</span>;</span><br><span class="line">			<span class="type">float</span> tempflo = Serial_RxPacket[<span class="number">2</span>]<span class="number">-48</span>;</span><br><span class="line">			<span class="type">int</span> arraylength = <span class="built_in">strlen</span>(Serial_RxPacket);</span><br><span class="line">			<span class="keyword">if</span>(((Serial_RxPacket[<span class="number">1</span>]!=<span class="string">&#x27;.&#x27;</span> &amp;&amp; Serial_RxPacket[<span class="number">1</span>]==<span class="string">&#x27;0&#x27;</span>)&amp;&amp;(arraylength&gt;<span class="number">1</span>))||arraylength&gt;<span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				OLED_ShowString(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&quot;error input&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> arrtemp = <span class="number">10000</span>*(tempint + tempflo*<span class="number">0.1</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(arrtemp&gt;<span class="number">0</span>&amp;&amp;arrtemp&lt;=<span class="number">30000</span>)</span><br><span class="line">				&#123;	OLED_ShowNum(<span class="number">2</span>,<span class="number">1</span>,arrtemp,<span class="number">8</span>);</span><br><span class="line">					OLED_ShowString(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&quot;valid input&quot;</span>);</span><br><span class="line">					<span class="comment">// 修改自动重装载值</span></span><br><span class="line">					TIM_SetAutoreload(TIM2, arrtemp<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">					<span class="comment">// 触发更新事件，让新的ARR值立即生效</span></span><br><span class="line">					TIM_GenerateEvent(TIM2, TIM_EventSource_Update);			</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					OLED_ShowString(<span class="number">3</span>,<span class="number">1</span>,<span class="string">&quot;error input&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			Serial_RxFlag = <span class="number">0</span>;			<span class="comment">//将接收数据包标志位清零，否则无法接收后续数据包</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频效果："><a href="#视频效果：" class="headerlink" title="视频效果："></a>视频效果：</h3><h2 id="任务-4-Debug-功能和使⽤"><a href="#任务-4-Debug-功能和使⽤" class="headerlink" title="任务(4) Debug 功能和使⽤"></a>任务(4) Debug 功能和使⽤</h2><h3 id="debug功能简记"><a href="#debug功能简记" class="headerlink" title="debug功能简记"></a>debug功能简记</h3><h4 id="1-进入-Debug-模式"><a href="#1-进入-Debug-模式" class="headerlink" title="1. 进入 Debug 模式"></a>1. 进入 Debug 模式</h4><ol>
<li><strong>编译项目</strong>：<ul>
<li>在菜单栏中，点击 <strong>“Project”</strong> -&gt; **”Build Target”**（或直接点击工具栏中的小锤子图标）。</li>
</ul>
</li>
<li><strong>进入 Debug 模式</strong>：<ul>
<li>点击工具栏中的 <strong>“Debug”</strong> 按钮（一个带有小虫子的图标），或从菜单中选择 <strong>“Debug”</strong> -&gt; **”Start&#x2F;Stop Debug Session”**。</li>
</ul>
</li>
</ol>
<h4 id="2-复位-MCU"><a href="#2-复位-MCU" class="headerlink" title="2. 复位 MCU"></a>2. 复位 MCU</h4><ul>
<li><p>复位</p>
<p>在 Debug 界面上，找到工具栏中的 <strong>“Reset”</strong> 按钮<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222235399.png" alt="image-20241023222235399">，点击该按钮即可复位</p>
</li>
</ul>
<h4 id="3-调试运行模式"><a href="#3-调试运行模式" class="headerlink" title="3. 调试运行模式"></a>3. 调试运行模式</h4><p>在调试模式下，有以下按钮在上方工具栏：</p>
<ul>
<li><p><strong>全速运行（F5）</strong>：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222252338.png" alt="image-20241023222252338">这个按钮将使程序一直处于运行状态,或者直接运行到设置的断点处。</p>
</li>
<li><p><strong>单步执行</strong>：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222301550.png" alt="image-20241023222301550">点每点一次按钮，程序运行一步，遇到函数会进入函数执行</p>
</li>
<li><p><strong>逐行调试</strong>：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222336782.png" alt="image-20241023222336782">每点一次按钮，程序运行一行，遇到函数<strong>跳过函数执行</strong></p>
</li>
<li><p><strong>跳出调试</strong>：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222437618.png" alt="image-20241023222437618">在代码中找到你想运行到的行，右键点击该行，然后选择 **”Run to Cursor”**。</p>
</li>
<li><p><strong>运行到光标处</strong>：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222526194.png" alt="image-20241023222526194">直接运行到光标处</p>
</li>
<li><p>前进后退</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222957219.png" alt="image-20241023222957219">返回上一步调试，进行下一步调试</p>
</li>
</ul>
<h4 id="4-断点-Breakpoint"><a href="#4-断点-Breakpoint" class="headerlink" title="4. 断点 (Breakpoint)"></a>4. 断点 (Breakpoint)</h4><ul>
<li><p>设置断点</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222555566.png" alt="image-20241023222555566">设置当前光标处是断点</p>
</li>
<li><p>失能断点</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222641250.png" alt="image-20241023222641250">失能当前光标处的断点	<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222703855.png" alt="image-20241023222703855">失能所有断点	<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241023222739694.png" alt="image-20241023222739694">删除所有断点</p>
</li>
</ul>
<h3 id="debug用法示例"><a href="#debug用法示例" class="headerlink" title="debug用法示例"></a>debug用法示例</h3><h4 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a><strong>设置断点</strong></h4><ul>
<li><strong>行断点</strong>：在源代码窗口，选择需要暂停的代码行，双击行号或右键选择 <strong>“Insert&#x2F;Remove Breakpoint”</strong></li>
<li><strong>条件断点</strong>：右键断点，选择 **”Edit Breakpoint”**，设置条件（例如变量的值或特定的表达式）</li>
</ul>
<h4 id="逐步执行代码"><a href="#逐步执行代码" class="headerlink" title="逐步执行代码"></a>逐步执行代码</h4><ul>
<li><strong>单步执行（Step Over）</strong>：点击 <strong>F10</strong>，跳过函数调用但执行完整的单条语句。</li>
<li><strong>单步跳入（Step Into）</strong>：点击 <strong>F11</strong>，进入当前行的函数体内，逐行查看函数的内部执行流程。</li>
<li><strong>跳出函数（Step Out）</strong>：点击 <strong>Shift + F11</strong>，继续执行至函数结束并返回。</li>
<li><strong>运行到光标处（Run to Cursor）</strong>：右键选择 “Run to Cursor”，代码将从当前执行位置直接运行到你选择的行。</li>
</ul>
<h4 id="观察变量和寄存器"><a href="#观察变量和寄存器" class="headerlink" title="观察变量和寄存器"></a><strong>观察变量和寄存器</strong></h4><ul>
<li><p>观察变量</p>
<p>在 <strong>Watch 窗口</strong>（右键变量，选择 <strong>Add to Watch Window</strong>），可以查看变量值的动态变化。</p>
<p>通过“Memory”窗口，可以直接查看并修改特定内存地址的内容。</p>
</li>
<li><p>观察寄存器</p>
<p>在 <strong>“Registers”窗口</strong> 中查看 CPU 寄存器的状态，跟踪数据处理和寄存器值的变化。</p>
</li>
</ul>
<h4 id="观察和修改内存内容"><a href="#观察和修改内存内容" class="headerlink" title="观察和修改内存内容"></a><strong>观察和修改内存内容</strong></h4><ul>
<li><p>Memory 窗口</p>
<p>通过 <strong>“View” &gt; “Memory Windows” &gt; “Memory 1&#x2F;2”</strong> 来打开内存观察窗口。</p>
<p>输入内存地址，可以实时查看数据。窗口支持查看 <strong>ASCII</strong> 和 <strong>Hex</strong> 格式的数据。</p>
</li>
<li><p>实时修改</p>
<p>右键内存窗口中的值，选择“Modify Memory”可实时更改特定内存位置的值，以测试程序对不同数据的响应。</p>
</li>
</ul>
<h4 id="使用调试信息窗口"><a href="#使用调试信息窗口" class="headerlink" title="使用调试信息窗口"></a><strong>使用调试信息窗口</strong></h4><ul>
<li><p>**调用堆栈 (Call Stack + Locals)**：显示函数调用堆栈，跟踪代码执行路径。适用于调试递归或多层函数嵌套的问题。</p>
</li>
<li><p>硬件外设窗口 (Peripherals)</p>
<p>在调试过程中查看和配置硬件外设（如 GPIO、串口、定时器）的状态。</p>
<p>打开 <strong>“View” &gt; “System Viewer”</strong> 查看不同外设的寄存器和状态。</p>
</li>
</ul>
<h3 id="Advance-project任务"><a href="#Advance-project任务" class="headerlink" title="Advance_project任务"></a>Advance_project任务</h3><ul>
<li>进入debug模式，单步执行至LED_Flashes_Init后，两个灯全部亮起，为正常现象，</li>
<li>GPIO_EXIT_Init函数为按键控制外部中断，和bug展示的现象无关，故跳过即可</li>
<li>进入到最有可能有问题的函数：TIM_Flashes_Init</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241025183756295.png" alt="image-20241025183756295"></p>
<ul>
<li><p>进入到TIM_Flashes_Init函数中，可以发现，这个函数仅调用了一个函数指针：handler</p>
<p>除此之外，剩下的全是常规的tim计时器初始化以及nvic配置，尚未发现错误</p>
</li>
</ul>
<p>​	此时，<strong>handler指针所指向的函数现已被列为重大嫌疑函数😡</strong></p>
<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241025184110670.png" alt="image-20241025184110670" style="zoom:50%;" />

<ul>
<li>追根溯源handler：</li>
</ul>
<p>回退到上一步，发现handler指针指向了嫌疑人<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241025184323222.png" alt="image-20241025184323222" style="zoom:33%;" /></p>
<p>tick_handler函数依存于Flashes_TIM_IRQHandler（中断处理）函数,后者执行，前者就执行，因此我们找到后者，直接设置断点并转到，或者选中中断处理函数使用ctrl+F10，直接执行到他那里，会发现程序卡在了</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241025185037967.png" alt="image-20241025185037967"></p>
<p>看名字也知道，这个函数的作用是清空time，而不是time自减</p>
<p>当然为了严谨，我们还是验证一下：</p>
<p>转到调用它的函数的定义：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241025184456370.png" alt="image-20241025184456370"></p>
<p>简单计算验证一下，这个函数自己的逻辑是没有问题的</p>
<p>那问题就出在他调用的别的函数中</p>
<ul>
<li>函数一：get_tick()</li>
<li>函数二：clare_tick()</li>
</ul>
<p>get_tick函数的逻辑是，获取当前自增计数达到阈值产生的中断次数</p>
<p>clare_tick函数的逻辑是，定期清除中断次数防止int存不下了</p>
<p>因此get函数的实现就应该是return中断次数，经检查没问题</p>
<p>clare函数的实现就应该是把中断次数置0，就是他的问题</p>
<p>把 time– 改成 time &#x3D; 0；bug已修复</p>
<h3 id="演示视频："><a href="#演示视频：" class="headerlink" title="演示视频："></a>演示视频：</h3>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>STM32学习</tag>
      </tags>
  </entry>
  <entry>
    <title>串</title>
    <url>/2024/11/25/%E4%B8%B2%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="00a2443ccc1a3a8371dcc3375c86af5ff11fc1d68ebc6729049d14db84a85bdc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>串</title>
    <url>/2024/11/25/%E4%B8%B2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="00a2443ccc1a3a8371dcc3375c86af5ff11fc1d68ebc6729049d14db84a85bdc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>函数参数中有链表时，对&amp;符号的理解与讨论</title>
    <url>/2024/09/22/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AD%E6%9C%89%E9%93%BE%E8%A1%A8%E6%97%B6%EF%BC%8C%E5%AF%B9&amp;%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E8%AE%A8%E8%AE%BA/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d115165c161a8625b204cd549428af9cd8bd265c088775f4c3bb023b72dbadab"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
        <tag>细节辨析</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32学习笔记004</title>
    <url>/2024/11/02/stm3204/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="任务（1）：ADC-采样并通过串⼝发送⾄上位机"><a href="#任务（1）：ADC-采样并通过串⼝发送⾄上位机" class="headerlink" title="任务（1）：ADC 采样并通过串⼝发送⾄上位机"></a>任务（1）：ADC 采样并通过串⼝发送⾄上位机</h2><h3 id="ADC简介"><a href="#ADC简介" class="headerlink" title="ADC简介"></a>ADC简介</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241102110242914.png" alt="image-20241102110242914"></p>
<h3 id="ADC原理（逐次比较型）"><a href="#ADC原理（逐次比较型）" class="headerlink" title="ADC原理（逐次比较型）"></a>ADC原理（逐次比较型）</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241102110346796.png" alt="image-20241102110346796"></p>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol>
<li><p><strong>初始化</strong>：</p>
<p>选择输入信号并设置参考电压。</p>
</li>
<li><p><strong>采样</strong>：</p>
<p>ADC 读取输入模拟信号，并在采样保持电路中保持该值。</p>
</li>
<li><p><strong>逐次比较</strong>：</p>
<p>ADC 开始进行逐次比较，将输入信号与内部的数字化值进行比较。这个过程通过一个逐次逼近寄存器实现。</p>
<p>设定一个初始的数字值（通常是中间值），然后将其转换为模拟信号（DAC 输出），并与输入信号进行比较。</p>
</li>
<li><p><strong>比较结果</strong>：</p>
<p>如果 DAC 输出的模拟信号大于输入信号，则该位为 0；如果小于，则该位为 1。根据比较结果，SAR 更新其当前的数字值。</p>
<p>逐位比较过程从最高位到最低位进行，逐次确定每一位的值。</p>
</li>
<li><p><strong>重复过程</strong>：</p>
<p>重复以上步骤，直到所有位都确定为止。一般来说，逐次比较型 ADC 的转换过程需要 N 次比较，其中 N 是 ADC 的分辨率（位数）。</p>
</li>
<li><p><strong>输出结果</strong>：</p>
<p>一旦所有位都确定，转换结果就存储在输出寄存器中，可以通过数字接口读取。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241102110819185.png" alt="image-20241102110819185"></p>
<h4 id="ADC基本结构"><a href="#ADC基本结构" class="headerlink" title="ADC基本结构"></a>ADC基本结构</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241102111034836.png" alt="image-20241102111034836"></p>
<h3 id="ADC四种工作模式"><a href="#ADC四种工作模式" class="headerlink" title="ADC四种工作模式"></a>ADC四种工作模式</h3><ul>
<li>单次转换，扫描：配置多个通道，每次扫描可以扫描多通道，但每个大过程都要用函数触发</li>
<li>单次转换，非扫描：配置单个同通道，每次扫描都要用一个函数触发一次</li>
<li>连续转换，扫描：配置多个通道，进行连续扫描，只需触发一次</li>
<li>连续转换，非扫描：配置一个通道，只扫描他，只需触发一次</li>
</ul>
<h3 id="转换时间"><a href="#转换时间" class="headerlink" title="转换时间"></a>转换时间</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241102111751744.png" alt="image-20241102111751744"></p>
<h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><h4 id="（技术点介绍）首先是配置adc及其中断："><a href="#（技术点介绍）首先是配置adc及其中断：" class="headerlink" title="（技术点介绍）首先是配置adc及其中断："></a>（技术点介绍）首先是配置adc及其中断：</h4><h5 id="时钟配置"><a href="#时钟配置" class="headerlink" title="时钟配置"></a>时钟配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br></pre></td></tr></table></figure>

<p>这两行代码开启了 ADC3 和 GPIOC 的时钟。只有在时钟开启后，ADC 才能工作</p>
<h5 id="ADC-时钟分频"><a href="#ADC-时钟分频" class="headerlink" title="ADC 时钟分频"></a>ADC 时钟分频</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6);</span><br></pre></td></tr></table></figure>

<p>此行设置 ADC 的时钟分频，2和4不能选，只能从6开始选</p>
<h5 id="GPIO-配置"><a href="#GPIO-配置" class="headerlink" title="GPIO 配置"></a>GPIO 配置</h5><p>将 ADC 的输入引脚配置为模拟输入模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;</span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure>

<p>这里配置了 GPIOC 的 6 到 9 引脚为模拟输入，以便 ADC 可以读取这些引脚上的电压信号。</p>
<h5 id="ADC-配置"><a href="#ADC-配置" class="headerlink" title="ADC 配置"></a>ADC 配置</h5><p>使用 <code>ADC_InitTypeDef</code> 结构体配置 ADC 参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;</span><br><span class="line">ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;</span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;</span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;</span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = DISABLE;</span><br><span class="line">ADC_InitStructure.ADC_NbrOfChannel = 1;</span><br><span class="line">ADC_Init(ADC3, &amp;ADC_InitStructure);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>独立模式</strong>：表示此 ADC 不与其他 ADC 共享工作。</li>
<li><strong>数据对齐</strong>：选择数据右对齐，可以更容易地处理和解析结果。</li>
<li><strong>外部触发</strong>：这里设置为无外部触发，表示使用软件触发进行转换。</li>
<li><strong>连续转换</strong>：设置为禁用，这样 ADC 只在每次软件触发时进行一次转换。</li>
<li><strong>扫描模式</strong>：设置为禁用，表示只配置单个通道进行转换。</li>
</ul>
<h5 id="使能-ADC-和校准"><a href="#使能-ADC-和校准" class="headerlink" title="使能 ADC 和校准"></a>使能 ADC 和校准</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC_Cmd(ADC3, ENABLE);</span><br><span class="line">ADC_ResetCalibration(ADC3);</span><br><span class="line">while (ADC_GetResetCalibrationStatus(ADC3) == SET);</span><br><span class="line">ADC_StartCalibration(ADC3);</span><br><span class="line">while (ADC_GetCalibrationStatus(ADC3) == SET);</span><br></pre></td></tr></table></figure>

<p>这些代码段使能 ADC，并进行校准以确保测量的准确性。校准过程包括重置校准状态和开始校准。</p>
<h5 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = ADC3_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">ADC_ITConfig(ADC3, ADC_IT_EOC, ENABLE);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>EOC 中断</strong>：使能 EOC 中断，这样 ADC 转换完成时会触发中断</li>
</ul>
<h5 id="数据读取和处理"><a href="#数据读取和处理" class="headerlink" title="数据读取和处理"></a>数据读取和处理</h5><h6 id="启动-ADC-转换"><a href="#启动-ADC-转换" class="headerlink" title="启动 ADC 转换"></a>启动 ADC 转换</h6><p>在 <code>AD_GetValue</code> 函数中，选择通道并启动转换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC_RegularChannelConfig(ADC3, ADC_Channel_5, 1, ADC_SampleTime_55Cycles5);</span><br><span class="line">ADC_SoftwareStartConvCmd(ADC3, ENABLE);</span><br></pre></td></tr></table></figure>

<p>这段代码根据输入参数配置要读取的 ADC 通道，并通过软件触发开始转换。<code>ADC_SampleTime_55Cycles5</code> 表示采样时间为 55.5 个 ADC 时钟周期，这是一个影响转换速度和精度的参数。</p>
<h5 id="中断服务例程"><a href="#中断服务例程" class="headerlink" title="中断服务例程"></a>中断服务例程</h5><p>中断服务例程负责处理 ADC 转换完成的事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ADC3_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">    if (ADC_GetITStatus(ADC3, ADC_IT_EOC) != RESET)</span><br><span class="line">    &#123;</span><br><span class="line">        adc_value = ADC_GetConversionValue(ADC3);</span><br><span class="line">        adc_ready = 1;</span><br><span class="line">        ADC_ClearITPendingBit(ADC3, ADC_IT_EOC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>检查 EOC 标志</strong>：如果 EOC 中断被触发，则读取 ADC 转换结果，并将其存储在 <code>adc_value</code> 中</li>
<li><strong>清除中断标志</strong>：清除中断标志以便下次触发。</li>
</ul>
<h4 id="配置过程中，有几个点："><a href="#配置过程中，有几个点：" class="headerlink" title="配置过程中，有几个点："></a>配置过程中，有几个点：</h4><ul>
<li><p>因为是单次转换，非连续模式，所以想让它持续工作，每次调用函数时都要手动</p>
<p>ADC_SoftwareStartConvCmd(ADC3, ENABLE)一次</p>
</li>
<li><p>因为程序没有用到dma，所以只能使用单通道，否则数据村不过来，因此就用四个通道周期性扫描的方式来完成</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>        <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="type">uint32_t</span> mytime = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> last_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> adc_value = <span class="number">0</span>; <span class="comment">// 用于保存 ADC 读取的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE); <span class="comment">// 开启 ADC3 的时钟</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); <span class="comment">// 开启 GPIOC 的时钟</span></span><br><span class="line"></span><br><span class="line">    RCC_ADCCLKConfig(RCC_PCLK2_Div6); <span class="comment">// 选择时钟 6 分频，ADCCLK = 72MHz / 6 = 12MHz</span></span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure); <span class="comment">// 模拟输入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ADC 初始化</span></span><br><span class="line">    ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; <span class="comment">// 模式，选择独立模式</span></span><br><span class="line">    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; <span class="comment">// 数据对齐，选择右对齐</span></span><br><span class="line">    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; <span class="comment">// 外部触发，使用软件触发</span></span><br><span class="line">    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; <span class="comment">// 连续转换，失能</span></span><br><span class="line">    ADC_InitStructure.ADC_ScanConvMode = DISABLE; <span class="comment">// 扫描模式，失能</span></span><br><span class="line">    ADC_InitStructure.ADC_NbrOfChannel = <span class="number">1</span>; <span class="comment">// 通道数为 1</span></span><br><span class="line">    ADC_Init(ADC3, &amp;ADC_InitStructure);</span><br><span class="line"></span><br><span class="line">    ADC_Cmd(ADC3, ENABLE); <span class="comment">// 使能 ADC3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ADC 校准</span></span><br><span class="line">    ADC_ResetCalibration(ADC3); <span class="comment">// 固定流程</span></span><br><span class="line">    <span class="keyword">while</span> (ADC_GetResetCalibrationStatus(ADC3) == SET);</span><br><span class="line">    ADC_StartCalibration(ADC3);</span><br><span class="line">    <span class="keyword">while</span> (ADC_GetCalibrationStatus(ADC3) == SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 ADC 中断</span></span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = ADC3_IRQn;<span class="comment">// 确保是 ADC3 的中断</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line">    ADC_ITConfig(ADC3, ADC_IT_EOC, ENABLE); <span class="comment">// 使能 ADC 的 EOC 中断</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">AD_GetValue</span><span class="params">(<span class="type">int</span> recentchanel)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (recentchanel == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ADC_RegularChannelConfig(ADC3, ADC_Channel_4, <span class="number">1</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (recentchanel == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ADC_RegularChannelConfig(ADC3, ADC_Channel_5, <span class="number">1</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (recentchanel == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ADC_RegularChannelConfig(ADC3, ADC_Channel_6, <span class="number">1</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (recentchanel == <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ADC_RegularChannelConfig(ADC3, ADC_Channel_7, <span class="number">1</span>, ADC_SampleTime_55Cycles5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ADC_SoftwareStartConvCmd(ADC3, ENABLE); <span class="comment">// 软件触发 ADC 转换一次</span></span><br><span class="line">    <span class="keyword">return</span> adc_value; <span class="comment">// 返回最新的 ADC 值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ADC3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// ADC3 中断处理函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ADC_GetITStatus(ADC3, ADC_IT_EOC) != RESET) <span class="comment">// 检查是否是 EOC 中断</span></span><br><span class="line">    &#123;</span><br><span class="line">        adc_value = ADC_GetConversionValue(ADC3); <span class="comment">// 读取 ADC 值</span></span><br><span class="line">        ADC_ClearITPendingBit(ADC3, ADC_IT_EOC); <span class="comment">// 清除中断标志位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_time_interval</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> current_time = mytime;</span><br><span class="line">    <span class="type">uint32_t</span> interval = current_time - last_time; <span class="comment">// 计算时间间隔</span></span><br><span class="line">    last_time = current_time; <span class="comment">// 更新上次时间</span></span><br><span class="line">    <span class="keyword">return</span> interval/<span class="number">100</span>;<span class="comment">//微秒化成毫秒 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="（技术点介绍，定时器中断）下面是timer-h"><a href="#（技术点介绍，定时器中断）下面是timer-h" class="headerlink" title="（技术点介绍，定时器中断）下面是timer.h"></a>（技术点介绍，定时器中断）下面是timer.h</h4><p>因为要获取时间间隔，所以配置tim定时器</p>
<p>思路如下:</p>
<ul>
<li>定义一个全局变量 mytime</li>
<li>定义一个变量 last_time</li>
<li>timer配置分频72-1，自动重装值1</li>
<li>配置中断，每次中断，mytime都加一，实现微秒级别的计数</li>
<li>当调用adc相关函数的时候，计算mytime与last_time的差值</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//使能时钟</span></span><br><span class="line">	</span><br><span class="line">	TIM_InternalClockConfig(TIM2);</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; <span class="comment">//ָ设置时钟分频（1分频）</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; <span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Period=<span class="number">10</span><span class="number">-1</span>;<span class="comment">//周期是10微秒</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">72</span><span class="number">-1</span>; <span class="comment">//72mzh / 7200 = 10k ,72mhz / 7200 = 10k</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数（高级计时器有，现在不用）</span></span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_ClearFlag(TIM2,TIM_FLAG_Update); <span class="comment">//清除TIM2的更新中断标志位，确保定时器开始时没有残留的中断标志</span></span><br><span class="line">	</span><br><span class="line">	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);<span class="comment">//开启更新中断到nvic通路</span></span><br><span class="line">	</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">	</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel= TIM2_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主函数："><a href="#主函数：" class="headerlink" title="主函数："></a>主函数：</h4><p>定义一个四个变量的数组，用于标志各个红外对管的状态，只有满足状态改变的判定条件时，再改变状态，防止串口那里一直乱跳</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="type">uint8_t</span> RxData;</span><br><span class="line"><span class="type">int</span> ifblack[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint32_t</span> mytime;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BlkOrWte</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> recentchanel)</span>;</span><br><span class="line"><span class="type">int</span> recentchanel = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OLED_Init();</span><br><span class="line">	AD_Init();</span><br><span class="line">	Serial_Init();</span><br><span class="line">	Timer_Init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		OLED_ShowNum(<span class="number">1</span>,<span class="number">6</span>,mytime,<span class="number">9</span>);</span><br><span class="line">		<span class="keyword">if</span>(recentchanel == <span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> a = AD_GetValue(recentchanel);</span><br><span class="line">			BlkOrWte(a,recentchanel);</span><br><span class="line">			recentchanel = <span class="number">5</span>;</span><br><span class="line">			OLED_ShowNum(<span class="number">1</span>,<span class="number">1</span>,a,<span class="number">4</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(recentchanel == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> a = AD_GetValue(recentchanel);</span><br><span class="line">			BlkOrWte(a,recentchanel);</span><br><span class="line">			recentchanel = <span class="number">6</span>;</span><br><span class="line">			OLED_ShowNum(<span class="number">2</span>,<span class="number">1</span>,a,<span class="number">4</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(recentchanel == <span class="number">6</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> a = AD_GetValue(recentchanel);</span><br><span class="line">			BlkOrWte(a,recentchanel);</span><br><span class="line">			recentchanel = <span class="number">7</span>;</span><br><span class="line">			OLED_ShowNum(<span class="number">3</span>,<span class="number">1</span>,a,<span class="number">4</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(recentchanel == <span class="number">7</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> a = AD_GetValue(recentchanel);</span><br><span class="line">			BlkOrWte(a,recentchanel);</span><br><span class="line">			recentchanel = <span class="number">4</span>;</span><br><span class="line">			OLED_ShowNum(<span class="number">4</span>,<span class="number">1</span>,a,<span class="number">4</span>);</span><br><span class="line">		&#125;			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BlkOrWte</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> recentchanel)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;<span class="number">2000</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ifblack[recentchanel<span class="number">-4</span>]==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Serial_SendNumber(recentchanel,<span class="number">1</span>);</span><br><span class="line">			Serial_SendString(<span class="string">&quot;:black\r\n&quot;</span>);</span><br><span class="line">			Serial_SendNumber(get_time_interval(),<span class="number">1</span>);</span><br><span class="line">			Serial_SendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ifblack[recentchanel<span class="number">-4</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(a&lt;<span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ifblack[recentchanel<span class="number">-4</span>] == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Serial_SendNumber(recentchanel,<span class="number">1</span>);</span><br><span class="line">			Serial_SendString(<span class="string">&quot;white\r\n&quot;</span>);</span><br><span class="line">			Serial_SendNumber(get_time_interval(),<span class="number">1</span>);</span><br><span class="line">			Serial_SendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ifblack[recentchanel<span class="number">-4</span>] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>			<span class="comment">//更新中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)		<span class="comment">//获取TIM3定时器的更新中断标志位</span></span><br><span class="line">	&#123;</span><br><span class="line">		mytime++;	</span><br><span class="line">		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);			<span class="comment">//清除更新中断标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频现象："><a href="#视频现象：" class="headerlink" title="视频现象："></a>视频现象：</h3><h2 id="任务2-——DMA转运数据"><a href="#任务2-——DMA转运数据" class="headerlink" title="任务2 ——DMA转运数据"></a>任务2 ——DMA转运数据</h2><h3 id="dma简介"><a href="#dma简介" class="headerlink" title="dma简介"></a>dma简介</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241102130840765.png" alt="image-20241102130840765"></p>
<h3 id="技术点介绍"><a href="#技术点介绍" class="headerlink" title="技术点介绍"></a>技术点介绍</h3><h4 id="DMA-配置和使⽤"><a href="#DMA-配置和使⽤" class="headerlink" title="DMA 配置和使⽤"></a>DMA 配置和使⽤</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DMA初始化</span></span><br><span class="line">	DMA_InitTypeDef DMA_InitStructure;											<span class="comment">//定义结构体变量</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC3-&gt;DR;				<span class="comment">//外设基地址</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;	<span class="comment">//外设数据宽度，半字，对应16为的ADC数据寄存器</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;			<span class="comment">//外设地址自增，选择失能，始终以ADC数据寄存器为源</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value;					<span class="comment">//存储器基地址，AD_Value</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;			<span class="comment">//存储器数据宽度，半字，与源数据宽度对应</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;						<span class="comment">//存储器地址自增使能，每次转运后，数组位置下移</span></span><br><span class="line">	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;							<span class="comment">//传输方向，选择由外设到存储器，ADC数据寄存器转到数组</span></span><br><span class="line">	DMA_InitStructure.DMA_BufferSize = <span class="number">4</span>;										<span class="comment">//转运次数，与ADC通道数一致</span></span><br><span class="line">	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;								<span class="comment">//循环模式，与ADC的连续转换一致</span></span><br><span class="line">	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;								<span class="comment">//存储器到存储器失能</span></span><br><span class="line">	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;						<span class="comment">//优先级，中等</span></span><br><span class="line">	DMA_Init(DMA2_Channel5, &amp;DMA_InitStructure);								<span class="comment">//将结构体变量交给DMA_Init，配置DMA2的通道5</span></span><br></pre></td></tr></table></figure>

<h5 id="DMA-InitTypeDef-结构体成员"><a href="#DMA-InitTypeDef-结构体成员" class="headerlink" title="DMA_InitTypeDef 结构体成员"></a>DMA_InitTypeDef 结构体成员</h5><ol>
<li><p><strong>DMA_PeripheralBaseAddr</strong>：</p>
<p>设置外设的基地址，DMA 传输时的源地址。</p>
<p>通常是外设寄存器的地址，比如 ADC 的数据寄存器 &amp;ADC3-&gt;DR</p>
</li>
<li><p><strong>DMA_PeripheralDataSize</strong>：</p>
<p>设置外设数据的宽度。</p>
<p>DMA_PeripheralDataSize_Byte：8位数据宽度</p>
<p>DMA_PeripheralDataSize_HalfWord：16位数据宽度（通常用于 ADC）</p>
<p>DMA_PeripheralDataSize_Word：32位数据宽度</p>
</li>
<li><p><strong>DMA_PeripheralInc</strong>：</p>
<p>设置外设地址自增。</p>
<p>DMA_PeripheralInc_Disable：外设地址不自增（常用于 ADC）。</p>
<p>DMA_PeripheralInc_Enable：外设地址自增</p>
</li>
<li><p><strong>DMA_MemoryBaseAddr</strong>：</p>
<p>设置存储器的基地址，DMA 将数据写入的目的地</p>
<p>通常是指向一个数组或内存区域的指针，例如 AD_Value</p>
</li>
<li><p><strong>DMA_MemoryDataSize</strong>：</p>
<p>设置存储器数据的宽度。</p>
<p>DMA_Memorialized_Byte：8位数据宽度。</p>
<p>DMA_Memorialized_HalfWord：16位数据宽度。</p>
<p>DMA_Memorialized_Word：32位数据宽度。</p>
</li>
<li><p><strong>DMA_MemoryInc</strong>：</p>
<p>设置存储器地址自增。</p>
<p>DMA_MemoryInc_Disable：存储器地址不自增（所有数据写入同一位置）。</p>
<p>DMA_MemoryInc_Enable：存储器地址自增（每次传输后，指向下一个存储单元）。</p>
</li>
<li><p><strong>DMA_DIR</strong>：</p>
<p>设置数据传输的方向。</p>
<p>DMA_DIR_PeripheralSRC：从外设到存储器（如 ADC 到内存）。</p>
<p>DMA_DIR_MemorySRC：从存储器到外设（如内存到 DAC）。</p>
</li>
<li><p><strong>DMA_BufferSize</strong>：</p>
<p>设置传输的数据大小（传输次数）。</p>
<p>指定传输的样本数量。例如，若你要从 ADC 获取 4 个样本，则设置为 4。</p>
</li>
<li><p><strong>DMA_Mode</strong>：</p>
<p>设置 DMA 的工作模式。</p>
<p>DMA_Mode_Normal：正常模式，传输一次后停止。</p>
<p>DMA_Mode_Circular：循环模式，完成一次传输后自动重新开始，适合连续数据采集。</p>
</li>
<li><p><strong>DMA_M2M</strong>：</p>
<p>设置存储器到存储器传输的使能。</p>
<p>DMA_M2M_Disable：禁用存储器到存储器的传输（通常用于外设到存储器传输）。</p>
<p>DMA_M2M_Enable：启用存储器到存储器的传输（适用于特定应用）。</p>
</li>
<li><p><strong>DMA_Priority</strong>：</p>
<p>设置 DMA 传输的优先级。</p>
<p>DMA_Priority_Low：低优先级。</p>
<p>DMA_Priority_Medium：中优先级。</p>
<p>DMA_Priority_High：高优先级。</p>
<p>DMA_Priority_VeryHigh：最高优先级。</p>
</li>
</ol>
<h4 id="ADC-触发-DMA"><a href="#ADC-触发-DMA" class="headerlink" title="ADC 触发 DMA"></a>ADC 触发 DMA</h4><ol>
<li><p><strong>DMA 配置</strong>：</p>
<p>在 ADC 初始化中，可以配置 DMA 使能。当 ADC 完成一次转换时，它会自动向 DMA 发送一个信号，指示数据已经准备好进行传输</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ADC_DMACmd(ADC3, ENABLE);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>数据传输</strong>：</p>
<p>一旦 DMA 接收到来自 ADC 的触发信号，它会从 ADC 的数据寄存器中读取转换结果，并将其存储到指定的内存地址（例如某个数组中）</p>
</li>
</ol>
<h3 id="定时器配置"><a href="#定时器配置" class="headerlink" title="定时器配置"></a>定时器配置</h3><p>10微秒为周期，以便记录微妙级别的DMA过程（也不是很精准，DMA转运太快了）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);<span class="comment">//使能时钟</span></span><br><span class="line">	</span><br><span class="line">	TIM_InternalClockConfig(TIM2);</span><br><span class="line">	</span><br><span class="line">	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;</span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; <span class="comment">//ָ设置时钟分频（1分频）</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; <span class="comment">//向上计数</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Period=<span class="number">10</span><span class="number">-1</span>;<span class="comment">//周期是10微秒</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_Prescaler=<span class="number">72</span><span class="number">-1</span>; <span class="comment">//72mzh / 7200 = 10k ,72mhz / 7200 = 10k</span></span><br><span class="line">	TIM_TimeBaseInitStructure.TIM_RepetitionCounter=<span class="number">0</span>;<span class="comment">//重复计数（高级计时器有，现在不用）</span></span><br><span class="line">	TIM_TimeBaseInit(TIM2,&amp;TIM_TimeBaseInitStructure);</span><br><span class="line">	</span><br><span class="line">	TIM_ClearFlag(TIM2,TIM_FLAG_Update); <span class="comment">//清除TIM2的更新中断标志位，确保定时器开始时没有残留的中断标志</span></span><br><span class="line">	</span><br><span class="line">	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);<span class="comment">//开启更新中断到nvic通路</span></span><br><span class="line">	</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">	</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel= TIM2_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority=<span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	TIM_Cmd(TIM2,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="主函数源码"><a href="#主函数源码" class="headerlink" title="主函数源码"></a>主函数源码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> delta_time = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ifblack[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint32_t</span> mytime;</span><br><span class="line"><span class="type">int</span> dma_transfer_count =<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BlkOrWte</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> recentchanel)</span>;</span><br><span class="line"><span class="type">int</span> recentchanel = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OLED_Init();</span><br><span class="line">	AD_Init();</span><br><span class="line">	Serial_Init();</span><br><span class="line">	Timer_Init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		OLED_ShowNum(<span class="number">1</span>,<span class="number">1</span>,mytime,<span class="number">10</span>);</span><br><span class="line">		Serial_SendNumber(AD_Value[<span class="number">0</span>],<span class="number">4</span>);</span><br><span class="line">		Serial_SendString(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		Serial_SendNumber(AD_Value[<span class="number">1</span>],<span class="number">4</span>);</span><br><span class="line">		Serial_SendString(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		Serial_SendNumber(AD_Value[<span class="number">2</span>],<span class="number">4</span>);</span><br><span class="line">		Serial_SendString(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		Serial_SendNumber(AD_Value[<span class="number">3</span>],<span class="number">4</span>);</span><br><span class="line">		Serial_SendString(<span class="string">&quot;  delta_time:&quot;</span>);</span><br><span class="line">		Serial_SendNumber(delta_time,<span class="number">5</span>);</span><br><span class="line">		Serial_SendString(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>			<span class="comment">//更新中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)		<span class="comment">//获取TIM3定时器的更新中断标志位</span></span><br><span class="line">	&#123;</span><br><span class="line">		mytime++;	</span><br><span class="line">		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);			<span class="comment">//清除更新中断标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DMA2_Channel4_5_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//配置一下dma2的中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (DMA_GetITStatus(DMA2_IT_TC5)) &#123;</span><br><span class="line">        dma_transfer_count++; <span class="comment">// 增加转运计数</span></span><br><span class="line">        <span class="keyword">if</span> (dma_transfer_count &gt;= <span class="number">1</span>) &#123; <span class="comment">// 每次转运计算时间间隔</span></span><br><span class="line">            delta_time = get_time_interval(); <span class="comment">// 计算时间间隔</span></span><br><span class="line">            dma_transfer_count = <span class="number">0</span>; <span class="comment">// 重置计数器</span></span><br><span class="line">        &#125;</span><br><span class="line">        DMA_ClearITPendingBit(DMA2_IT_TC5); <span class="comment">// 清除中断标志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频现象：-1"><a href="#视频现象：-1" class="headerlink" title="视频现象："></a>视频现象：</h3><h2 id="vofa"><a href="#vofa" class="headerlink" title="vofa"></a>vofa</h2><h3 id="JustFloat-协议的结构"><a href="#JustFloat-协议的结构" class="headerlink" title="JustFloat 协议的结构"></a>JustFloat 协议的结构</h3><ol>
<li>数据帧：<br> 每个数据帧包含一个浮点数组，数组中的每个元素代表一个通道的数据。例如，有四个通道的数据要传输，数据帧中就要包含四个浮点数</li>
<li>小端格式：<br>JustFloat 协议使用小端格式存储浮点数，最低有效字节存储在最低的内存地址中</li>
<li>帧尾：<br>每个数据帧的末尾都有一个固定的帧尾标志，用于标识数据帧的结束： {0x00, 0x00, 0x80, 0x7f}</li>
</ol>
<h3 id="数据传输过程"><a href="#数据传输过程" class="headerlink" title="数据传输过程"></a>数据传输过程</h3><ol>
<li><p>数据准备：</p>
<p>需要传输的数据首先被转换成浮点数，并按照小端格式存储在数组中。</p>
</li>
<li><p>数据发送：<br> 将浮点数组和帧尾标志一起发送到接收端。接收端通过识别帧尾标志来确定数据帧的结束，并解析浮点数组中的数据。</p>
</li>
<li><p>数据解析：</p>
<p>接收端接收到数据帧后，解析浮点数组中的数据，并根据需要进行处理或显示。</p>
</li>
</ol>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>适合多通道数据采集，例如正在做的循迹小车有多个红外对管，每个红外对管代表一个通道的数据。</p>
<h3 id="图形控件的使用"><a href="#图形控件的使用" class="headerlink" title="图形控件的使用"></a>图形控件的使用</h3><p>以最常用的示波器为例</p>
<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241103190053878.png" alt="image-20241103190053878" style="zoom: 33%;" />

<p>在左侧选择控件示波器并把它拖进去</p>
<ul>
<li>右键可以选择填充方式</li>
<li>下面三个圈可以调整波形范围，包含点数等</li>
<li>auto可以让波形以最佳方式自动呈现</li>
</ul>
<h3 id="具体使用方法"><a href="#具体使用方法" class="headerlink" title="具体使用方法"></a>具体使用方法</h3><h4 id="配置一下这个能用这个协议的函数"><a href="#配置一下这个能用这个协议的函数" class="headerlink" title="配置一下这个能用这个协议的函数"></a>配置一下这个能用这个协议的函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;serial.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Vofa_JustFloat</span><span class="params">(<span class="type">float</span> *data, <span class="type">uint8_t</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> tempData[<span class="number">100</span>];</span><br><span class="line">    <span class="type">uint8_t</span> temp_end[<span class="number">4</span>] = &#123;<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x7f</span>&#125;;</span><br><span class="line">    <span class="type">float</span> temp_copy[num];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;temp_copy, data, <span class="keyword">sizeof</span>(<span class="type">float</span>) * num);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(tempData, (<span class="type">uint8_t</span> *)&amp;temp_copy, <span class="keyword">sizeof</span>(temp_copy));</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;tempData[num * <span class="number">4</span>], &amp;temp_end[<span class="number">0</span>], <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//串口发送函数</span></span><br><span class="line">    Serial_SendArray(tempData,(num + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个函数中，前几行都是在进行数据处理，处理完成后得到tempdata，是一个uint8_t类型的数组</li>
<li>得到数组之后，用江科大的串口发送函数直接发到送即可</li>
<li>使用方法：输入（浮点数数组，数组长度）</li>
</ul>
<h3 id="配置ADC-DMA"><a href="#配置ADC-DMA" class="headerlink" title="配置ADC&amp;&amp;DMA"></a>配置ADC&amp;&amp;DMA</h3><p>依然采用上面的配置，并将ADC数据接入拓展到12？个（咱只发了10个红外对管）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>        <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="type">uint32_t</span> mytime = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> last_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> AD_Value_for_DMA2[<span class="number">5</span>];</span><br><span class="line"><span class="type">uint16_t</span> AD_Value_for_DMA1[<span class="number">5</span>];<span class="comment">//用于存放AD转换结果的全局数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);	<span class="comment">//开启ADC3的时钟</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);	<span class="comment">//开启GPIOF的时钟</span></span><br><span class="line">	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);		<span class="comment">//开启DMA2的时钟</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	RCC_ADCCLKConfig(RCC_PCLK2_Div6);						<span class="comment">//选择时钟6分频，ADCCLK = 72MHz / 6 = 12MHz</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOF, &amp;GPIO_InitStructure);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//剩下的</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 |GPIO_Pin_5;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3, ADC_Channel_4, <span class="number">1</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3, ADC_Channel_5, <span class="number">2</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3, ADC_Channel_6, <span class="number">3</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3, ADC_Channel_7, <span class="number">4</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3, ADC_Channel_8, <span class="number">5</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	</span><br><span class="line">	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, <span class="number">6</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, <span class="number">7</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, <span class="number">8</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, <span class="number">9</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, <span class="number">10</span>, ADC_SampleTime_55Cycles5);	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	ADC_InitTypeDef ADC_InitStructure;											</span><br><span class="line">	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;							</span><br><span class="line">	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;				<span class="comment">//这里好像还要改一个独立模式？		</span></span><br><span class="line">	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;			</span><br><span class="line">	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;							</span><br><span class="line">	ADC_InitStructure.ADC_ScanConvMode = ENABLE;								</span><br><span class="line">	ADC_InitStructure.ADC_NbrOfChannel = <span class="number">10</span>;										</span><br><span class="line">	ADC_Init(ADC3, &amp;ADC_InitStructure);											</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//DMA初始化</span></span><br><span class="line">	DMA_InitTypeDef DMA_InitStructure;											<span class="comment">//定义结构体变量</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC3-&gt;DR;				<span class="comment">//外设基地址</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;	<span class="comment">//外设数据宽度，半字，对应16为的ADC数据寄存器</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;			<span class="comment">//外设地址自增，选择失能，始终以ADC数据寄存器为源</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value_for_DMA2;					<span class="comment">//存储器基地址</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;			<span class="comment">//存储器数据宽度，半字，与源数据宽度对应</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;						<span class="comment">//存储器地址自增使能，每次转运后，数组位置下移</span></span><br><span class="line">	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;							<span class="comment">//传输方向，选择由外设到存储器，ADC数据寄存器转到数组</span></span><br><span class="line">	DMA_InitStructure.DMA_BufferSize =<span class="number">5</span>;										<span class="comment">//转运次数</span></span><br><span class="line">	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;								<span class="comment">//循环模式，与ADC的连续转换一致</span></span><br><span class="line">	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;								<span class="comment">//存储器到存储器失能</span></span><br><span class="line">	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;						<span class="comment">//优先级，中等</span></span><br><span class="line">	DMA_Init(DMA2_Channel5, &amp;DMA_InitStructure);								<span class="comment">//将结构体变量交给DMA_Init，配置DMA2的通道5</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="type">uint32_t</span>)&amp;ADC1-&gt;DR;				<span class="comment">//外设基地址</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;	<span class="comment">//外设数据宽度，半字，对应16为的ADC数据寄存器</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;			<span class="comment">//外设地址自增，选择失能，始终以ADC数据寄存器为源</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="type">uint32_t</span>)AD_Value_for_DMA1;					<span class="comment">//存储器基地址</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;			<span class="comment">//存储器数据宽度，半字，与源数据宽度对应</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;						<span class="comment">//存储器地址自增使能，每次转运后，数组位置下移</span></span><br><span class="line">	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;							<span class="comment">//传输方向，选择由外设到存储器，ADC数据寄存器转到数组</span></span><br><span class="line">	DMA_InitStructure.DMA_BufferSize =<span class="number">5</span>;										<span class="comment">//转运次数</span></span><br><span class="line">	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;								<span class="comment">//循环模式，与ADC的连续转换一致</span></span><br><span class="line">	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;								<span class="comment">//存储器到存储器失能</span></span><br><span class="line">	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;						<span class="comment">//优先级，中等</span></span><br><span class="line">	DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);								<span class="comment">//将结构体变量交给DMA_Init，配置DMA1的通道1</span></span><br><span class="line">	</span><br><span class="line">	DMA_Cmd(DMA1_Channel1, ENABLE);</span><br><span class="line">	DMA_Cmd(DMA2_Channel5, ENABLE);							</span><br><span class="line">	ADC_DMACmd(ADC3, ENABLE);		<span class="comment">//ADC3触发DMA2的信号使能</span></span><br><span class="line">	ADC_DMACmd(ADC1, ENABLE);</span><br><span class="line">	ADC_Cmd(ADC1, ENABLE);</span><br><span class="line">	ADC_Cmd(ADC3, ENABLE);									</span><br><span class="line">	</span><br><span class="line">	DMA_ITConfig(DMA2_Channel5, DMA_IT_TC, ENABLE);  <span class="comment">// 启用传输完成中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置 DMA 中断</span></span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = DMA2_Channel4_5_IRQn; <span class="comment">//45共享中断</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">// 先占优先级</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">// 从优先级</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">// 使能中断</span></span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);  <span class="comment">// 启用传输完成中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 设置 DMA 中断</span></span><br><span class="line">	</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn; </span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>; <span class="comment">// 先占优先级</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>; <span class="comment">// 从优先级</span></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">// 使能中断</span></span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ADC校准</span></span><br><span class="line">	ADC_ResetCalibration(ADC3);								<span class="comment">//固定流程，内部有电路会自动执行校准</span></span><br><span class="line">	<span class="keyword">while</span> (ADC_GetResetCalibrationStatus(ADC3) == SET);</span><br><span class="line">	ADC_StartCalibration(ADC3);</span><br><span class="line">	<span class="keyword">while</span> (ADC_GetCalibrationStatus(ADC3) == SET);</span><br><span class="line">	</span><br><span class="line">	ADC_ResetCalibration(ADC1);								<span class="comment">//固定流程，内部有电路会自动执行校准</span></span><br><span class="line">	<span class="keyword">while</span> (ADC_GetResetCalibrationStatus(ADC3) == SET);</span><br><span class="line">	ADC_StartCalibration(ADC1);</span><br><span class="line">	<span class="keyword">while</span> (ADC_GetCalibrationStatus(ADC3) == SET);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//ADC触发</span></span><br><span class="line">	ADC_SoftwareStartConvCmd(ADC3, ENABLE);</span><br><span class="line">	ADC_SoftwareStartConvCmd(ADC1, ENABLE);		<span class="comment">//软件触发ADC开始工作，由于ADC处于连续转换模式，故触发一次后ADC就可以一直连续不断地工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="main函数调用"><a href="#main函数调用" class="headerlink" title="main函数调用"></a>main函数调用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DELAY.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Serial.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vofa.h&quot;</span></span></span><br><span class="line"><span class="type">float</span> mydata[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	Serial_Init();</span><br><span class="line">	OLED_Init();</span><br><span class="line">	AD_Init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以dma2为主，dma2触发以后，顺便把dma1和dam2的一块发出去，当然dma1的自己也存一遍</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DMA2_Channel4_5_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (DMA_GetITStatus(DMA2_IT_TC5)) &#123;</span><br><span class="line">        mydata[<span class="number">0</span>] = AD_Value_for_DMA2[<span class="number">0</span>];</span><br><span class="line">		mydata[<span class="number">1</span>] = AD_Value_for_DMA2[<span class="number">1</span>];</span><br><span class="line">		mydata[<span class="number">2</span>] = AD_Value_for_DMA2[<span class="number">2</span>];</span><br><span class="line">		mydata[<span class="number">3</span>] = AD_Value_for_DMA2[<span class="number">3</span>];</span><br><span class="line">         mydata[<span class="number">4</span>] = AD_Value_for_DMA2[<span class="number">4</span>];</span><br><span class="line">		mydata[<span class="number">5</span>] = AD_Value_for_DMA1[<span class="number">0</span>];</span><br><span class="line">		mydata[<span class="number">6</span>] = AD_Value_for_DMA1[<span class="number">1</span>];</span><br><span class="line">		mydata[<span class="number">7</span>] = AD_Value_for_DMA1[<span class="number">2</span>];        </span><br><span class="line">		mydata[<span class="number">8</span>] = AD_Value_for_DMA1[<span class="number">3</span>];</span><br><span class="line">		mydata[<span class="number">9</span>] = AD_Value_for_DMA1[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">		Vofa_JustFloat(mydata,<span class="number">10</span>);</span><br><span class="line">        DMA_ClearITPendingBit(DMA2_IT_TC5); <span class="comment">// 清除中断标志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DMA1_Channel1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (DMA_GetITStatus(DMA1_IT_TC1)) &#123;</span><br><span class="line">		mydata[<span class="number">5</span>] = AD_Value_for_DMA1[<span class="number">0</span>];</span><br><span class="line">		mydata[<span class="number">6</span>] = AD_Value_for_DMA1[<span class="number">1</span>];</span><br><span class="line">		mydata[<span class="number">7</span>] = AD_Value_for_DMA1[<span class="number">2</span>];        </span><br><span class="line">		mydata[<span class="number">8</span>] = AD_Value_for_DMA1[<span class="number">3</span>];</span><br><span class="line">		mydata[<span class="number">9</span>] = AD_Value_for_DMA1[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        DMA_ClearITPendingBit(DMA1_IT_TC1); <span class="comment">// 清除中断标志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="视频现象：-2"><a href="#视频现象：-2" class="headerlink" title="视频现象："></a>视频现象：</h3><h2 id="任务四：进行简单的循迹"><a href="#任务四：进行简单的循迹" class="headerlink" title="任务四：进行简单的循迹"></a>任务四：进行简单的循迹</h2><h2 id="外设原理"><a href="#外设原理" class="headerlink" title="外设原理"></a>外设原理</h2><p><strong>红外对管</strong>：红外对管循迹的原理主要是利用了不同颜色物体对红外线的反射和吸收能力不同。其基本工作过程如下：</p>
<p> 红外发射：红外对管由一个红外发射管和一个红外接收管组成。红外发射管通电后会持续向外发射特定波长的红外线。</p>
<p>光线反射：当红外光线照射到物体表面时，根据物体的颜色和材质特性，会对红外线产生不同的反射情况。白色物体对光线的反射能力较强，能够将大部分照射到其表面的红外线反射出去；而黑色物体对光线的吸收能力较强，反射的红外线则较少。</p>
<p>接收与转换：红外接收管是一种对红外线敏感的光敏元件。当接收管接收到反射回来的红外线时，其内部的物理特性会发生变化，从而产生电流或电压的变化。如果接收到的红外光强度较大，接收管产生的电流或电压就会相应较大；反之，如果接收到的红外光很弱或几乎没有，接收管产生的电流或电压就会非常小。</p>
<p> 信号输出与判断：通常会将红外接收管的输出信号连接到一个比较电路或信号处理电路。该电路会将接收管输出的信号与一个预设的阈值进行比较。如果接收管输出的信号大于阈值，说明接收到的红外光较强，此时判断为红外对管处于白色区域；如果接收管输出的信号小于阈值，说明接收到的红外光较弱，此时判断为红外对管处于黑色轨迹上。</p>
<p>基于以上原理，将红外对管安装在移动的物体（如智能小车）上，并合理设置多个红外对管的位置，就可以通过检测不同位置的红外对管信号，判断物体相对于黑线轨迹的位置，从而实现循迹功能。例如，当小车的左侧红外对管检测到黑色轨迹，而右侧红外对管检测到白色区域时，说明小车向左偏离了轨迹，控制系统就可以控制小车向右转，以保持在黑色轨迹上行驶。</p>
<p><strong>循迹模块</strong>：根据红外对管反射回的信息，来判断小车行走的状态</p>
<p>5个红外对管安装在小车的对应位置</p>
<p>将ADC值转换为黑线1或者没有线0,红外对管从左往右分别为IPT0,IPT1，IPT2，IPT3，IPT4</p>
<p>我们根据反射回的信息将小车运动分为几种情况</p>
<p><strong>PID：</strong>比例-积分-微分控制器，是一种常用的反馈控制算法，广泛应用于工业控制、自动化等领域。</p>
<p> 基本原理</p>
<ol>
<li>比例控制（P）</li>
</ol>
<p> 比例控制是根据当前的误差值与一个比例系数相乘来计算控制量。误差值是设定值与实际值之间的差值。</p>
<p>例如，如果设定温度为 50℃，当前实际温度为 45℃，误差为 5℃。假设比例系数为 2，那么比例控制的输出为 5×2 &#x3D; 10。</p>
<p>比例控制的作用是对误差进行快速响应，但不能消除稳态误差，即当系统达到稳定状态时，可能仍然存在一定的误差。</p>
<ol start="2">
<li>积分控制（I）</li>
</ol>
<p> 积分控制是对误差进行累积求和，并将累积的误差与一个积分系数相乘来计算控制量。</p>
<p>随着时间的推移，积分项会不断增大，直到误差为零。积分控制的作用是消除稳态误差，但积分作用过强可能会导致系统响应变慢或出现超调。</p>
<p>例如，在温度控制中，如果误差一直存在，积分项会不断累积，使得控制量逐渐增大，直到温度达到设定值。</p>
<ol start="3">
<li>微分控制（D）</li>
</ol>
<p> 微分控制是根据误差的变化率（即当前误差与上一时刻误差的差值）与一个微分系数相乘来计算控制量。</p>
<p>微分控制的作用是预测误差的变化趋势，提前给出控制信号，从而减小超调量和提高系统的稳定性。</p>
<p>例如，如果温度上升速度很快，微分控制会产生一个较大的负控制量，以抑制温度的快速上升。</p>
<p> 工作过程</p>
<p>  首先，测量系统的实际输出值。</p>
<p>然后，计算实际输出值与设定值之间的误差。</p>
<p>分别计算比例、积分和微分三个部分的控制量：</p>
<p>比例控制量 &#x3D; 比例系数 × 误差</p>
<p>积分控制量 &#x3D; 积分系数 × 误差的累积和</p>
<p>微分控制量 &#x3D; 微分系数 × 误差的变化率</p>
<p>将三个部分的控制量相加，得到总的控制量。</p>
<p> 根据控制量来调整系统的输入，使系统的输出逐渐接近设定值。</p>
<h2 id="外设应用"><a href="#外设应用" class="headerlink" title="外设应用"></a>外设应用</h2><p>我们根据反射回的信息将小车运动分为以下几种情况</p>
<ol>
<li>直行</li>
</ol>
<p>此时五个红外对管反射回的信息为00100</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">			qianjin();</span><br><span class="line">	  &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>左转90度</li>
</ol>
<p>此时五个红外对管反射回的信息为11000或者11100</p>
<p>开始左转</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnleft(<span class="number">90</span>);</span><br><span class="line">	&#125;		</span><br></pre></td></tr></table></figure>

<ol>
<li>右转90度</li>
</ol>
<p>此时五个红外对管反射回的信息为00011或者00111</p>
<p>开始右转</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	  <span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">			turnright(<span class="number">90</span>);</span><br><span class="line">&#125;		</span><br></pre></td></tr></table></figure>

<ol>
<li>向左偏一些</li>
</ol>
<p>此时五个红外对管反射回的信息为01000</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnleft(<span class="number">30</span>);</span><br><span class="line">	&#125;	</span><br></pre></td></tr></table></figure>

<ol>
<li>向右偏一些</li>
</ol>
<p>此时五个红外对管反射回的信息为00010</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnright(<span class="number">30</span>);</span><br><span class="line">	&#125;	</span><br></pre></td></tr></table></figure>

<ol>
<li>掉头</li>
</ol>
<p>此时五个红外对管反射回的信息为00000</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">			turnright(<span class="number">180</span>);</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<ol>
<li>在遇见岔路时，选择右转</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnright(<span class="number">90</span>);</span><br><span class="line">	&#125;		</span><br></pre></td></tr></table></figure>

<p>使用直流电机作为动力源，通过电机驱动电路来控制电机的转速和方向。</p>
<p>通过控制左右两个电机的转速和方向，可以使小车实现前进、后退、转弯等动作。例如，当左侧电机转速高于右侧电机转速时，小车会向右转；当右侧电机转速高于左侧电机转速时，小车会向左转。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">leftforward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rightforward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">leftbackward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rightbackward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">turnright</span><span class="params">(<span class="type">uint16_t</span> angle)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dt = (<span class="number">8</span>*angle);</span><br><span class="line">	leftforward();</span><br><span class="line">	rightbackward();</span><br><span class="line">	Delay_ms(dt);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">turnleft</span><span class="params">(<span class="type">uint16_t</span> angle)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dt = (<span class="number">8</span>*angle);</span><br><span class="line">	leftbackward();</span><br><span class="line">	rightforward();</span><br><span class="line">	Delay_ms(dt);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用PWM改变速度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_set_tim_compare</span><span class="params">(<span class="type">uint16_t</span> brr)</span></span><br><span class="line">&#123;</span><br><span class="line">	TIM_SetCompare2(TIM4,brr);</span><br><span class="line">	TIM_SetCompare1(TIM4,brr);</span><br><span class="line">	TIM_SetCompare2(TIM2,brr);</span><br><span class="line">	TIM_SetCompare1(TIM2,brr);</span><br><span class="line">	TIM_SetCompare2(TIM1,brr);</span><br><span class="line">	TIM_SetCompare1(TIM1,brr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PDout</span><span class="params">(<span class="type">uint8_t</span> pin, <span class="type">uint8_t</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        GPIO_SetBits(GPIOD, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin high</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOD, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin low</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PEout</span><span class="params">(<span class="type">uint8_t</span> pin, <span class="type">uint8_t</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        GPIO_SetBits(GPIOE, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin high</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOE, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin low</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PBout</span><span class="params">(<span class="type">uint8_t</span> pin, <span class="type">uint8_t</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        GPIO_SetBits(GPIOB, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin high</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOB, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin low</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM4_PWM_Init</span><span class="params">(u16 arr,u16 psc)</span></span><br><span class="line">&#123;  </span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">	TIM_OCInitTypeDef  TIM_OCInitStructure;</span><br><span class="line"> </span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);	</span><br><span class="line"> 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD,ENABLE); </span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; <span class="comment">//</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//TIM4通道2</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; <span class="comment">//</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//TIM4通道1</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;			</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		</span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_12);					</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 				</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);				</span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_13);						</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;				 </span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_14);						</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;				</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_15);						</span><br><span class="line"> </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Period = arr; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Prescaler =psc; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_ClockDivision = <span class="number">0</span>; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  </span><br><span class="line">	TIM_TimeBaseInit(TIM4, &amp;TIM_TimeBaseStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC2Init(TIM4, &amp;TIM_OCInitStructure);  </span><br><span class="line"> </span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC1Init(TIM4, &amp;TIM_OCInitStructure);  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	TIM_Cmd(TIM4, ENABLE);  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_PWM_Init</span><span class="params">(u16 arr,u16 psc)</span></span><br><span class="line">&#123;  </span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">	TIM_OCInitTypeDef  TIM_OCInitStructure;</span><br><span class="line"> </span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);	</span><br><span class="line"> 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE); </span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE); </span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 				</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOE, &amp;GPIO_InitStructure);				</span><br><span class="line">	GPIO_ResetBits(GPIOE,GPIO_Pin_9);	</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 				</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOE, &amp;GPIO_InitStructure);				</span><br><span class="line">	GPIO_ResetBits(GPIOE,GPIO_Pin_11);	</span><br><span class="line"></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;				 </span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOB,GPIO_Pin_10);						</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;				</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOB,GPIO_Pin_11);						</span><br><span class="line"> </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Period = arr; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Prescaler =psc; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_ClockDivision = <span class="number">0</span>; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  </span><br><span class="line">	TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC2Init(TIM2, &amp;TIM_OCInitStructure);  </span><br><span class="line"> </span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);  </span><br><span class="line">	</span><br><span class="line"> 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;	</span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC1Init(TIM1, &amp;TIM_OCInitStructure);</span><br><span class="line"> </span><br><span class="line">	TIM_Cmd(TIM2, ENABLE); </span><br><span class="line">	TIM_Cmd(TIM1, ENABLE);	</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qianjin</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">houtui</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合任务二的部分，设计出简单的循迹算法</p>
<h2 id="任务实现"><a href="#任务实现" class="headerlink" title="任务实现"></a>任务实现</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;contral car.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;OLED.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	TIM4_PWM_Init(<span class="number">450</span>,<span class="number">7199</span>);</span><br><span class="line">	TIM2_PWM_Init(<span class="number">450</span>,<span class="number">7199</span>);</span><br><span class="line">	AD_Init();</span><br><span class="line">	OLED_Init();</span><br><span class="line">	  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	  &#123;</span><br><span class="line">		  AD_GetValue();</span><br><span class="line">		  OLED_ShowNum(<span class="number">1</span>,<span class="number">1</span>,IPT[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">		  OLED_ShowNum(<span class="number">2</span>,<span class="number">1</span>,IPT[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">		  OLED_ShowNum(<span class="number">3</span>,<span class="number">1</span>,IPT[<span class="number">2</span>],<span class="number">1</span>);</span><br><span class="line">		  OLED_ShowNum(<span class="number">4</span>,<span class="number">1</span>,IPT[<span class="number">3</span>],<span class="number">1</span>);</span><br><span class="line">		  OLED_ShowNum(<span class="number">1</span>,<span class="number">4</span>,IPT[<span class="number">4</span>],<span class="number">1</span>);</span><br><span class="line">		  </span><br><span class="line">		  <span class="comment">//直行</span></span><br><span class="line">		  <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line">		  &#123;</span><br><span class="line">				qianjin();</span><br><span class="line">		  &#125;</span><br><span class="line">		  <span class="comment">//左偏一点点</span></span><br><span class="line">		  <span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnleft(<span class="number">30</span>);</span><br><span class="line">	&#125;		<span class="comment">//右偏一点点</span></span><br><span class="line">		  <span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnright(<span class="number">30</span>);</span><br><span class="line">	&#125;		<span class="comment">//左转</span></span><br><span class="line">		  <span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnleft(<span class="number">90</span>);</span><br><span class="line">	&#125;		<span class="comment">//右转</span></span><br><span class="line">	</span><br><span class="line">		  <span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnright(<span class="number">90</span>);</span><br><span class="line">	&#125;		<span class="comment">//转弯</span></span><br><span class="line">		  <span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnright(<span class="number">180</span>);</span><br><span class="line">	&#125;		<span class="keyword">else</span> <span class="keyword">if</span>(IPT[<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;IPT[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">				turnright(<span class="number">90</span>);</span><br><span class="line">	&#125;		</span><br><span class="line">		 </span><br><span class="line">	  &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> AD_Value[<span class="number">5</span>];</span><br><span class="line"><span class="type">uint16_t</span> tixed_value1=<span class="number">1000</span>;</span><br><span class="line"><span class="type">uint16_t</span> tixed_value2=<span class="number">500</span>;</span><br><span class="line"><span class="type">uint16_t</span> IPT[<span class="number">5</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">AD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3,ENABLE);<span class="comment">//开启ADC1和GPIOC的时钟</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line">	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2,ENABLE);<span class="comment">//开启时钟</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	RCC_ADCCLKConfig(RCC_PCLK2_Div6);<span class="comment">//分频，分频之后ADCCLK=72MHz/6=12</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"> 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;			</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">	GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;			</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_8|GPIO_Pin_10|GPIO_Pin_9;</span><br><span class="line">	GPIO_Init(GPIOF, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3,ADC_Channel_4,<span class="number">1</span>,ADC_SampleTime_13Cycles5);<span class="comment">//规则组序列3的位置，配置为通道</span></span><br><span class="line">	</span><br><span class="line">	ADC_RegularChannelConfig(ADC3,ADC_Channel_6,<span class="number">2</span>,ADC_SampleTime_13Cycles5);<span class="comment">//规则组序列3的位置，配置为通道</span></span><br><span class="line">	ADC_RegularChannelConfig(ADC3,ADC_Channel_7,<span class="number">3</span>,ADC_SampleTime_13Cycles5);<span class="comment">//规则组序列3的位置，配置为通道</span></span><br><span class="line">	ADC_RegularChannelConfig(ADC3,ADC_Channel_8,<span class="number">4</span>,ADC_SampleTime_13Cycles5);<span class="comment">//规则组序列3的位置，配置为通道</span></span><br><span class="line"></span><br><span class="line">    ADC_RegularChannelConfig(ADC3,ADC_Channel_12,<span class="number">5</span>,ADC_SampleTime_13Cycles5);<span class="comment">//规则组序列1的位置，配置为通道</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">	ADC_InitStructure.ADC_ContinuousConvMode=DISABLE ;			</span><br><span class="line">	ADC_InitStructure.ADC_DataAlign=ADC_DataAlign_Right;		<span class="comment">//数据对齐，选择右对齐</span></span><br><span class="line">	ADC_InitStructure.ADC_ExternalTrigConv=ADC_ExternalTrigConv_None;<span class="comment">//外部触发，使用软件触发，不需要外部触发</span></span><br><span class="line">	ADC_InitStructure.ADC_Mode=ADC_Mode_Independent;		<span class="comment">//模式，选择独立模式，即单独使用ADC1</span></span><br><span class="line">	ADC_InitStructure.ADC_NbrOfChannel=<span class="number">5</span> ;			<span class="comment">//通道数，为1，仅在扫描模式下，才需要指定大于1的数，在非扫描模式下，只能是1</span></span><br><span class="line">	ADC_InitStructure.ADC_ScanConvMode=ENABLE ;			<span class="comment">//扫描模式</span></span><br><span class="line">	ADC_Init(ADC3,&amp;ADC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line">	DMA_InitStructure.DMA_BufferSize=<span class="number">5</span>;			<span class="comment">//转运的数据大小（转运次数）</span></span><br><span class="line">	DMA_InitStructure.DMA_DIR=DMA_DIR_PeripheralSRC;					<span class="comment">//数据传输方向，选择由外设到存储器</span></span><br><span class="line">	DMA_InitStructure.DMA_M2M=DMA_M2M_Disable;					<span class="comment">//硬件触发或者软件触发,该处选择软件触发</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryBaseAddr=(<span class="type">uint32_t</span>)AD_Value;		<span class="comment">//存储器初始地址，给定形参AddrB</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;		<span class="comment">//存储器数据宽度，选择字节</span></span><br><span class="line">	DMA_InitStructure.DMA_MemoryInc=DMA_MemoryInc_Enable;			<span class="comment">//存储器地址自增，选择使能</span></span><br><span class="line">	DMA_InitStructure.DMA_Mode=DMA_Mode_Normal;				<span class="comment">//模式，选择正常模式</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralBaseAddr=(<span class="type">uint32_t</span>)&amp;ADC3-&gt;DR;	<span class="comment">//外设初始地址，给定形参AddrA</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord;	<span class="comment">//外设数据宽度，选择字节</span></span><br><span class="line">	DMA_InitStructure.DMA_PeripheralInc=DMA_PeripheralInc_Disable;		<span class="comment">//外设地址自增，选择使能</span></span><br><span class="line">	DMA_InitStructure.DMA_Priority=DMA_Priority_Medium;			<span class="comment">//优先级，选择中等</span></span><br><span class="line">	DMA_Init(DMA2_Channel5,&amp;DMA_InitStructure);</span><br><span class="line">	</span><br><span class="line">			</span><br><span class="line">	</span><br><span class="line">	DMA_Cmd(DMA2_Channel5,ENABLE);</span><br><span class="line">	ADC_DMACmd(ADC3 ,ENABLE );</span><br><span class="line">	ADC_Cmd(ADC3,ENABLE);</span><br><span class="line">	</span><br><span class="line">	ADC_ResetCalibration(ADC3);				<span class="comment">//校准</span></span><br><span class="line">	<span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC3)==SET);</span><br><span class="line">	ADC_StartCalibration(ADC3);</span><br><span class="line">	<span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC3)==SET);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">AD_GetValue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">		DMA_Cmd(DMA2_Channel5,DISABLE);</span><br><span class="line">		DMA_SetCurrDataCounter (DMA2_Channel5,<span class="number">5</span>);</span><br><span class="line">		DMA_Cmd(DMA2_Channel5,ENABLE);</span><br><span class="line">	</span><br><span class="line">		ADC_SoftwareStartConvCmd(ADC3,ENABLE);	<span class="comment">//软件触发AD转换一次</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(DMA_GetFlagStatus(DMA2_FLAG_TC5)==RESET);</span><br><span class="line">	DMA_ClearFlag(DMA2_FLAG_TC5);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将ADC值转换为黑线1或者没有线0,红外对管从左往右分别为IPT0,IPT1，IPT2，IPT3，IPT4</span></span><br><span class="line">	<span class="type">uint8_t</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">7</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(AD_Value[i]&gt;=tixed_value1)</span><br><span class="line">		&#123;</span><br><span class="line">			IPT[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (AD_Value[i]&lt;=tixed_value2) &#123;</span><br><span class="line">		   IPT[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> IPT[i]=<span class="number">2</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_set_tim_compare</span><span class="params">(<span class="type">uint16_t</span> brr)</span></span><br><span class="line">&#123;</span><br><span class="line">	TIM_SetCompare2(TIM4,brr);</span><br><span class="line">	TIM_SetCompare1(TIM4,brr);</span><br><span class="line">	TIM_SetCompare2(TIM2,brr);</span><br><span class="line">	TIM_SetCompare1(TIM2,brr);</span><br><span class="line">	TIM_SetCompare2(TIM1,brr);</span><br><span class="line">	TIM_SetCompare1(TIM1,brr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PDout</span><span class="params">(<span class="type">uint8_t</span> pin, <span class="type">uint8_t</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        GPIO_SetBits(GPIOD, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin high</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOD, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin low</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PEout</span><span class="params">(<span class="type">uint8_t</span> pin, <span class="type">uint8_t</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        GPIO_SetBits(GPIOE, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin high</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOE, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin low</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PBout</span><span class="params">(<span class="type">uint8_t</span> pin, <span class="type">uint8_t</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        GPIO_SetBits(GPIOB, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin high</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GPIO_ResetBits(GPIOB, <span class="number">1</span> &lt;&lt; pin); <span class="comment">// Set the pin low</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM4_PWM_Init</span><span class="params">(u16 arr,u16 psc)</span></span><br><span class="line">&#123;  </span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">	TIM_OCInitTypeDef  TIM_OCInitStructure;</span><br><span class="line"> </span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);	</span><br><span class="line"> 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD,ENABLE); </span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; <span class="comment">//</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//TIM4通道2</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; <span class="comment">//</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//TIM4通道1</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;			</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		</span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_12);					</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 				</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);				</span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_13);						</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;				 </span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_14);						</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;				</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOD, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOD,GPIO_Pin_15);						</span><br><span class="line"> </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Period = arr; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Prescaler =psc; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_ClockDivision = <span class="number">0</span>; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  </span><br><span class="line">	TIM_TimeBaseInit(TIM4, &amp;TIM_TimeBaseStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC2Init(TIM4, &amp;TIM_OCInitStructure);  </span><br><span class="line"> </span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC1Init(TIM4, &amp;TIM_OCInitStructure);  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	TIM_Cmd(TIM4, ENABLE);  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM2_PWM_Init</span><span class="params">(u16 arr,u16 psc)</span></span><br><span class="line">&#123;  </span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;</span><br><span class="line">	TIM_OCInitTypeDef  TIM_OCInitStructure;</span><br><span class="line"> </span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);	</span><br><span class="line"> 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE); </span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE); </span><br><span class="line"></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 				</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOE, &amp;GPIO_InitStructure);				</span><br><span class="line">	GPIO_ResetBits(GPIOE,GPIO_Pin_9);	</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 				</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOE, &amp;GPIO_InitStructure);				</span><br><span class="line">	GPIO_ResetBits(GPIOE,GPIO_Pin_11);	</span><br><span class="line"></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;				 </span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOB,GPIO_Pin_10);						</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;				</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 </span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);					 </span><br><span class="line">	GPIO_ResetBits(GPIOB,GPIO_Pin_11);						</span><br><span class="line"> </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Period = arr; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_Prescaler =psc; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_ClockDivision = <span class="number">0</span>; </span><br><span class="line">	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  </span><br><span class="line">	TIM_TimeBaseInit(TIM2, &amp;TIM_TimeBaseStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC2Init(TIM2, &amp;TIM_OCInitStructure);  </span><br><span class="line"> </span><br><span class="line">	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; </span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC1Init(TIM2, &amp;TIM_OCInitStructure);  </span><br><span class="line">	</span><br><span class="line"> 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;	</span><br><span class="line"> 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; </span><br><span class="line">	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; </span><br><span class="line">	TIM_OC1Init(TIM1, &amp;TIM_OCInitStructure);</span><br><span class="line"> </span><br><span class="line">	TIM_Cmd(TIM2, ENABLE); </span><br><span class="line">	TIM_Cmd(TIM1, ENABLE);	</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qianjin</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">houtui</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PWM.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">leftforward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rightforward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">leftbackward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PDout(<span class="number">12</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">13</span>,<span class="number">1</span>);</span><br><span class="line">	PDout(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">	PDout(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rightbackward</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	PEout(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">	PEout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">	PBout(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">	PBout(<span class="number">11</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">turnright</span><span class="params">(<span class="type">uint16_t</span> angle)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dt = (<span class="number">8</span>*angle);</span><br><span class="line">	leftforward();</span><br><span class="line">	rightbackward();</span><br><span class="line">	Delay_ms(dt);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">turnleft</span><span class="params">(<span class="type">uint16_t</span> angle)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dt = (<span class="number">8</span>*angle);</span><br><span class="line">	leftbackward();</span><br><span class="line">	rightforward();</span><br><span class="line">	Delay_ms(dt);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h3><h2 id="任务五"><a href="#任务五" class="headerlink" title="任务五"></a>任务五</h2><h3 id="并联比较型ADC概述"><a href="#并联比较型ADC概述" class="headerlink" title="并联比较型ADC概述"></a>并联比较型ADC概述</h3><p>并联比较型ADC是通过并行比较多个电压输入值，将输入模拟信号转换为数字信号的一种方式，基本思想是同时将输入电压与多个参考电压进行比较，从而快速确定输入电压的数字表示。</p>
<h3 id="各部分功能"><a href="#各部分功能" class="headerlink" title="各部分功能"></a>各部分功能</h3><ol>
<li><strong>比较器</strong>：主要功能是将输入的模拟信号与一组预设的参考电压进行比较。比较器输出高电平或低电平，表示输入信号高于或低于参考电压。</li>
<li><strong>参考电压源</strong>：提供一组稳定的参考电压，通常是从0V到最高输入电压（例如，3.3V或5V）。这组参考电压可以是均匀分布的，帮助比较器进行比较。</li>
<li><strong>编码器</strong>：根据比较器的输出，将比较结果转换为相应的二进制数字。如果比较器的输出表示有几个高电平，编码器就会确定输入信号的数值。</li>
<li><strong>触发器</strong>：在完成比较后，触发器用来锁存比较器的结果，确保在ADC转换完成之前，不会受到输入信号变化的影响。</li>
<li><strong>门电路</strong>：控制ADC的工作状态，例如使能和禁用ADC的功能。</li>
</ol>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol>
<li><strong>输入信号采样</strong>：首先，ADC从输入信号（模拟电压）进行采样。</li>
<li><strong>并行比较</strong>：模拟信号会同时与多个参考电压进行比较，由多个比较器并行处理。</li>
<li><strong>输出编码</strong>：根据比较器的结果，编码器将输出对应的数字信号。</li>
<li><strong>结果输出</strong>：最终，转换后的数字信号被输出，通常是二进制格式，以供后续数字处理。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>STM32学习</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/11/13/%E6%95%B0%E7%94%B5%E9%9B%B6%E5%9F%BA%E7%A1%80%E9%80%9F%E9%80%9A/</url>
    <content><![CDATA[<h4 id="与非-与非式。"><a href="#与非-与非式。" class="headerlink" title="与非-与非式。"></a>与非-与非式。</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imged670f44e36b6fb5c2d2c3acc0a8d31.png" alt="ed670f44e36b6fb5c2d2c3acc0a8d31"><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_img5b4d8c8c55aa5cec97ba996689a9399.png" alt="5b4d8c8c55aa5cec97ba996689a9399"></p>
<p>方法技巧：用二次求反，引入反演律</p>
<h4 id="转为与或非："><a href="#转为与或非：" class="headerlink" title="转为与或非："></a>转为与或非：</h4><p>先求反函数，在整体取反</p>
<p>求反函数可以在卡诺图中圈0</p>
<h4 id="转为或非或非"><a href="#转为或非或非" class="headerlink" title="转为或非或非"></a>转为或非或非</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113171330964.png" alt="image-20241113171330964"></p>
<p>最大项之积 取反两次即可</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113180818326.png" alt="image-20241113180818326"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113181223584.png" alt="image-20241113181223584"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113182327370.png" alt="image-20241113182327370"></p>
<p><strong>求最小项之和的对偶式，变成最大项之积，里面的项的下标为2的n次方减i减1</strong></p>
<h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113192709243.png" alt="image-20241113192709243"></p>
<p>npn,指向基极，pnp，指出基极（类比mos管记忆，mos管中，p沟道型指出gate，n沟道型指出gate）</p>
<p>三极管工作状态:</p>
<p>基极和发射基之间形成输入回路，但电路中实际上使用的是ce（也就是集电极和发射基）之间的电流回路</p>
<p>这个图的信息：</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113193307206.png" alt="image-20241113193307206"></p>
<ul>
<li>发射结，集电结 的正反偏指的是 b相对于c和e的电压 </li>
<li>当b电压大于c和e的时候，直接饱和，饱和的含义就是 ic 不会再增大，因为电压已经比b小了</li>
<li>当b的电压大于e，并且b的电压小于c的时候，没饱和，正在放大</li>
<li>当b的电压小于二者，直接截至</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113192322430.png" alt="image-20241113192322430"></p>
<p>nmos指向gate</p>
<p>pmos指出gate</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113194438607.png" alt="image-20241113194438607"></p>
<p>G极(gate)—栅极，不用说比较好认<br>S极(source)—源极，不论是P沟道还是N沟道，两根线相交的就是<br>D极(drain)—漏极，不论是P沟道还是N沟道，是单独引线的那边</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113194452674.png" alt="image-20241113194452674"></p>
<p> <strong>导通</strong>电流方向的判断：<strong>能与中间那个箭头形成闭环</strong></p>
<p>开关特性:</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog_imgimage-20241113200142586.png" alt="image-20241113200142586"></p>
<p>nmos gate<strong>高电平导通</strong></p>
<p>pmos  gate<strong>低电平导通</strong></p>
]]></content>
  </entry>
  <entry>
    <title>数组广义表</title>
    <url>/2024/09/18/%E6%95%B0%E7%BB%84%E5%B9%BF%E4%B9%89%E8%A1%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1e078257c80c442780d3e1114b2a4760cb7138dc63ee2b4a7fbb43034a574d61">fb736e647d9d25782ff93cbaa84e358411287b438fbda9e201214532c54e833ee6e72d3b1ece35783fb462bf945c81de5ea842014a8e62d22805fff815e4dbd61af7527bfaa594fb9beca675475cf349391c1dff1eace0aa4a95c1f6123d424200cd7df423d6aa05ed1185cefabc8f615d3e4a756db1cba2d075a5c037ef92b422c652af54d81329414fd5cd6090ddc713963e6c5d3f966598ec569036d69c13422951f04f7f4559a4679dd009849f3d92084e68dd37ef6d1411f16d754687b1e96bb93e9761564f066ae8707974a90182c75a473321721f03ca2b69aacbb1761903482b57beaec92aded178f5e1b1b6c436f06a57d333d2fbf6e50b9b5167fab0eccb419101b5c5870de55b6cb28f2541524d01db4988b7ae7d774fa7d3d3a9cc0db46b500cb39e2d072f3784e0b1bea07c6f84e00d7b0b5e7603d662b8fb78f3b808f7541123e527231ddeb91691ea29d661dac04de3b0103553c0791ef80be4216d1053e5f3e98f17a7a36c0f9cd3b5a6a56e75bbecb6d525c4e398462a194b01f38a85b39f54b2238e3474cf6f3f7ab5c7a60a0c82c56ae58e1c32ce1365ba8fc5f6d0861e00b7d78d3c6841e558665c597031533737f628c49e93b26bdd44124574a8cbe3b59da147807ff48f4ce7d78a2ef7669c43b8dd728a54d4f29f475ce23a248f5303d6c73fc145d5e98e49dd09510800af371884a43e625b81a8837fb6097331c6a82d6e97250b7df07f4d0e45673cac05f2febb9ea2f8e9ed9239c33a446d492dc1666aebb5412d31bb6c62e65194454f48a4c2f040f71048301df07b07cdcea2c2e35ac2a408fb9c2d86fba3ef483113ca50352cb93db3df2411a6dd8d0a0eaefa5c75e39f219b34c47b842ab791ff9f8626fd98c94ffe754521c49a3bdfbd252e66d4ce7371452602edc70e111d1b3b5cd29ee2a477529d60267d03262999b506fa9d7f7b4f3c4edb8fc2c4f5c1d10ee0bd344e810be7934e1e522d2f6855cf0eebbe755250a5261d221215ecaf36d8cc08648bd2883e98c53d2e98f90bd866b872185a5709b9bb529f39dc87f8fa4213319adfb6e99da638e63dbf780ac0a4c38a5b916d1b5daf4626b6ee6f1756fe15361837eb0716c07aad0658dd8f0840c2badf1bb6d5cb799e1b324b5d785e7c3470b0882c3a288d8a6e83752e158091f5e7018583587574b90e2aa0402e0ff7b53d2cb62c779b5e84f8dad16a5d3a44c9c83da1085e94400c4a5273e392b397cd8c424855cb2504cb4e9774b1e4cc6d25fb9dc41ed8a71d0588700f160b733131bcfc23299b6564842c693478b9fff37b3bb6d3ab87992ac16e87c04915532a20004f9e34bd09a682b313431acdd55869098b68c50f9e3b16de99c26353321673d4816722f0c0ed00b4e5eddd362881a2b50a4a58246573608d2088a2fc75416a496142b70bfa1d0fe1a888f6c91009f14d5336b0a96fe19b87b71d69027f36d45b196ef9318b80c9d2d16fdafbde7ee57e571ac60756090b0322be985767cba3e8e5f4c9c2603e4a82f61c7cb42b062260fdd3a1d9c2a8d3e6171c8da3b946fb46017520fa3eb106d351d396b414556e9b1a0077e8a8393618bd937af670399e72ea418f16a3a03aedeb9464d5821a257cea623a727d600acbec5d3a24dd18e6e131a90b958f846fb156b068d92c685b1841933343e1a90cda3556f08ab59746346a31ba02e053f427bfb8d21506821dca5d0646b8a02510f20f53cb635eaba3ca2423c4bccfda96f6a989b8b6c8446d20382b957f14a102accbf687d5000566023c5b6d9e8d8e449ac525cc413a8983d52f22bef8e1f001d6d8aad69d7d5ab8151f47bc6504c483b35605a350fc21cac327fa7a017de264954c45aba5729648673182a37d7989f598553f0ee8ea6286684fdd6b8f3bdbf180041eefc31b2b674325a530b9c82dae109ff14b88d1710e595ff269ee4e9150e1fd125cb12b4e9133729c3f7250e3e8fb06c2cdfb9d80d1fdb21f10f3fb310145e492e61e3f2bab3b4f44a3790a3e904da1f9c596ab39f57c24b81e1530dc24fdf284cfe35d6046e76748f591b8a52248c83b9f4b7cd5aaa017567e539e249b19f1236c7b22976654ce59d3048e7bb3189823bb51d300ff1afe4bedf8c39e0c526d8dabf50c0f968a9f9021d83971f7a12a49f7cead2f01c0ca93bc2e08e5a40c8c1d27ef0ee3ff6eddcbe68ca337ce532f0271b2dc11c049ae603b69b504e865a8737f3fd07ef00700c52e0236480d2b237a292d9d7012d4f29a3cfa0f9eb5eb5c4014225225976ddf9c3959692b9680bb741056697e2b2ad211a355db0ec1fdca891ed03e31ef2264ecffdff2793e4d3fbafc78529edd341c69f3b2f0513a620c2371146beb34d1556f70c6ae402debc6ea41d94c0471d2747c262a2193960f9b701f4f59ce48fce81ef96408a126d0a02d52ffb85735fd1055c464bd273a6c055a7dc4511d22f836b9809677f0d52e9534cd6d32b0456b206a8d072c01999621a94714df8488a3cd213a0184437136346358f92d198fd46e763a2011291a7ec1fc0e45167fa81fc45a262608afd478e4f315141003a50d9112430fba025949ccb80b58589d3807fba675d7c1f5af7bfad033b5a3f302a1e7c24fee47e5bfd4afa3fd51c936f27b0c9a65a5d43a9f257ebd9d4dd638e08d290d27774df3efd8abab2397755b699138ae9b7d3f49a9d1e3acc6fc69452acea4bf7b10b1844037db04d0717995e3486e660bf62f24622fcfa4e44dc922a8e2b0b7145f556b8c1a77f1e1ef0d22c1957c81b155021f747fdccdfcdb3aa596e1026d21827d3799abb6be13e2bad4c987958fe9c092438bf24731b8a7fea0975ec619f5eaf281093e4e876a72e181b4afd0e1fce3891a5b2cea3697e0a33df8162b76f2b9e345d98d5bf66f3e5d74983828b209c93e72a1391a7609be7e6b4cabf322a0a5dc01a6868d8bab935e91a65c4614c3a52ebcd9ebd4de527d9ee7bed4509abbeea8e7d4f31ccc359d53bd1a179418aa77f182c3f93d2cb22bc3e935dff4dc7d43bd603d6239fbe2dca3a7544caa95e0055416b206d82d4968c3349ef00c01f3466d4b1a440b5cdd523b9298275af81eea64cb48a690b76d832eebc7e68ffe8dd01eb6612caaf781dc7f33ed1c5314edef990a46dc07aeca2386a65fc44de95c468dd79e0c858e46b81761321b87a97168993ce7cdcdea37cec43caf711b8d59b2b2855137e07ef18a8f0273efaec67effe0ab5d6cef89fab350e1e23f445f678e89c3d337c52ba4132bd6590f0c73f2ac9aaeb66925decdae96fd322090986d5b18e3834ef21855b6a66f60e4c280aa51bb2c089352e7d5700e73660bba2e011c7d4f6b8ed69793f929d14245c5cbe84db6333a4d96445de39cff3b3d50fcd6ce600a837883c401a9d9fd7c36f6ec87c77085eaac1e04738201d2d5121b6700c14174cb99665d0f4a0f5fb28be5792057619720f684cbfdd0250f4e910e95c3c90148b181db32e793d9da52629c0382c95796414878e84ff6fdd1b95b526f19d408820c0583092bca41aac6bb9c82d2c519ba2f1826de6df61a465829027162ad8198acdf3877cb2f2324d3a8bcc46c0710929770893fe85ca99c2cadf3dec3ea3e5523cc317bd4c7ca53eccb537fac8afab2b78834812894992b21bba938469db2cc1c8f665743cf5460e2ac1707e9951be94a106491c2582ad3448fe3c86748788bf265b473444d93c1eaeecc5db4640d1fd038e97a8e4be13a71659ced087e1687a362cf6e44eaf5780e8ef9dafde3c739beb4e43c70dc9daaa9b1e46964ebf0309ad318f3f95d5324ba4053dce4b38eb48d917d6daa385d54e4b7431b1c7b76e40126da59cca955c8d6095cb0f8b96c251bbe8bc46e40c95f231be08326065608121df9c90fb9bf884721112b29bd23fbe3c75344c1441b1bf5e40dc1c2957fcb7430d836195ad44d44dcf289f2ba2161d0acdede56ba53d80f2e5607c018d4db4272c5751f0285c36c20c8b43e7d575163002f48ce4f7dbf1c36f5957f9bbf5868b5f887e0a82e32ffa7875cafa4f1ee9029b7d745b77d18db6cd2f914bcdc8346a3bdc637e134811b40e6fd5aa2d7a6bfe829dcf72c6b57b7ab0765cc8e97d25332b485f534cfbb7e6a97711140fcdb8b526df799e08fd4c5d2623090554f4c70824776bf6f159d41282f183cd6a012dfc8ed17d306705533aeffaa85a7f41dc2095aeaa20950e39055ddd6d6846ef4e9579b793d84c9cb90f19fab1da32726db8d150ca517eb90b6a58547f7df0d038ab80c333261e0d6ffcc692ac6c51097e510a04bbb2e33eb60b6872f0ef19ca46fc66d036fa0febad7b3b869f0944a75d61734fd468d444d83c10db68461989dd69beff0d221c151469ddd30cd5cf8be9cf4ecf8049acfb3bb686f86aea25cdf31d5f23c847cdd70144c2a568489f29f8738c538ad3ea6c93bce6e362e9ed24b04b6cf1d0631484d0152f4f3196f5211870d4199fe8bb5a919f23d23d515aacc778e6c1c460c37756708afdcaca254fae5af4561fa9d5ea2594469327fa9383b4a0b6944990ed44d3d55d49baddb72b7c4212a2eda98b58f04d2d54df49db9124a465cbf89537712d63ef1438198597a851a205289029030e04688baf5be4bc771b243b04e69e30aaad13393d2aaeef359f2534e405fd100774c91a1473207460369fcf3d1bf8ca6548092daf8487fcb59ee662c0642808fdd06eafa2cb6359ed88bc1ea86be63d1a43b445112fd29224ad58178ba584a06ed08b34c086ddb440a24d63d8be4180459a1c36643157ad57ea7de4e9ac1b680e0469b70e17123c7ba363b0fe908fde9168de2dffeec0f3f71e051b5b1b178c8fe02588dfff5d717743fc6c20934ff2af66a78e573f0fdc31109a2adfb4fdf643716c28d920001efa90e988f0de204135bf8578b2263a8d4c810246126ac87e3f5f4ca6f67735541fa10c28e19db02b0b4686bd15effff786d2be08919e6201719d5e619821460905fb3173ba9afa4073aa554878adeb3d1c0c2935217d00c43b0a0f8e85c4df8d6e9ce5cbd90c6108ca187f7406185e2431d75754f17b7cf1b83d4f4395b7f301ac95f0e232763ff899c9c6e8c53c3bba23f0e27d7df0bd4b76846d9b6f20ba89b15e4b9fff8eeaec2b44cda286862d1edc072a0d020bb49d2f7022d9a6f9e2ef99426b89c2254469e53f2ff665a0b987b9121d19da90fc38d5d542d48ed78085f224642420c4fd0707c1c049490ddcc6daff3dd5cc5097daa4093c3853ebe2c89da88d44d703b565606545ab1ef0d44639b6d9251585c6c6e99633b16ae8b035fa973c76de28d9a9ad7f808ff43120d5c4f5184399ecfd24dd04d0cb3f731621a49fba841f041cdf3c3f4269488ea467f24bcc55cc5e36ecb8a6172897eaf83042ca70f938631c7ee7422223c1a3733b662f2e8478aed980524cc1d072f4b8055d28b6a8dd13409a4821a0269f13287580379d10ecbf745786496ec4f11b30090fe4c8565e76c56d88dcabe46fe2242df6ee44c2f48b4e6ef001adb29ef234101c5191e110931e9fbdfc84ba591e0d872b9546f88c3d8be4ef236787e70a65384ab2327cb396eebbae6f826c09661a32b25968a7bbf81679c6975f7f975bb525a36d3bec691d4e46142e877e7051c47babf61c4e64d45355bdf94f2b8abe9b7b5e3e2fe186e000b57bf314e2d73ccc5dbb288d10f455389ef7febe7ba4cd1a14a3ce070bc59990b100d0ba8bbb0c5685f6befa24449efcb45e8dee73d07f4bea7d0dd4f2e1276adbd75bba1e8b0f0ee87009d1aa26000165a2b7cf9194b5d7b1b85b7c2ea10b099d17dd3fd0358dc404ce39d5847517acef0ea77ed257ee229b3234db1dae07097f73ae37f9a7ac566f87aa5f45827eef8ecef4cc765c87ef74f443cfd6fc923a22dedabedbd582a3c5de112cf95fda6db49cb6d839d1bb6f67687a38487623ed326068fa571f4026658a813f79e59a2b908b23afeb227bcadde25bfedbf152f8a8655541e7f0643dd00692bb901fea05efb56ed8ffc0a9361a02a98e02526153916ef5145037c534421342a738ebcade4470dc747ff9a84eb45ee90b69c5116753a557c6adc275d9d2e726ea4f27e8e6e6d6f7953f03ee7dd99ea9166cc9e84a92a72c18afce3de44a8e24af7d47f678006c45f8a33ad52a653bf623f1480126d9d27026aef41462f76e30c9e7eefcb20811025817d440ab60864fc5b50fd38f6cdaf6526ccf28b8eb5895c4d94c8e271654731bd596b442672936951e8b52464e52066a72830abefa79aaeb38d710aea931eed612f06644b3acdad87d7728a0e9a8758356561e71a470e0ef0a969a96c91e3255d8c6a391596ab4a6ee4e82d914c18b0264f5019755c7e9248660a3d578a92f48b12795dd4fae0b8e14006483ab7144f2ca5a477b962103bff02e517666c4568a36beed9bc50b9d38c10cb8a2513ae312d067ac2f635d1de77f844c22227d1f73239e411bbae1bb106aa26c26fa40aa02f2ea4aaa17b2377641724889b177f544927a61a1e9b42782b385684aa65028a816bfa32e946493c175ca4acd6364033979ee1c0eb3acef91d778862f1a587fb0e7f2ba73e3915633be8d31e5b986e68f9a7b1fcde41131aa297783ef7a018a640ff9c23ba7519a6f432a03aab7ed9d9ae32e19a0f0efdbbb8ad88d1869dc66f252a6af66de3057400616b7cd2cb8c87fb22cf5c46a7480a62bf194111b8cd8ab1d7270ff16d70e7843e14d40a4e540df0668170890dd2a0c90e1f1fedcfef2f7e6ae1d0b310b7b1f6d43bf4ef26d7a395a88537d60de919439d5cfaa99ab05b2a0f958a4ccec9422cdf549c853020c5f140fb8a6a695922f1ed31ce152b7f2198df02f73057e34c0ce9073168b39757edfec02d5e520e361c31ca0013af8ddeb3161e590a8a4bc40089d2d806ecd41604f83c2011279f6383a9b9ddcfe06bd7ff4f5a7beb50814faa3c04565cc14fc20ca09da7081815f64ab8c1dcba5a17160254059b10291e24cd8df073a147633a8a3b2134cb1971820910707dc19e2d38e2e0880c14d28b39b6f37cecbfcea69bdcb3ce159fd335ab27c2bfa54b9f6e60aff6696b307a2dbe7a5c98c58c9c321329d7932e1ffc9be84562da8852120742925f82c1b55f42b1128822d4bfafd11731e6acfc7882261de30670ea2f66b0bdda0045a3053631cd9d48353ba861f13130fa46dfed6de3132cbdf01d39e84957bc579537b2d26f7f9512818bc20597fae19bd1a7a4b3d3f9b42a183c49ca2d4d64e186c304277053c1a9cc1e38fff08cdfc1b83a345e180a584e93c77d0d96255a5bf4d9f53161ec0bd4ddcb22c8340e73154a66e254ef58bf1bccfddca97523784fc950bbcd2bdc89a5ec8879ca490808a9ad9fbde21eae40cac0a0068ef88b833ecc8fa5cd1d86c272fb68bad17766f39ad7656f8bc8e069f8c1346886d5678501d79db029f7658bf4daca0297ee9f9f6bd41749117e14148837027b655fe8c4b67cef8073954bddca44c41df775a3075b7001f03246970c3108ec58647f3ac817256016c6c0c1277cd6e2e137647384d6b6f32bc87ef0fe2be83e74e99b5acbae74a47518e8a90ff675d0fc78f6d8884d85415a47c76ae35f739a202757e1004dec9e019e1064a664b23fc394e6f651c9bec40e3eae3de90ac547ea30b9e4c150030d04b7a18a17faba20e00beccef97c43f966180d8ccf006cae4f539e24b1093fbe5d1dffc6b38f0838b7bc9f8177f7a5c271f745746942ec8fc1a0caaed761f017ce296a7d97ec396c9189feb187e24d0bb40979adc311586fd3d33ebb0fed7bb43e90419d9cde8faefdcf3fba13ac2c2622605fd796a5467f7a7d3f9992ac1a25ee71b4b07dd36a5b7295fb97a2240ecde8bf44400159d8841f3978123a1a1be94d110453f9c55475f8f0cb1c8ba116d4ed04417e56ec0e66551c530d3cf946912cf58b8a3eeeb1b544569693bd65261424f72ff789cb0b79931ff71015509113073bd032a6bb86268521a451a5e2d37340b702a406da55521ca712df7667c6231ac9069b73def97aa6593d7ada119d31002419dad05a899b6685a6a8ddfad5f536217e3250e04f24c31671a3987e8b14ce0173e2bacef86d8c89ce4519ab55c70549b13b6b750ea6059740b3174480a9a7723ad415b4a02a52ec8c50f0e884460147c5e4a07cb00555eb2ebf0032e2e70e766abb061b2747634d53d29bdf6998b482caf1d077529776f06c6172a1214849c1c8a1048db9164ff054571e9686c1802b09d58f80b27e9bcfc87ad9484e6dac606d8bc7e3c928ed709e210459826465f93d16136eca8ab8c161971c548e1ae44c8092873cf86fe56475e7a7a3c8ec228020a1d6f13529001ada3ef973029d316acfc6e66ae408efda978b5cd17766dc9abd428267385d20e00b1d8842b911ddf971aa545e1e8f7a041c48b94cd8cf39c86050bf132dbc01df125244cdcda05bf40381bf98c49fa6cd5fe84154b5b67e8f04405b510d4b87483800fc811f0eb7ec210b6a4dbdc497dc797cea46d42b7897bc42a1f9729c07f132cddd12732768dd8d8d3daf8321ec600dd0db817168c2ee23385162d1d89f92093bc4d91775c7178c2687dd9370b63219df449d0329be8f99177de94c7ce1892b327db6d14e222f5d424f1b977a21feb436d26506cb1517de31d168f3211764de1d8efe772be0103db630bf36f920c1adfa891d8c2b3feef95248566090d6d70772af0ed257d799d10ecc9a52583cf000205700cc536fcecea345c24dafbbd2f25b60586353104c734cc5f9e8f04111ea30639ae785ac8e3ddd44b208c002a71e3b95c100a1b7a9af7510fad6af6b3adccde6eeb0c35f9788d73559007d6e116d89edaa7afb85736283f65c7f1b0b61ec799aa5b3388de208934d2e84052cf9429c0e508dbe942c8128f3c7d06a93011073df4334c4bb0b11f3cbb3c6feb72d82daec6ea9772617d7d1f57e3c44c2633498f9f6c81ef83dcfc921b59f94db241b99834fc16eeda2193045ba2188294efcb178e2db49ecb5d3476903c3f8122d17d83a217cddedcd971be60f76ff4e9399cc0547beae2c6b49c4c8593d11fc454891fd70af6fd30e59d3c85d3f6f19533541e1dddc1d28f569ddb92ca8fe323599cf46cd55cbf3290faa04e4ccb0730dcd0787979b3f38e963b03916b2debe447ad3e78918bfbeeb66dd22153c5d2f2b8029656868c8f6a7ea956c6dfaea355ceb05e18e510fa7c64b3b3ee1e8f416fcaa7d31d626a57dd6d7a1652f4047ab6af94091d18f1daab1d84604a395ea913545d0abf803cbce828f91ccf1914d5a7c42b3f9f705dd2cc3413d2f211b6730950223c2ba21befbe171</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32学习笔记001</title>
    <url>/2024/10/12/stm3201/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="stm32学习笔记001"><a href="#stm32学习笔记001" class="headerlink" title="stm32学习笔记001"></a>stm32学习笔记001</h1><h3 id="新建keil5工程"><a href="#新建keil5工程" class="headerlink" title="新建keil5工程"></a>新建keil5工程</h3><ol>
<li>装好keil5</li>
<li>project-&gt;new..project,选择目标文件夹</li>
<li>选好后把stm32库文件中有关启动和各种库粘贴到starup文件夹下；</li>
<li>在魔术棒-&gt;c&#x2F;c++里面，添加define 为USE_STDPERIPH_DRIVER,，并把library文件夹添加到includepath里</li>
</ol>
<h3 id="寄存器点灯（任务1-1）"><a href="#寄存器点灯（任务1-1）" class="headerlink" title="寄存器点灯（任务1.1）"></a>寄存器点灯（任务1.1）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    RCC-&gt;APB2ENR = <span class="number">0x00000008</span>;</span><br><span class="line">	GPIOB-&gt;CRL = <span class="number">0x00300033</span>;</span><br><span class="line">	GPIOB-&gt;ODR = <span class="number">0x00000000</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若要熄灭，将odr设置为高电平：</span></span><br><span class="line">    <span class="comment">//GPIOB-&gt;ODR = 0x00000001; </span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="comment">//这里下面要有最后一行空行，否则报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码解析：</p>
<ul>
<li>RCC-&gt;APB2ENR &#x3D; 0x00000008;</li>
</ul>
<p>​	RCC代表寄存器，APB2ENR代表APB2外设时钟使能寄存器	</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241012131906762.png" alt="image-20241012131906762"></p>
<p>​	要想使用各个<strong>外设</strong>（定义见文末附录），就要先把这个外设<strong>使能</strong></p>
<p>​	有官方手册可看出，GPIOB口在APB2中使能，且在“3”编号上，把3这个编号赋值1，其他为0，四个一组转换成16进制，得出0x00000008；</p>
<ul>
<li>GPIOB-&gt;CRL &#x3D; 0x00300033;</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241012132818313.png" alt="image-20241012132818313"></p>
<p>GPIOx_CRL:       1.x:GPIO 后面的字母   2.CRL的L:LOW,代表低寄存器（H代表高）</p>
<ul>
<li>GPIOB-&gt;ODR &#x3D; 0x00000000；</li>
</ul>
<p>​	<img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241012133231074.png" alt="image-20241012133231074"></p>
<p>ODR的O:output</p>
<ul>
<li>运行结果：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241012150653517.png" alt="image-20241012150653517"></p>
<h3 id="库函数点灯（任务1-2）："><a href="#库函数点灯（任务1-2）：" class="headerlink" title="库函数点灯（任务1.2）："></a>库函数点灯（任务1.2）：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//pf11</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line"><span class="comment">//这句代码相当于寄存器点灯操作时的gpio使能，这里选用gpiof</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructurePF11;</span><br><span class="line"><span class="comment">//创建一个GPIO_InitTypeDef类型的结构体，结构体用于初始化gpio的各个参数</span></span><br><span class="line"><span class="comment">//分别是 mode ，pin ，speed，这三个参数在库文件中均以枚举定义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	GPIO_InitStructurePF11.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructurePF11.GPIO_Pin = GPIO_Pin_11; <span class="comment">//11号引脚</span></span><br><span class="line">	GPIO_InitStructurePF11.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//速率</span></span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructurePF11); </span><br><span class="line"><span class="comment">//初始化gpio引脚，第一个参数是GPIOx（实际上是指针），第二个是结构体初始化数组的地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	GPIO_ResetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line"><span class="comment">//设置输出为低电平</span></span><br></pre></td></tr></table></figure>

<p>涉及的可选参数详见附录</p>
<ul>
<li>效果：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241012150710945.png" alt="image-20241012150710945"></p>
<h3 id="GPIO输入输出（任务2）"><a href="#GPIO输入输出（任务2）" class="headerlink" title="GPIO输入输出（任务2）"></a>GPIO输入输出（任务2）</h3><h4 id="读取输入的方法"><a href="#读取输入的方法" class="headerlink" title="读取输入的方法"></a>读取输入的方法</h4><h5 id="读取输入寄存器（IDR）"><a href="#读取输入寄存器（IDR）" class="headerlink" title="读取输入寄存器（IDR）"></a>读取输入寄存器（IDR）</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取GPIO输出的方法----读取它的输入寄存器</span></span><br><span class="line"><span class="comment">//即使goio是输出模式，IDR也能反映它的状态</span></span><br><span class="line"><span class="type">int</span> pinState;</span><br><span class="line"></span><br><span class="line">pinState = (GPIOF-&gt;IDR &amp; GPIO_PIN_x) ? <span class="number">1</span> : <span class="number">0</span>;  <span class="comment">// 读取 GPIOF 11 引脚状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2 ---- 库函数GPIO_ReadInputDataBit（基于输入寄存器）</span></span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)==Bit_RESET)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Bit_SET:高电平</span></span><br><span class="line">    <span class="comment">//Bit_RESET:低电平</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="读取输出寄存器（ODR）"><a href="#读取输出寄存器（ODR）" class="headerlink" title="读取输出寄存器（ODR）"></a>读取输出寄存器（ODR）</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接读取输出寄存器（ODR）</span></span><br><span class="line"><span class="type">int</span> pinState;</span><br><span class="line"></span><br><span class="line">pinState = (GPIOF-&gt;ODR &amp; GPIO_PIN_x) ? <span class="number">1</span> : <span class="number">0</span>;  <span class="comment">// 读取 GPIOF 11 引脚状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h5 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h5><p>IDR反应实际物理状态，ODR反应代码设置的状态（不一定是实际）</p>
<p>假设有一个 GPIO 引脚配置为输出模式，在代码中设置了它为高电平，但这个引脚连接了一个外部电路，外部电路强行把这个引脚拉低了的话，二者的区别就会显现</p>
<ul>
<li><strong>IDR</strong>：反映这个引脚的实际电平为低电平，因为它受到了外部电路的影响。</li>
<li><strong>ODR</strong>：仍然会反映你在代码中设置的高电平，因为它表示的是你通过 MCU 设置的输出值，而不是实际的电平。</li>
</ul>
<h4 id="延时函数的实现"><a href="#延时函数的实现" class="headerlink" title="延时函数的实现"></a>延时函数的实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// SystemCoreClock 是系统时钟频率，比如 72 MHz（72000000 Hz）</span></span><br><span class="line">    <span class="comment">// 配置 SysTick 每 1 毫秒触发一次中断</span></span><br><span class="line">    SysTick_Config(SystemCoreClock / <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint32_t</span> sysTickCounter = <span class="number">0</span>;<span class="comment">//定义一个计数器</span></span><br><span class="line"><span class="comment">//使用 volatile 关键字是因为该变量会在中断中修改，防止编译器优化</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sysTickCounter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sysTickCounter--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意，SysTick_Handler函数在库文件中已经有定义了</span></span><br><span class="line"><span class="comment">//但是内容是空的</span></span><br><span class="line"><span class="comment">//因此，在此库文件中声明extern的计数器变量，然后在库文件中修改此函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint32_t</span> ms)</span> &#123;</span><br><span class="line">    sysTickCounter = ms;</span><br><span class="line">    <span class="keyword">while</span> (sysTickCounter != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待延时结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体过程如下：</p>
<ol>
<li><p>sysTickCounter 被设置为延时的毫秒数。</p>
</li>
<li><p>每 1 毫秒，SysTick 触发中断，调用 SysTick_Handler() 函数，递减 sysTickCounter</p>
<p><strong>因此，起到延时作用的是SysTick_Handler() 函数</strong></p>
</li>
<li><p>当 sysTickCounter 减到 0 时，while 循环结束，延时函数完成。</p>
</li>
</ol>
<p>SysTick_Handler() 只有在倒计时中每隔 1 毫秒被调用一次，并且只有在 sysTickCounter &gt; 0 时它才会递减计数器。一旦计数器减到 <strong>0</strong>，SysTick_Handler() 仍然会被 1 毫秒触发一次，只不过它不再执行任何递减操作</p>
<h4 id="总代码如下"><a href="#总代码如下" class="headerlink" title="总代码如下"></a>总代码如下</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    SysTick_Config(SystemCoreClock / <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="comment">//初始化时钟延迟为1ms</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint32_t</span> sysTickCounter = <span class="number">0</span>;<span class="comment">//初始化计数器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">uint32_t</span> ms)</span> &#123;</span><br><span class="line">    sysTickCounter = ms;</span><br><span class="line">    <span class="keyword">while</span> (sysTickCounter != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//定义delay函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//	RCC-&gt;APB2ENR = 0x00000008;</span></span><br><span class="line">    <span class="comment">//	GPIOB-&gt;CRL = 0x00300033;</span></span><br><span class="line">    <span class="comment">//	GPIOB-&gt;ODR = 0x00000000;       //寄存器点灯的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//__enable_irq();  //启用全局中断（但是不启用也能跑）</span></span><br><span class="line"></span><br><span class="line">    SysTick_Init();<span class="comment">//初始化计时器</span></span><br><span class="line"></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</span><br><span class="line">    <span class="comment">//使能GPIOB</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//	GPIO_InitTypeDef GPIO_InitStructurePB5;</span></span><br><span class="line">    <span class="comment">//	GPIO_InitStructurePB5.GPIO_Mode=GPIO_Mode_Out_PP;</span></span><br><span class="line">    <span class="comment">//	GPIO_InitStructurePB5.GPIO_Pin=GPIO_Pin_5;</span></span><br><span class="line">    <span class="comment">//	GPIO_InitStructurePB5.GPIO_Speed=GPIO_Speed_50MHz;</span></span><br><span class="line">    <span class="comment">//	</span></span><br><span class="line">    <span class="comment">//	GPIO_Init(GPIOB,&amp;GPIO_InitStructurePB5);</span></span><br><span class="line">    <span class="comment">//	///点亮GPIOB5的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化gpio0</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructurePB0;</span><br><span class="line">    GPIO_InitStructurePB0.GPIO_Mode=GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructurePB0.GPIO_Pin=GPIO_Pin_0;</span><br><span class="line">    GPIO_InitStructurePB0.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructurePB0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GPIO_ResetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line">    <span class="comment">//³õÊ¼»¯GPIOB0£¬ÇÒ½«ÆäÉèÎªµÍµçÆ½£¨ÁÁµÆ£©</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructurePB1;</span><br><span class="line">    GPIO_InitStructurePB1.GPIO_Mode=GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructurePB1.GPIO_Pin=GPIO_Pin_1;</span><br><span class="line">    GPIO_InitStructurePB1.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructurePB1);</span><br><span class="line">    <span class="comment">//³õÊ¼»¯GPIOB1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//pf11（让它常亮吧）</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructurePF11;</span><br><span class="line">    GPIO_InitStructurePF11.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructurePF11.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructurePF11.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">    GPIO_Init(GPIOF,&amp;GPIO_InitStructurePF11);</span><br><span class="line">    GPIO_ResetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">    GPIO_SetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="comment">//判断GPIO0的状态</span></span><br><span class="line">        <span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)==Bit_RESET)</span><br><span class="line">        &#123;</span><br><span class="line">            Delay_ms(<span class="number">1000</span>);</span><br><span class="line">            GPIO_ResetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line">            GPIO_SetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line">            Delay_ms(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            GPIO_SetBits(GPIOB,GPIO_Pin_1);</span><br><span class="line">            GPIO_ResetBits(GPIOB,GPIO_Pin_0);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>输出演示视频：</p>
<p><a href="https://lark-video.oss-cn-hangzhou.aliyuncs.com/outputs/prod/yuque/2024/44392709/mp4/1728726330624-46c344cb-e02f-4a81-bc7a-e7395e288175.mp4?OSSAccessKeyId=LTAI4GKnqTWmz2X8mzA1Sjbv&Expires=1729702347&Signature=Z%2F%2BjsbCjdoHoJVjojl2fqPv47LQ%3D">点击查看视频</a></p>
</li>
</ul>
<h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><h4 id="一个按键的"><a href="#一个按键的" class="headerlink" title="一个按键的"></a>一个按键的</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint32_t</span> sysTickCounter = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//灯的初始化</span></span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//按键初始化</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource0);<span class="comment">//将GPIOA0连接到EXTI外设</span></span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	EXTI_InitStructure.EXTI_Line=EXTI_Line0;</span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd=ENABLE;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode=EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger=EXTI_Trigger_Falling;</span><br><span class="line">	</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);<span class="comment">//初始化EXIT</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//开启NVIC</span></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0)==SET)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOF,GPIO_Pin_11)==Bit_SET)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_SetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		EXTI_ClearITPendingBit(EXTI_Line0);	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	EXTI_Config();</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="两个按键的"><a href="#两个按键的" class="headerlink" title="两个按键的"></a>两个按键的</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span>      <span class="comment">// Device header</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint32_t</span> sysTickCounter = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF,ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); </span><br><span class="line"></span><br><span class="line">	<span class="comment">//灯的初始化</span></span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//按键初始化</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//第二个按键初始化</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOF,&amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将GPIOA0连接到exti外设</span></span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource0);</span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	EXTI_InitStructure.EXTI_Line=EXTI_Line0;</span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd=ENABLE;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode=EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger=EXTI_Trigger_Falling;</span><br><span class="line">	</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//将GPIOF1连接到exti外设</span></span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOF,GPIO_PinSource1);</span><br><span class="line">	<span class="comment">//EXTI_InitStructure已经定义，可以直接拿来用</span></span><br><span class="line">	EXTI_InitStructure.EXTI_Line=EXTI_Line1;<span class="comment">//换一个中断线路</span></span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd=ENABLE;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode=EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger=EXTI_Trigger_Falling;</span><br><span class="line">	</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//配置NVIC</span></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//为按键1配置NVIC</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//为按键2配置NVIC</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI0_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0)==SET)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	EXTI_ClearITPendingBit(EXTI_Line0);	<span class="comment">//清空中断标志位</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line1)==SET)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_SetBits(GPIOF,GPIO_Pin_11);</span><br><span class="line">	&#125;</span><br><span class="line">	EXTI_ClearITPendingBit(EXTI_Line1);	<span class="comment">//清空中断标志位</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	EXTI_Config();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h4><h5 id="一个按键的："><a href="#一个按键的：" class="headerlink" title="一个按键的："></a>一个按键的：</h5><p><a href="https://bizsec-auth.alicdn.com/d946ca083b65cd66/f80ebf33b1f6af3b/20241012_19fb5ed7c3bece04_486428009028_181701368300603_published_mp4_264_hd_unlimit_taobao.mp4?auth_key=1729699652-0-0-b10db018812c27132b7aed5bbe6515e9&biz=video-d63683b96e69ef50&t=213da87517296969520431973e1658&t=213da87517296969520431973e1658&b=video&p=cloudvideo_http_from_v1_800000012">点击查看视频</a></p>
<h5 id="两个按键的："><a href="#两个按键的：" class="headerlink" title="两个按键的："></a>两个按键的：</h5><p><a href="https://cloud.video.taobao.com/play/u/44392709/p/1/d/ld/e/6/t/1/486428009029.mp4?auth_key=YXBwX2tleT04MDAwMDAwMTImYXV0aF9pbmZvPXsidGltZXN0YW1wRW5jcnlwdGVkIjoiNGM3MWFhYWJlNDAyZWFjNDUwZGFmMjI3MzM5MGQ1N2EifSZkdXJhdGlvbj0mdGltZXN0YW1wPTE3Mjk2OTUxNDc=">点击查看视频</a></p>
<h2 id="附录（信息整合）"><a href="#附录（信息整合）" class="headerlink" title="附录（信息整合）"></a>附录（信息整合）</h2><h3 id="外设相关信息"><a href="#外设相关信息" class="headerlink" title="外设相关信息"></a>外设相关信息</h3><ul>
<li><ul>
<li><h3 id="1-GPIO（通用输入输出接口）"><a href="#1-GPIO（通用输入输出接口）" class="headerlink" title="1. GPIO（通用输入输出接口）"></a>1. <strong>GPIO（通用输入输出接口）</strong></h3><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>GPIO 是 STM32 控制器中最基本的外设之一，用于控制设备与外部电路之间的数字信号交互。每个 GPIO 引脚都可以独立配置为输入、输出、模拟模式或用于特定外设的功能复用模式（如 USART、I2C 等）。</p>
<h4 id="常见用途："><a href="#常见用途：" class="headerlink" title="常见用途："></a>常见用途：</h4><ul>
<li><strong>数字输入</strong>：读取按键、开关或传感器状态。</li>
<li><strong>数字输出</strong>：控制 LED、继电器、蜂鸣器等。</li>
<li><strong>PWM 输出</strong>：控制电机速度、LED 亮度。</li>
<li><strong>外部中断</strong>：用于检测引脚电平变化（如按键按下或松开时触发中断）。</li>
</ul>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul>
<li><p>模式配置</p>
<p>：</p>
<ul>
<li><strong>输入模式</strong>：可以配置为浮空输入、上拉输入或下拉输入。</li>
<li><strong>输出模式</strong>：支持推挽输出和开漏输出，适合驱动不同类型的负载。</li>
<li><strong>模拟模式</strong>：用于连接模拟信号输入，如 ADC（模数转换器）的模拟信号通道。</li>
<li><strong>复用功能</strong>：引脚可以作为外设的信号引脚使用，如 USART 的 TX&#x2F;RX。</li>
</ul>
</li>
<li><p><strong>外部中断</strong>：支持引脚的上升沿、下降沿或双边沿触发中断事件，允许系统对外部事件做出快速响应。</p>
</li>
<li><p><strong>快速切换</strong>：GPIO 引脚的状态可以通过寄存器快速读取和修改，具备高效的响应能力。</p>
</li>
</ul>
<h4 id="实际应用："><a href="#实际应用：" class="headerlink" title="实际应用："></a>实际应用：</h4><p>配置 GPIO 为输出模式控制一个 LED，当按键按下时通过外部中断机制点亮 LED。</p>
</li>
</ul>
</li>
</ul>
<pre><code>------

   ### 2. **USART / UART（通用异步收发器）**

   #### 功能：

   USART（Universal Synchronous Asynchronous Receiver Transmitter）或 UART 是常用于串行通信的外设，支持异步和同步通信。它通常用于与计算机、外部模块或其他微控制器之间的通信。

   #### 常见用途：

   - **调试接口**：将调试信息发送到串口终端，帮助开发人员实时查看系统运行状态。
   - **模块通信**：与蓝牙模块、GPS 模块、GSM 模块等外设进行数据交互。
   - **设备通信**：与传感器、执行器、其他微控制器通信。

   #### 特点：

   - **波特率**：支持多种波特率设置（如 9600、115200），可以适应不同速度的通信需求。

   - 数据格式

     ：灵活设置数据位、停止位、校验位等，适应不同协议需求。

     - 常见配置：8 数据位、1 停止位、无校验位。

   - **硬件流控**：支持 RTS/CTS 硬件流控，减少数据丢失风险，特别适合高速通信。

   - **中断和 DMA 支持**：可以通过中断或 DMA 传输数据，减少 CPU 负担，提高系统效率。

   - **多处理器模式**：允许多处理器间的串行通信，通过地址标识进行选择性通信。

   #### 实际应用：

   使用 STM32 的 `USART2` 端口与计算机串口终端通信，将传感器数据通过 UART 发送到终端，以进行实时监控。

------

   ### 3. **SPI（串行外设接口）**

   #### 功能：

   SPI（Serial Peripheral Interface）是一种高速的同步串行通信接口，通常用于与外部传感器、存储设备（如 EEPROM、Flash）和显示器等外设进行通信。STM32 的 SPI 接口支持全双工通信，可以同时发送和接收数据。

   #### 常见用途：

   - **存储器通信**：与 SPI 闪存或 EEPROM 进行高速读写操作。
   - **显示器控制**：与 OLED、LCD 屏幕进行通信，快速刷新显示内容。
   - **传感器数据读取**：获取 MEMS 传感器、加速度计、陀螺仪等传感器的数据。
   - **音频模块**：通过 SPI 与音频芯片通信，进行音频数据的传输和控制。

   #### 特点：

   - **主从模式**：SPI 支持主从通信模式，STM32 可以配置为主设备或从设备。
   - **高数据速率**：SPI 的通信速率可达几十 MHz，适合高速数据传输应用。
   - **全双工通信**：支持同时发送和接收数据，适合需要高速双向通信的场景。
   - **多从设备支持**：通过片选引脚（CS），可以连接多个从设备，灵活控制不同的外设。

   #### 实际应用：

   使用 STM32 作为主设备，通过 SPI 接口读取外部 EEPROM 的数据，或者驱动 OLED 显示屏显示图像数据。

------

   ### 4. **I2C（集成电路互联）**

   #### 功能：

   I2C 是一种常用的双线串行通信协议，适用于低速外围设备（如传感器、存储器、RTC 模块）的通信。它只需要两根线：SCL（时钟）和 SDA（数据），即可在多主多从架构中进行通信。

   #### 常见用途：

   - **传感器通信**：与温度传感器、压力传感器等低速设备通信。
   - **存储器接口**：如 I2C EEPROM，用于存储配置信息或日志。
   - **RTC（实时时钟）模块**：读取实时时钟的日期和时间信息。
   - **显示模块**：驱动 I2C 协议的 OLED 或 LCD 显示屏。

   #### 特点：

   - **双线通信**：使用 SDA 和 SCL 两条线，减少通信接口数量。
   - **多主多从支持**：允许多个设备同时连接到同一条总线上，支持多主设备通信。
   - **地址识别**：每个从设备都有唯一的 7 位或 10 位地址，主设备通过地址访问特定从设备。
   - **多种通信速率**：支持标准模式（100kHz）、快速模式（400kHz）和高速模式（1MHz）。

   #### 实际应用：

   使用 STM32 的 I2C 接口与温度传感器通信，周期性读取环境温度，并通过串口将数据发送到电脑进行监控。

------

   ### 5. **ADC（模数转换器）**

   #### 功能：

   ADC（Analog to Digital Converter）用于将模拟信号转换为数字信号，是读取传感器等模拟设备数据的重要接口。STM32 的 ADC 通常具有多通道和高分辨率的特点，适用于高精度的模拟信号采集。

   #### 常见用途：

   - **传感器信号采集**：采集温度传感器、电位器等模拟设备的信号。
   - **电压监测**：监测电池电压、电源电压等，防止过充或欠压情况。
   - **音频输入**：在音频处理应用中，采集麦克风或音频信号。
   - **环境监测**：用于光照强度、气体浓度等的模拟数据读取。

   #### 特点：

   - **多通道支持**：STM32 的 ADC 通常支持多通道采样，可以轮询多个模拟信号源。
   - **高分辨率**：支持 12 位甚至 16 位分辨率，确保高精度的数据转换。
   - **连续转换模式**：可以配置为连续采样模式，持续采集模拟信号。
   - **DMA 支持**：与 DMA 协同工作，允许大数据量的自动采集而无需占用 CPU。
   - **采样时间可调**：可以根据不同输入信号源的阻抗调整采样时间，确保准确性。

   #### 实际应用：

   使用 ADC 接口读取电位器的模拟信号，通过 ADC 转换为数字信号后进行处理，调整系统的输出参数，如控制 LED 的亮度或调整电机转速。

------

   ### 6. **TIM（定时器）**

   #### 功能：

   定时器（TIM）是 STM32 中非常强大的外设，支持计时、事件控制、PWM 生成、输入捕获、输出比较等功能。STM32 中有多种类型的定时器，可用于不同的任务。

   #### 常见用途：

   - **时间延迟**：生成精确的时间延迟，用于定时任务或周期性中断。
   - **PWM 生成**：控制电机转速、调光 LED 亮度、音频输出等。
   - **输入捕获**：测量输入信号的脉冲宽度或频率，如测速应用。
   - **事件计数**：用于记录外部事件的发生次数，如脉冲计数。

   #### 特点：

   - **多种模式**：支持单次计时、周期性计时等多种模式。
   - **高精度计时**：可以通过定时器预分频器实现高精度时间控制，支持从微秒级别到数秒级别的计时任务。
   - **PWM 输出**：定时器支持多通道 PWM 输出，可以同时控制多个设备，如控制多路 LED 的亮度或多轴电机的速度。
   - **输入捕获/输出比较**：输入捕获用于精确测量输入信号的时间特性，输出比较用于在特定时间输出控制信号。

   #### 实际应用：

   配置 STM32 的 TIM 定时器生成 PWM 信号控制直流电机的转速，或者通过输入捕获功能测量外部信号的频率。
</code></pre>
<h3 id="GPIO-InitTypeDef，EXTI-InitTypeDef，NVIC-InitTypeDef等常用的def的各个参数及使用方法"><a href="#GPIO-InitTypeDef，EXTI-InitTypeDef，NVIC-InitTypeDef等常用的def的各个参数及使用方法" class="headerlink" title="GPIO_InitTypeDef，EXTI_InitTypeDef，NVIC_InitTypeDef等常用的def的各个参数及使用方法"></a>GPIO_InitTypeDef，EXTI_InitTypeDef，NVIC_InitTypeDef等常用的def的各个参数及使用方法</h3><h3 id="1-GPIO-InitTypeDef"><a href="#1-GPIO-InitTypeDef" class="headerlink" title="1. GPIO_InitTypeDef"></a>1. <strong>GPIO_InitTypeDef</strong></h3><p><code>GPIO_InitTypeDef</code> 是用于配置 GPIO 引脚的结构体。它的成员变量决定了引脚的工作模式、输出类型、速度以及上下拉电阻配置。</p>
<h4 id="结构体定义："><a href="#结构体定义：" class="headerlink" title="结构体定义："></a>结构体定义：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  uint32_t GPIO_Pin;        // GPIO 引脚号</span><br><span class="line">  GPIOMode_TypeDef GPIO_Mode; // GPIO 模式（输入、输出、复用、模拟）</span><br><span class="line">  GPIOSpeed_TypeDef GPIO_Speed; // GPIO 速度</span><br><span class="line">  GPIOOType_TypeDef GPIO_OType; // GPIO 输出类型（推挽/开漏）</span><br><span class="line">  GPIOPuPd_TypeDef GPIO_PuPd;   // GPIO 上拉/下拉电阻配置</span><br><span class="line">&#125; GPIO_InitTypeDef;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><ul>
<li>**<code>GPIO_Pin</code>**：指定要配置的 GPIO 引脚。可以是以下常量的组合，用于同时配置多个引脚：<ul>
<li><code>GPIO_Pin_0</code>, <code>GPIO_Pin_1</code>, <code>GPIO_Pin_2</code>, …, <code>GPIO_Pin_15</code>。</li>
</ul>
</li>
<li>**<code>GPIO_Mode</code>**：设置引脚的工作模式。可以选择以下模式：<ul>
<li><code>GPIO_Mode_IN</code>：输入模式。</li>
<li><code>GPIO_Mode_OUT</code>：输出模式。</li>
<li><code>GPIO_Mode_AF</code>：复用模式（用于外设，如 USART、SPI 等）。</li>
<li><code>GPIO_Mode_AN</code>：模拟模式（用于 ADC）。</li>
</ul>
</li>
<li>**<code>GPIO_Speed</code>**：配置引脚的速度，主要用于输出模式。速度取决于应用需求以及外设要求：<ul>
<li><code>GPIO_Speed_2MHz</code>：低速（2MHz）。</li>
<li><code>GPIO_Speed_25MHz</code>：中速（25MHz）。</li>
<li><code>GPIO_Speed_50MHz</code>：高速（50MHz）。</li>
<li><code>GPIO_Speed_100MHz</code>：非常高速（100MHz）。</li>
</ul>
</li>
<li>**<code>GPIO_OType</code>**：输出类型，决定引脚是推挽还是开漏输出。主要用于输出模式：<ul>
<li><code>GPIO_OType_PP</code>：推挽输出。</li>
<li><code>GPIO_OType_OD</code>：开漏输出。</li>
</ul>
</li>
<li>**<code>GPIO_PuPd</code>**：配置上拉或下拉电阻，主要用于输入模式：<ul>
<li><code>GPIO_PuPd_NOPULL</code>：无上拉或下拉电阻。</li>
<li><code>GPIO_PuPd_UP</code>：上拉电阻。</li>
<li><code>GPIO_PuPd_DOWN</code>：下拉电阻。</li>
</ul>
</li>
</ul>
<h4 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);  // 使能 GPIOA 时钟</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;              // 配置 PA5 引脚</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;          // 输出模式</span><br><span class="line">GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;         // 推挽输出</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;      // 50MHz 速度</span><br><span class="line">GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;       // 无上拉/下拉</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);                 // 初始化 GPIOA 引脚</span><br></pre></td></tr></table></figure>

<h3 id="2-EXTI-InitTypeDef"><a href="#2-EXTI-InitTypeDef" class="headerlink" title="2. EXTI_InitTypeDef"></a>2. <strong>EXTI_InitTypeDef</strong></h3><p><code>EXTI_InitTypeDef</code> 用于配置外部中断（EXTI），STM32 的 EXTI 模块可以通过 GPIO 引脚引发外部中断。</p>
<h4 id="结构体定义：-1"><a href="#结构体定义：-1" class="headerlink" title="结构体定义："></a>结构体定义：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  uint32_t EXTI_Line;    // 外部中断线</span><br><span class="line">  EXTIMode_TypeDef EXTI_Mode; // 中断模式或事件模式</span><br><span class="line">  EXTITrigger_TypeDef EXTI_Trigger; // 中断触发条件（上升沿、下降沿、双边沿）</span><br><span class="line">  FunctionalState EXTI_LineCmd;     // 外部中断使能或禁用</span><br><span class="line">&#125; EXTI_InitTypeDef;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明：-1"><a href="#参数说明：-1" class="headerlink" title="参数说明："></a>参数说明：</h4><ul>
<li>**<code>EXTI_Line</code>**：指定要配置的 EXTI 线，范围从 <code>EXTI_Line0</code> 到 <code>EXTI_Line15</code>，对应不同的 GPIO 引脚（例如，<code>EXTI_Line0</code> 对应 GPIO 0 号引脚）。</li>
<li>**<code>EXTI_Mode</code>**：配置 EXTI 的模式，可以是以下两种：<ul>
<li><code>EXTI_Mode_Interrupt</code>：中断模式。</li>
<li><code>EXTI_Mode_Event</code>：事件模式，不产生中断，但可以触发事件。</li>
</ul>
</li>
<li>**<code>EXTI_Trigger</code>**：设置中断触发条件，可以选择以下触发条件：<ul>
<li><code>EXTI_Trigger_Rising</code>：上升沿触发。</li>
<li><code>EXTI_Trigger_Falling</code>：下降沿触发。</li>
<li><code>EXTI_Trigger_Rising_Falling</code>：上升沿和下降沿都触发。</li>
</ul>
</li>
<li>**<code>EXTI_LineCmd</code>**：用于使能或禁用 EXTI 线：<ul>
<li><code>ENABLE</code>：使能 EXTI 线。</li>
<li><code>DISABLE</code>：禁用 EXTI 线。</li>
</ul>
</li>
</ul>
<h4 id="使用示例：-1"><a href="#使用示例：-1" class="headerlink" title="使用示例："></a>使用示例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);  // 使能 SYSCFG 时钟</span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0); // 将 PA0 配置为 EXTI_Line0</span><br><span class="line"></span><br><span class="line">EXTI_InitStructure.EXTI_Line = EXTI_Line0;              // 配置 EXTI Line0</span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;     // 中断模式</span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  // 上升沿触发</span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE;               // 使能 EXTI Line0</span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure);                         // 初始化 EXTI</span><br></pre></td></tr></table></figure>

<h3 id="3-NVIC-InitTypeDef"><a href="#3-NVIC-InitTypeDef" class="headerlink" title="3. NVIC_InitTypeDef"></a>3. <strong>NVIC_InitTypeDef</strong></h3><p><code>NVIC_InitTypeDef</code> 用于配置嵌套向量中断控制器 (NVIC)，用于管理中断优先级并使能中断请求。</p>
<h4 id="结构体定义：-2"><a href="#结构体定义：-2" class="headerlink" title="结构体定义："></a>结构体定义：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  uint8_t NVIC_IRQChannel; // 要配置的中断通道</span><br><span class="line">  uint8_t NVIC_IRQChannelPreemptionPriority; // 抢占优先级</span><br><span class="line">  uint8_t NVIC_IRQChannelSubPriority;        // 响应优先级</span><br><span class="line">  FunctionalState NVIC_IRQChannelCmd;        // 中断使能或禁用</span><br><span class="line">&#125; NVIC_InitTypeDef;</span><br></pre></td></tr></table></figure>

<h4 id="参数说明：-2"><a href="#参数说明：-2" class="headerlink" title="参数说明："></a>参数说明：</h4><ul>
<li>**<code>NVIC_IRQChannel</code>**：指定要配置的中断通道。例如：<ul>
<li><code>EXTI0_IRQn</code>：EXTI Line0 的中断。</li>
<li><code>TIM2_IRQn</code>：TIM2 定时器的中断。</li>
</ul>
</li>
<li>**<code>NVIC_IRQChannelPreemptionPriority</code>**：设置抢占优先级，数值越低优先级越高。在 STM32F4 中通常支持 4 位优先级划分。</li>
<li>**<code>NVIC_IRQChannelSubPriority</code>**：设置响应优先级，用于同一抢占优先级下的多个中断之间的调度，数值越低优先级越高。</li>
<li>**<code>NVIC_IRQChannelCmd</code>**：使能或禁用中断通道：<ul>
<li><code>ENABLE</code>：使能中断通道。</li>
<li><code>DISABLE</code>：禁用中断通道。</li>
</ul>
</li>
</ul>
<h4 id="使用示例：-2"><a href="#使用示例：-2" class="headerlink" title="使用示例："></a>使用示例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;                   // 配置 EXTI Line0 中断</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;        // 抢占优先级 1</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;               // 响应优先级 1</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;                     // 使能中断</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);                                     // 初始化 NVIC</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="综合示例：外部中断配置"><a href="#综合示例：外部中断配置" class="headerlink" title="综合示例：外部中断配置"></a>综合示例：外部中断配置</h3><p>假设我们要配置一个按键中断，按下按键时通过 EXTI 触发 PA0 引脚的中断，以下是完整的配置流程：</p>
<ol>
<li><strong>配置 GPIO 引脚为输入模式</strong>：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;            // 配置 PA0</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;         // 输入模式</span><br><span class="line">GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;     // 无上拉/下拉</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>配置 EXTI</strong>：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);</span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);  // 配置 EXTI Line0 对应 PA0</span><br><span class="line"></span><br><span class="line">EXTI_InitStructure.EXTI_Line = EXTI_Line0;                    // 配置 EXTI Line0</span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;           // 中断模式</span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;        // 上升沿触发</span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE;                     // 使能 EXTI Line0</span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure);</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>配置 NVIC</strong>：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;               // 配置 EXTI0 中断</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;   // 抢占优先级 0</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;          // 响应优先级 0</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;                // 使能中断</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>STM32学习</tag>
      </tags>
  </entry>
  <entry>
    <title>树和二叉树</title>
    <url>/2024/09/18/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e781ebcf4145cc9b80e1dbeff62d1bdea2d7de9405fa3e5e837624791f7ceaff">fb736e647d9d25782ff93cbaa84e358411287b438fbda9e201214532c54e833e8564461519cc0a77c0630c3b830c4b806250191ba573701bb9a6981d8c16d079043a98b6f283b82c7cd0ec37e04c8b326fb57e34d6b13ec0e64d64c541fad6fc5d66f8d4a60698f169fd07bb88595abb77e2f8a15b664a1a00374bb8e24580ab445d7785d5323df698ac444cec3073876db9b9f766fa0005362a544644068a8ad86bfbdb0238894e26893f13b7b2a34a54ff5311d386a7c00c9a8d7467e25a9a18af19daf5a8bd395c9ce344877eacbc30fc01e8e553f85507c59481bba0432d65a3dcbc6a79fdb218f184a0aad2a71f3c65fe4af085bfce570c1c4459dc553afdeab653ccc3db01fd4da83c3663b68ab6900a6b539f81eafdba64b7ec8f68731ce99c08243cb1dc15d7ca54273aa11c5583beaa8055ed01d45f624f6289ac869d47f9d1879244507144339755b5c36a5f97f0c1b0f1e2a2095bc51f58baad2efac955b58a71e0733e17efedf717820494628644a7a2a5557136d24dc1f7b9a4c0bcaf7b882e99f81b96a04d1544907bd2e225b04a62ee2d5b46a839eb426fc27e56b727a43e75caaaa6d2b0ab34788bc560664ea653a06b74dfa05ba4ae82a4a282d3c3efd53f8ea55725a21d75d97fcec328e617e6da153b0db477dbe9086d33b8917fd50e3af35e9c7fff857629daf58795861c5b09290b4b08d440dafa7a898915e368ba2bc4a0c6bdad809bc5df594f3a8d1081cf32783f6ccc6ad0167621e1959202fa858c255ea8288763d26df204fdceabb030504d14b38edb6869230d94785481d43bc0e8e03853bbd76b19298cc7736970ba30e09658e06ab01060ff063ea5213cadeacf5efaa3aabd0c3af60544a1b0e7a70f1c0dce34c0ecb5bacf85dead0c867b7a3bd4583a8e47136aa23bfa40219e9dc393ecab008fbc69404a949db3ef4ecce03c0130b380b343fc770b49eb7364ed13d4f338355fcb6216c39f4d62905749c3ebdb91245147e184b1fedef2f4dda19900626d330c300373a47764cab7c56372967c96b940d4b0333b476478f3a21e21b35b0f695b994e6f838b88e619af22887ca9912225b9ad0be0a5fbe9c785d713bf1df19db9fbbad279a8758a7ea3bd83d0796ea8be0971589b5340a273054ef6401d2eddb8f1835299f631b08e82c48e6ca11537b2f01dc7cd643b9150c2e2d1cb3edf0ddb40ca3b22245675d25e35cc78379650b1d08bcd74745a2a4f74bf6fd334a9242913ad00a8df1a3b04f30eea328edc38493517d21c848b31c24b1eb6a21e68b9dc098b7aca5c7ec280532d38ada19be4783c994d8eb1a89466f4666c7ebad733fbb4377e08ee86fa92a1f6f93246ef70d8f63b1254ab959f17371a40befcab99dc4607278ba2b4eae4e3e9395c7d7438d5f9866e579078c9d80cf6accb5978916a50f46af2902c2114754516ed6598a9f98443ea39d5c836f2867cb99640d4392658b2edd4c47f3dbf3d7ced1edff8ade55f1f007bd65f465ed85c294746966ed5ff4a8f9a43e2b31d679f69799af4381ae5eb7caa92e85de037878a0ba7784e8650d8cc57020c3bf5efad5afc880dd11830a4295306b3c5ef1c5428848833df0ab2e0ef9546e97e2cbf4605d0b71c8d8f36a36a0ff77ce863472f3dacca15175d3af94d318cc45f5a79fcf99d34491bae2b41dcfdb6c8261d85d13f750df700d9b0f08634dc4adf7f2333bccbff44e1cfc6b36c32170188a2a0157278ce0f63268bc72d5ef7cec559782425bb6a991a9e42a45586ce355cd05c383cafa4c51dd71bb82542f14a0e0204e973dc86f60226122fa6a9eba9f328839bdd7f1b48db9e0fcde4a2cf309505edb27239a51652c837f8f721830aa072aeb7358ea2687adb42f0dc6352d339e2c8e2cce22ed83ba30b9dbfec7c843c67b674bb80d0085162e7a964b3bb0fe59214e13f44dccb0627fdd1239f276922a7b671a02524d07ed3b5dd90747e9dba5ac72ad0056033fcc15b5d72809917fd8210f2800f7052e58400080a11f893228bff7632f7e1eec561966f60ca05a7a7ca2f3cbde9fdf929186083c54de4042205b81938c795bbd68aeb43357ddaff2412e82134fbd99b0f744d2668c524c5d19af998f401887d14ffaffe276b199cd677590f1e3ff32579657f53e2ecf0a28f193a77b601a04d94ca7b943f3f9c7d1ccb9510ed0ce2eaea0bab136101080f4ebcd2d85d07cba05d9c9bcf9a7848571810fc604aef0d40805538bdda2cadf0210b00a596654e4e3b86c600ae8884e3debcda75a5a7abe2981895bc81296890f7008efb8c5cb97a7ec02d652f1d641e0fc397939f6718078714d7ac364637adef5d5db061fae345c2aa31e5b6894b2f25dd53b3ab9fa35e85e13639439c1be52389b8644e44895d8c221cd7c541977fe54845169b201046e4e3db288fc477dda3aa019a11534d56bbc34d6065b064eb9bc29d370d0a9bdb5e21766c71674945d32e5bc3a439c456f9e89005910d8bf4be2441c9c125f9276b68af0db45beadc6876145117d3c2712ec949faf76d1bddc50fbaf20af234b0c3a2fd382d14e634762f9edb6cc13d7951f55068ae689e5cabec2383d29a3a5e72c4decaace0a2a96c050fd47dec75814a18c98c1060af91e4ec09beb23cff28722c9706483212d09f017b88ef4c3628340590d6b2a81d491274349dc1b7c8056b9fc3780b210c4cd41c958c6968911cd0b39cf34b2a919bc77073fb7bfc3383cf0d31b7dee838344b1153a50f6a674e04d239d919b9936acee871b3004e49466459987a673339d44c6989268130ed91c857b178421899b2cb4b21d6c5662b796ba00b76d3e3917f0eacf0618e4129858d4e46711c4d2c62f77873f9fffd46791dfa7ef4d24c1f443c9154203303cc2ae6a6a32dda15d700985d15bc453f0e91a76cf4c1bb50c5c7c1d81337b0c7490315871874bee78d1340392948792db391488aa5a37260ae5413f06fb9547dda531f1d035be6d73074e5ab77e10ecc8c3ddf8d332cda8a88bf4af2a979a207b5e03dc7fcaed70570016d4ff19147a54cf2ba51ad83402e27890e02b3fffce7785b4a74aa0918cb6e291b94f1c17473804d25d7d0b736266745029ec35be96ac57f8ba718761c496550f57180ff7bb683aee46cc6cdbbbfa2f1b6eea2b42e80c551b70b05e2fff5721b9869669b7cf1439faf0052fc174c0db4bd34903be837eaf6550a8d63df50be5c8cd67fda4ea2f4a0ee7ed0dd6c3d9105470728a2d61310dd823e73b363085de1b9d77f1667ed62bb0d1b9c3274407d078a2f14f62f41df44325f3b74dc38cfedc4d6c1d3b6e481e04e34a22e9163358690512fc86d15f588cf398c5d81be1566cd71a25c72c36de0a9b3701cf7055d9a8df43eb52dda61b8949fb657be20ba508058c433790e79507c894741500b8d0a9fa57b49d6856ee12e25e1d58b7b7fb22386dac4be8ff3a984bbc8d6becde435b873ab093292e4383d6e9530c60a7c1bbaa94c8622251c1b15925472643f1a7bdc118cddf0d49613a34d6e2a4b12153cdd8e8be29bfdfffec0d091d588a0ac862842ec01050ade591a03a928b377e0e0aaa13e6f4a6ea00191eaa37629233f4c1b46a31eef94b9b6cfb67420faf703ab33a8fa63da28528732a61f55475265a41ebfde642e5155ea8d8636ede5495072665f9fa1823e073f26b0e04447c81c88ace3769c045271f5ecf620dbcb11d318c47eaf3d91cf9b0e3fe12fdf72a66fd04fb0fd4ae0d543e0cef4910662d23de2a5c55159bb9ad237b17099feb68e0e42d1f9583d0c0ecb29135b0e0f320c0d053d34a9f6744a804eda15431d647fd5955a11a790abd791e0768eccb21221077eed9c179fec2182e924af0b00f4d230aa91c12993471fe786ed90567e5ddfe67dea31fc63703a45f09d04b53ad9ec67fd4888011e9d47a2a04c9af22e68add3f6ffb904106c673d3da0c132b662592549b68ab0ccf3585cbda5045e3c94e6fae008ad91b30d5b2ef2a95ab9ca56987a2a03c28bb6b1bd08fe4e4284e463ced9f5e5ba4295c741b60ac13638c4a848c6279fdf2a9cd8a43987ee86f7b1e9438f459ed96dc721af51d9c6d4ccca72a504034c2503d5d183c6a9165fae97d80f5dc27cae1b740911ea6da9365b284b32685f039e77f20a25be1735c1046a14961a482f15a934a92139d6640763442e203a72e06bcd5b2cc3c6c72605584624b0296b27943fb22fb4d17f59bfb06a09dad074533120c0021ba1864957c00b29bfc5a685e7b5a2ee69edbfd4ef340e05fb3b1c26d1a7be8bd1e6082bd9eb566d78df16f64fceab5f48a8ba39515f26812c06eeed4a77a73c665788d6f1d6a73b04c8d78377b80901bd054bc9d0e70852db56c69455ab13a9bb22e6f2f84b1ca1a35961ebafaa5a4fc070bfa63d4d9c3dfbaae0697f9003b134cbb7f3e3cb574c27c6f629ebf75b62da33ec0cfb757bdab9cae0194f4ddc8e760625ea9e1b6114d4b43d31e89c452cee20768de8808465a737c25defed5e741fd50d35699430da544bc5cbc665bd077858b0d548940eec593855bb81eac6fa32071e88fbf660fedac4802f8e775f795eaf242b740651fcdf6c83cb091c718c721b8cac33ce5a6b315a2dd7269ec4e0f4a97d3496f7d7d5af62c10a99e62fe7f42b8125dc5096e2043bd3cbe136b41eeeeae8b81ab591022bed33d091df3471b520b08c2a05805a91c58c2655d9ffd5c226915a1b32daa1c199ceec81ca9030abcb2870d42022c027102e5e2bfb58b7c415953a62ff4007ef75061b3305898056bcc0d7e6af47e6dbf051479c70aeac41e67801bb8237dc2e580ff7b1a2483f063c192266440679ed63b42f799dca3a72122491ca61fef6511721388e3e6465003e169be57de7b37283b56e67c1fd04a6242667a3e3c2dff8c1b8c5a2ab1c5009fdb00c876cb5b183f75c0fdb9a61f8c08f588e2d25fa4c19db414fb1fdfe1b2a35eba605e9a26b9a78d36b346a0c67f43097afe20bad6e2d6730b296ad6a10d1efd71ec6fcbd140b4fec974a0cf7cb13e4e0d4b7bcf09cb7e9bb0150150bdabd2e57cb9b8f7843a5aa2b29a30c7e232187d0d29b2ae1e72bdad19c8d16403b25f7210f8250ecc1375907168f9a0dc7822544d78bb3309feaedb2436914ec7217bd2ce71cc873a3b639f470935cf4324b8c5c9fd20df0bf8f323b207e8e2e35708d544f400f1b5472fa092bee5eca2e2c66e85c50eaa312b1740a4a55cef71ec422b2bf22f249a2f4cffa2adaee5a9f4066c6acfa8fc587da9d53e488c757efce38bee32a8e120dc49089f39501b4e6479b0c9403ef7d0b74f4ef5f2abb297d5aa1effdfc644d616a1b0ebaf79e534cb8e24149539be0346bca24cedf41358816cb89012724d07c46ab050818094e664f3d29576d2ecbed3b0c54071c009a2f61da71a6df8dbb0c4e1ecd36061337c86e1eddd44e2af339b26494bc8bb408f3ed0c91f98e3be144aa68d3a881c815fc82b2a10199b73051ab719000427fd1a09d0cb24e42510368aee8488b6f70fae15c39ae2d812c064aad7685991aa60c0b0214665be189326fec45ba2dbfb82335c7a2503b566e4ab762f28c2fa4309c31c02955a49a068a7be77cf4cffc907453dbd0f7dead5dd0872867501d0565c76cea80540c6640396116e65cf058e18b576e84b71b9970504677b08779a9a62dde802115a534f1474653b4ef18b84121e09ca297be87cbffa345d6458c3c56c030487a7f4e264c3732a1acb742f8c2f35bfcfa0e71fa95870d956cc2a45f260360773710e1fd9b5dcfa41ecfba08bc50733e3a30860024112e2c54524660744c1bd748c2b570255dc274d0723f443861f9a3e232c2940a4fe550036e8fc5b34d6c5b8f9fc0e0e888b025b9c2e779ac5a75a8ecc90698b0aa555d897973d5ae79a4868887041532dd9be81884c0fe527729c46046a78d0e711c3f2e271583d42bc302b8208e5771e626887a177840a12bf96e586cf35b9aea9789eba0f1e0cd1bd776dff87e85d6286f694087bcd38cc126b852bdfe99c42ef013ab369edf59e936a79781b4f15ac1c97326d0ddcb9e75ae68c9ff5f0dade665ba528fd6da097e3eb7730d5b9af12c3e9a7c0087bffdd8e2723795f720516ca052973835cd48122cd9e54dc2297c219211e5cc5b2b6d5ef1f250dbb0c51ca6d3715e9f1f0253fffe9e9835e235af6a88b6cd968de9d65df07cbbdca1415df6ed09b7dbe756be6d7a76ae2c009728672711130af421693c15b4fa3666f4bf70330617868f057882d148f7469da6ccb6544faf2ea03d564f1895696cbad1595b4579c081e20361eb9448542ef22aa6a9a27830f723e983cfe9a365f89008e3557a7642640db0e82a048fd4b2b4a0560ed30a941b63de604affa20d3cf55cb5db273ef6a6fa60181966e5a1eecd0921227033455b8a507357f65fe203646a5e6afa6c8cfc3f44793192e3889ed8b091b1e66a848340ca532b8114773af9b097b975b723d05b2be967af244e32bba4803d2c6b0ba62d9ff6072f577215142380f58370e0c0564a29141c9aa0276ef2da6eb84b51a828eef031a5c555004605c04ccb8df3ab7d5572e74ffe2351cb2e0ad512b01bb03547df725f7de589c5d5b740cee41957c33dcbb1a9fd4cbcd2e9843ec20c05dd02aab46f233009aa11881a2bd0c064cd70c1d2e3324e3100de884524e2f3a25cbee72c30a4d1a89e29e3b0f69121661517cc2cdc30a2202d6ab13da03686eb8bff458024dabc6915e12b67e82d0bedb54a74194b867198eb01dd4325c84788b0e92e82e8b137ea5cc5ea1053ead73c1824353d938d2cfb81340680ae92ed79197de8f430c1f29f4ea03b347806a9796568532764b61321fd9a29198a825e4620792c28fc0b5ae79e529a1827602ed77fcad2a097dac67ac6be50f24a611938401e64aa6bd801e2880762d7f65e7734c8f8f919d1e209293c915b42047ede957f8133f6706c9a674d5689ba61e4f9cb83977ee686c068a75b499ebb04db941d58cf47883aedeffb54565cb6bea5cbe6dc9c08f2e134dbf49ec6800cfbd4bcf944137ae4c72f52d5622aba139e1d2fe2a7b124fd808b4b358800bd6ddfeb4b9f59b0898f592babfbe0100823fc17e61429cf04c3f38effae39f995e5a36f8fd5b87100ffcbbafee29a2ac9c461359e5dbafc2fceceb7a2edb70ebf34a36dfe37b6394eb42f5fc058db72581677f95e38bc5f894a8e3b12408233b43a99d848c081fbe833c909ab2c20f852fe98787d37d34d6f9ceae17a84f24f5cc36ebc366829391cb042128ff957b44badc1c7c0fe58472552f91a6370bef79ed4816e338d2329bfda7b4cb31a47c6a2c902f33879450c77156b69cf08a9f718a71be27151d3aab378c2667b8bc11bdeb0de47649ca1ec7698cfbc1e135e133782384393eb17e997a71d969f9907b50e6f2f1ebd91f593ae6fc16e11deadf7ca200656ddfbafb2c36781104dd708783267dc1e2faa3e6c30c3b78b6799181c1078d1087187e4f8a08d2735c15447ef4009bc21f4118c379758008687cc3b29f48aaff066010a2d98853cb0f7d0b483b77a41e9694eb764deb9345568d1ccdc631a45a3e79cbc3ce989f46bb5f3d892e07b26e79d7b30797e11fa89e9d1b7d8a67b244b3035304c9550cc28b91662e1a3cdd45090407db1cd9b0fd3890da0a1faf50af310949d9888402ef565283d694a7e4457ed547235b3ced2b826a4fdee5fe817a0a84b958e7ac83129ad527735da1b74b3fce6ef1f9a2d0aefac717ffc10a554b7c550640589cb11c13d1fe7ea3fc7a9046c9ae775c9d46d9c15d89c94391014912d2873ad38be253e5f710ebb1cfcb9b716e93b316b8cf4dc26a1038ec2a6bcd7b34d566a2838751d4df3bc0937b2b668deceb080c286b31c71868934503c25e3930228a674c0fffa97a2c4baa04ad3bc0cd0b5495395198ca3fc3a405fa5a21f4682ca847ecc41ff1d3d4246768b2dd5adcf54e9236dc48d701258d275776ddc1c4b590dc7fd89fb39c962f6f3cb5b86693f22e907943df94d612448bc03eb66748e3fc31878ea3abf3fe60e7caebc18db86783142fda5cbbeff1a66f82f37ff1c1afe240d781c1a7eecd55970f3a653161c0bb721b7ddc978923b7771aaea80184c8f08e8df86c7be0a0ff11ec49d869d1b29a596a1db443aea501921dee3dc66c5b08719c54a5e67cf24249eb49c3de160d061a5510f0e25fa47066c2f5f9ac848118ed650222658ddd7fea8a6a16470dfdf596ee695de10fae42f9c43a6bf3a37491fa1e3113f534c2af1e1718c9c1f90e8b657d654ff4998d26c83609edecb90a3c4d3a7f01eea6fe24e3133f62c89e48291398b065b5a8dfb9809b51e85d729630d378e4e3f124c66fffc008dddc96bdacb1f11ea9b7dc7cf1522e3c4bc2267ff64451f2dc96a351b8fa8952033ce9d1fc1fd2ab70b819d80b942106b4f879ceb8e74fa41871e18421629aabb1aef98860628d1dd0865bb4040e4c3ddbeb4a4c89bba6e424f6d8c389fe59e7ce06b606bd5ab5023c3ac67fbf67c8ad5346d0d22d607fa0aab763a6c102b901a41dc532c30170ccaeb48c98b73c33a190767b781dfae0a6364cb1a761790deca9ae460acabd9c2cf33b9643bcb72ed15930fc255793b36d6bc9efdd3d1dd1841aa998f740e454d7f42b8b511f30018bcdfc68ac974d77479e02c2498cbd566f06a0af9bd0d24ce8a73d0d3b1bdde82d6f81fb62b85189eb384ab6b6fd6890bc548e1d343806e116c635524362b4b6a661e911fc968b46932445159844e5ae86aa14f8d37ee1dc20592bcf488f06e817e3d52c7913a4437d839b180973ddf358caf56a595d9b688c9f8ab203e9f34009856ab5646b4829821853ae1aeda78b13bfc6e4ccd1a0f8a30ca990a37987b8bffc180b94f67f14c6f66945887069cabc4a2f7ea182bb6e22ad67ece9561a3376080899a02cf3456291aa9b8596c5350e488c1e940fdf20059b918ee8448d89d47c229323de367f9f8f91ac19f08db364c668e53ee2f47ad347a6a87a1ca84094a3175c833db5c2a295586a8974e98668378cf8740624ff4e5a813cd3156e7f64a11995bbf17b0b21eb05e47127b8aca125afad2165eabc1e16a0f8f9b006614b013ae6ce913d3086a87f23c6575faa3865861db28f644494567e4f086ab2dd952b9fbf3afbfd9021676b1017c5f4e8adcefcf142257dcf3231055b581228e75aff50b9e222692a51cfce76ce52a62965d41f5728afca3ec25be25e07e9125b5b63b6eb63919bfaed146def6de9acc2628aabe446e9ab76b0a8ae456ab04a1578d06d887b637617418e2e68428078254718eb9f962540dd3ebc0cae45686073da26cb713bab96a1e5ef1034f43389eb3ed876b6f4b7e7d7cd1ff612ecf41e473d24e703becc4e4bc789062be94e3602c0aca6f7139a3e8abe24648dd4273052220053a002a031df89dda74cc282a73c414b9d867f8e543260ca840187b4dac6af0e868d6a3847c1b1c7dd7a4b21531400310e072549332675894c7dcd01903ddcd8b6f0493a77005ccafb1026b2b7490ac44f60879a7755efb4e1a23af81800a4a1e0250efc54aa924f2cd05d699b8e138ae82a2ef786a53950642021a4dd836f75da3c64cb2b4509a9703b4ba2ac41413076190950b6e0783dcf2c88628fb00a4383ef9141a85d66d883c99971b4a899a9ad4ea6214d5cac0c264237513b8518e420bbb8c5b9959a5407934d3c1510d4fa75e3495d0b28447ea0c7d3ba476d22ce612ab886a5208c9a5e4ae23e8df0c43e3c5dfb706007ce05fe2c9cbc1086d78d7f89b052a24c180bdd3e9b15b0d40ab4fa9c99e3734eabb5e6b931510a22c61b9248f42b0c4129559922154ee793f56dfbfd39c8a0f9563860a7a8a2e5a905c37c0c2c27fc8719d6f9983e7a6c19926631453307bec07b7da48673112c5a82df84530369da2458d58662eefacf49294185ffc5f20e0343a22f0e129a37fa46837db1ed446295503a6ab0c54bbc6097af9d43b7a8f6ba583bc8d89d5127b0238eac85f9c5e82bef5a7ff65471ece8c83da3707413907a8af76573098999106cee9f2359c13b59a418eb2f6cc75e17f3eeab1ccf550f80d69434e87994185b9cdee93e4ed7ddae12c1fedcbe3c10b0774201adff9f70230241cb2940cb601108bf482332f231be4cb024239546c8b9122b3f277d0f94cf4cea6c44e29445cc9915e392d587fb892165f806ae1822802d96e19e2ed854b50a4033b3257597cbd88c9c245e8386b633d64768155a019f199978cfe26f6e91e9672c44588d240d38b26745875238e41a41a2c5e4b75387b25bf378b72ad2e22fc8dc57e1e6685523fc5b02b039f9749861f815e6828e6d7fdb4412f045c431510610548409264774c5f68c3998b6f5819ed8149dbf93687ed078d38b0e1097bfd1b2808ea76d318120e642e7fd12ef59b6d0fbad41cfe41dbc17e7b224f3c683f015081aa04af763846600b452dc9e2b83a20b2a834e13d1d285739652fb43424ea299b6b34d67a6d0c8dab90c849134af4b248a39bad83c3ff5e942d8f69bf386d3cad13c221d7bc3fa067ba5f43f0269233c7540d3ec3dcc256e48e9dab8faea22df12b7a11e07c12e73902c9991a7880193fd34ac1a1af1b459c016cd98bace891e00f950f3270c850ca23b22490e86f9cf7b5620485c73e122dd74fcf424d72bde121dae7ffd633acdfb4725dc2ca233d645caef3e110da8dd8e96eba7591495de4ddc234f5b8b6f89dd35caffe41171e3f855100803bcc33c3a9b2a1643e0d1f0fcb32bdbd4ef944d52ab614e9f33aaf7ca9f95f149f69517d44ed93a239bda287d81c65ea07ac7495d5050740452bf32de0aef525ed0808f37513f074c008ff8d610779a94092dcecdb3dbe54bfff5ec4d5fbd6abd6274753b18bb9b7cc9cbce504ebfb1aa25f2f359a6fda057aa0b501540d6a1a8b57229afc227442d8f639f60d5a59cd2c9885a14e6d6f87388822e17640dc7e2e29a030aa39758cae5fd9a49870702b293c8b48e0dedd3b20f4bc99da282e986db8a41aa1a9fdb0b0edb3e2b24ada5586615346cef0889bf069da451e29337e0288116537696dc00b0c3ed57137e6c6eaea5755b0d980f7796eea196d71453754a6cbff48f049bc550c16e4dac3496f5ded8accf4589406aa039b99084a4352be8139a65ab2b0f3bae7a7210d9a0c9546f16966f0448fbfd7f44d66fc683255ffc9bb3d5f8d3538dc6bf023bca6d0ef02c77cbaf61ba7f2bcab38454751e5c47288c642670a6071f471324ac32841ce890c4a00afa7d8918d74e44bbdb9093603760eba430455a465d4190e6570046b49ad543363503523cba6a6d259225d0f1e3635068607f558d725f4015ea7a524e423a0f62603e9d521dc03a7cf9df808115263969e5f3b1814a295d81e1d6a5c5c5da4a430c39e60fffd9baaaface6671d48a4d691fea6dd483706a998b30c599b1a6923174f8f33715cc3f1cf31825f282351f6f1b2035c402a7217512f843a13c95bdc14e6f444f49be2ed3c03079b96eb1a4dddbcf62e2c890133ae6d725e759c8e6eed4d4d6a2c55dba42ce3372bc0bb0f1a41b9f6f6baab2eb5913d19685e94b741d6a74c4137d3da5dbc48a675f08c49e67735442a79829a3b8c04f6e87ea1297ab5c463fe403e8c99e2bc9193f8072b6df02b30394389adf3ea791bae6710284969a3dda6a656163ceeb20dafbae67230bf8189ed081e55e2a55daa9f93fb069e2ac87671039c3e18dd4b4a9eb64d809e98d7ee5bb1a4b3c41dc77a97e0cd76a061f4b05f2003091bc29231783d371eb0d3bd9ff01b956d2a528722acd227732e58cb4b01b0319a9447906a1e72ccbc1928d60b197a75958b0ffbb5af0ac0d639f06d017a285889a3f06fe07623ce3b816e5fe351c9e94cb200ac1c4ffe41e4652600854c910eebdcf29bb4fbdb86433dab351b560cc314d0b6845fda1d9fa4f39b73703a96f4e8a5fb6aa6452aad7a711799a113130a2ef7acf2264cc7d14a51075a0583f2dd1dd52e0c7dc6aebeb26cb3ebf6998c54ef05c37e084489ee4b5ce244f75b01fa142bf57b2d5c082b3e2d825b86fa4f03253c25b384313a00f7515bccab5077c9632df0da9b3ce5ee1be6f22258f4d7463dc2f64a60fd61c63153234e64b2c7830ada67ccdfb900c0639caa9addb6ac49579301f275b437a3087b64d22793cc508a13847c80686c8ba584b5335329793f21237bea97140bb078b98c3596204b06465c4072c1281cc5a136b648de38788af357a1e2b443f34d251464b42568de362d1602884e8464a7eaedcce1280f4d2707a7673eab97257b9c978fed2e41f57bdfd8515cdf72c95201a06111755cc2232e126d8560a1dead2da6605c9096cc364d65e8636f5f4502247c9e1cbc22ad0e8beb6318a2947fef67f7ec3d5e1b4b92dbdc25c4ded8b61408e8617070869fe58331fb94f33a35150bcb0db29f79a9d897d807a4551278581a67c80997705a3d443c8eef8563a3abb356934d2243590ad2b57678b4e4d260ed261d9a22e2cd5906853b7e23168a51eb09906893d2d2fa652caf600c1434304cef886695d0b7564577cedef7bc22faed5a64729a9e8df8b35665680c5ede982bb3c6cafd3b5c3d87456b59400f545b06ddbfc35d523b851f14fbd7c90bfe08c0c6144f9586424b64097e86db527b737ef208c66c4c9a086ff537f22193cb24282b437dcc54de46f2ac86f1c0ff17013a95b210617e7d23bd31d32b8f8587a9e6da767f7cd023a0da16dbb8441d70db81138024734d6f1250a31ecf034eab19833d79635bcfad03f46578fa8c45cb960c9aead4aae6cf2bd53d10d100328bb1a8ccb4d4182493f7357480705ae14e148911c0aa53634b927c60cb5863e99df4f3379eb07c6f53b9c12c402277eab7718615fa2af221421edb8b02048488837751fa744fac201893d0254303b86c5c410c1d571acad3aaf5606b515a5bdb47277aa420a39275269415e1bbc5c0c6e0adae28fb6a85d3d3ab47e22b13b66b86e2b9bc35f27c395218cac78769382204ff5f156b4657a158e1861ab6aaccd1846f195e740d113e060e511160f3afaaedd67e983b606df2de2617b8a71e4bf6a431eb1b5c948a7a7d65c3990c5498a07799884cd6ede6d9c7227c619ba1d948e15e30cbec779d1c56167137b75697a4e3bbe864a493461c1be4b0c794c8d47d2567534cb56ac3ed254f3c4a19f42ddaed6ac4ead67d207051a79a2cf92aa506ebde4ddbff87a88bc9b97be3c135c6b75cb9f3a4eb58d9a017734e1bc1f697e3e4187cf915a60f58682ee5b2dc5516539a57cb1dc13971e0c39169f4867d54b4182490af12e54fe8c83d1d3fbdaae2e71a5340de33ebf38d99321341bd2e9dd3324c124c38faaee764a203955a6531f6c9e45b50bbdb625d4969305caf252f34efb82432439083733326c20386658b934b54af301f9887177b6cd50796c14cbf8dcb8108ace5f16b96dce530bdb3648ba9faf004b0b168b01a1f62e9bddea1039aa0ea3675b77d3eacd0e09f1fb47fa812b9fa092db2372dfa7f2dc77a972cfeb4a404ed2f20324f3df411cc1f6f9fa90e3cb6fc209713c1cd65cddb0c063b313e13e20522ffff23f7815df25844bea0c3a96d22b5657f863c41ec6c3b1eb0e1b4dbd45472a268eaa87a68ee5e9a17e078ff30323e5b94fdd52cc82e2d51fe810eb3f8fea11a6b6e530a4d8d10954dbd6c4e2be386b2ed6d161c9f87ee55bd954a74e9c317dfc4715494b205f26a103fa5fd8b7970cdc1e452a4462c0ddc67bfab5b0c02af8b79e2193600eebeffd2b329cb7947d02db063f013b8aa0e490e1ceab2f7c432ecc40c27327bc70f4bcf8e7a1eac632ce8933240213e24467272dd9e82437a2b84e760cda128aaf667a40f91ca1840e1ca3ec37173bec3c80d8ad2dffd5f4f384b7b3d695e406572a33472582d5f288138357f64c4c3c6821ea1b3036d21058fda71a2ab851443c399cb43f5d754170e55ffb766ba73dc54d5ff403d664da774f950660ab5a47dd20d37936babcd6fa98bd616461ce195603e21b6eabc33f88a520038879e12d8a6eb202a91defbfb63e30bb5d174ffaf7625cd4a07bd3a86b16a58bf18b9cc144aa9104f2c7d1f8027a9d80d77db5e13fd93834343698b484a7492dc6a36f72a183813babefac52281e60316f0c5abf79b0b205a4f47850063af29abf0aeaea9f4de94f29132027f1309301cfe0587947acfde53cd6b17f183cf470cd7ed88fc9ae550e61af39dcee35e13af0e02ec10683c197e7294d7bcdfa81cda6c06da2e554fb4c069391d3572cae3f2e4fa65a04afc266e351dfeef2489fa228d354c4d779cf7e2a395a7909267b45ab0516efe5e196b4c0ea45e40b3159bd3e6191b520b91fa4e7b177c55327d6ce4d3bd70d70853544dcad372394e6b6759fd16208fb58e5dd15696e4620e4de84bcf275af578cfb957c5a75d34de85e8db804cd92fdc265465db180720af8e594eb9e06c3e67a49f37dc04013b6ae0a184f2e8befad0e14c8ad551f5f835f10e376d6026485b0dddb0298b50e9501f6a4c94e53b2ddd6083babde96091a0613cbe5f61ccbfe9bbf1f96cf31608c59b04cbf823d32f02668d30cc483b26438ea3810f3fa68169227c0f51a9f625bff3b7068a40c78be00c3f426ddb42e3a928dd1c5e753bcb874208b5a352516a0e8b8face8db974c3376010f15100fb3969bd9abf32b6577e1c7a57b5c99eec1e0fc667b293f0134a7dba433672eb4508731400e155f7172454ccd9f28a0662023c27ca9ddd1740aa5e163ad979215865972ded1bba8065a91f614a7fd201c1bc33da8877622cb8eeaedecbd1fbbfde2397ae493f292c10bcfec2601a74fc31d96551297b739292435e92a87a8def04c870d56f16256e6fdd30e553b346570924b52bd592763f7c82201467cb5d6d648137e0bff67a124482feb1da97e0c7f55a5455ce628582c7102b0a8d661db36297071c622081b16a3de7ae4e772681d9eefa01dd682f9b3d6f4ff1ec77607aea3da226f1f0382823619f6fd29fee056fc993e9c3228dd031ebd5a240a06531d449f3165f4f8bf615a558e24c669c2abd8c234514d7c4485b8d622f60947e3c4d38273b2926923ed6883a540486eaa04902e2491b6e7805cf31bffe22d1a0e0ddf2aa9639b51c5d84b05fef0a0b21dfbc51aa066d5845ec817928b0c9b5542af54be01bf35e3fad8a6c5ddb9ab613ff4ff1a464080610d88ef353be27bbb067f509dd0002b001e6c678f2d7170b5b73f08a7e346f3b18354a54d319dd6ebbc5ada8f0be63ee18c511ed67b0d2270f742f52738dc6425fb9ac2ab2616707648cb18f45fa999a85876ac424e67e5ad5ded46941a11c9f95101050e8c59bf702033bc7f85a8fe4db817a586831e836b522b159e614fd789fabc8d83dd6be1e1268a2c5a6f02ba7a86f87aaf1511871d58bc225a7e852d936271578275d49a32fb5cbb8967c9979f007e77fa093988585fc2b3545daef4c0962a8f4878be5ab15e029f4eff4331152117694bb57afa4ddbe315a2d82ca88721b1bb0794582821a7f6d8dd0f884fb598314b31c0fcdbef021b38605b8e83fd638f09068e2bd389142d90a6efc6d4a42f563bc1e1c31128e31a886b0b928118ed075d66337f0091845c3750879bad1bcf23090641bbdf10826644870ab84be673e751c8978062deaf2fa8d4741380f34b61e034624e42bee9c3b68886af0e3d237ea216fc051f37467cd5525b531f2622bc6ce989163583a23ee5a8fcce50b03be315602895bd1811dc4aafbbe8abe77a41f6d9f4e362e16a2de85941fae873d3c4f9fcfbbecb20c609aa02ecca1586f771797220f9c5776d0084cc63b3b3b03a3fe1a62636b21d6969986cf83264a40ad81a733b7c92659fedcf6192385c1d83a6d058aecbcde16bea25ab83953686a9a56a0524366f2e7fa4f5c34d70e261f61963ef4f20f670b9068690f3db8d5475a7737efc38bcb66b72bdd77f9a7d231ab2fe7288c60e5064c1e01ca73ff166084b784756f6e279a6bfbe1a30e102c85d990d1d0e8bb532a5db51d46a0fb5c7d83d9c1842867ec1f3e2fec4bd15c17d73f377fdad1ec1387222621500eb2cd0e0c205e381e4d3a0225041a4b5a59da34751108e2f36438b0de984eac2218b8b9460fe42a7b61cc7db25272e3ac12b0f36aac0af9614e2c8b24e2e51280116252d0d222efc3ecf3b59b134ad7c5f1ddcc44a1490d87354e29107de15099f3ccb2941e32e17069c413c324c87c9b5eb34f53af6b2ffc0ddbde7f71fb30bb699b5e5ad3073550294436dc3130db55eb0431723df3f23a49b2ea68cfdbbcbde28cfe5fc3dab671e33dbe1c977023e5fcb6b016978ead52025fde57b6e3820c119a4ac17bf74983a4d49b2b00265b92dcb7aecc43171df5b63dd0c35e43190d88b07e3525c2366045ff1f76ae79fe3a8eb84c54dd093184689310d3ee7338a9bd5955d86a574b3d804181acb764109188b72c744380e3f9012f204351515d1ebde5edccde8bc8ef0ebb813879ce0401cfca891ea652de166eabf32db870010d2a1614eef8e479a15d36889dbf5b77d6cc82cc7e262c94ba3850ff7efa8a1103f6b9355d7d1c6aa9ec1341589210bf02bca9e1db9097ba2c977cf8d548f9a87a94865330091f377ff00e95ce04e726257e00eb2c207c5b0e9215e3001eff78da89ae148a801747820b26ddba7900d8c5ec53ddcb9205a1febe6806d7ec2ef02288ce55cde4fc4995cf8fbde120924ac8419464ea8f864b90884d6d2420c5cd0613115044094f192631863851edc8bf1670edb0835adf97a30bcea2bb490690f5aa8ab88e2724d74cc6cbb0be8995f725949aac4b5d2f85504176da2f02e6efbb5fe189308ee7dd5f4bddff805d7f2c00c559b3f47f7e5b143901de4e14129b2b900f6302ecbec65cfa0df9e656b933ad3a6939032003ce9505a492b84e3e7bc3761511fa613d2dfd1b910f42a31f2120d47c69bd69a863301475d8d5b72061570f3154dcf8bc28b7facd49d692474c61a1183e01cb4d355dd86d02f8aab226d89ebdbd181c75797bced118d4222e53b8cfb9c4297e79e397b163be18a98280b6014d06fbc03ddea0a4faeb8ac1a7eb4f31456cdd7795c08e47d5dbacc0840fdd6de16b578789930a94af5053a26ccc808e988bf2eef86219d6dbb39ee4e1d3d90d616e75a79403934415fc160030c5dc442a5c4c60daff60bf9ab52376afb82746ee63b0b42435a0ff533a4d955d245eff921406443d013028447dd10582ff3703b85ac8cfa08842168f2869f7a29128bafff331bbd0d5777fba6d44f36f30dd6a26afdb2b978c35a1003869fb9b3def19a7813d60a4fa9c79954527a16c22e5d5346b939c89b126f3c22bfb726a81e9f77fda3a0a27efc8af7655e53ecc23dfede296e1e6a82fea4ec874c0dcf60b0af0d960a4c3168c3b4fba0fe55f61a8dab9be6e440a071db09f4ae15be6c16d68ea32fde9b901dd5ccae24b5f7d9b1eece18112e70f01afe9f5b3936980ea6e8ad2dd1654cad711b12f508cef465de8de4e36a8c0c2a99d0e6837f50d8945166acbc25b42ff21a438fac1e728a9b01fe8f37a8c16b5007e42ba83fd38c680bf574e65d81d44b9472f4038aad535af9e5ac2fd05c72ddb55d5928538c06ac9918ed536697f0cdaafad37b4699cf724054e10b34641dfeeb25d04da91143efb30751c537820bf91f39010580a4330b7107c417175cd2d0c427b21b1ee29919b59aea2cf6be2b207997635f2a21fba8dfa2cc9827c0875649cbe5f4a86875317787fc28fecd482e026731c0a0fdd839bf14d8b97491b2cbf91c4810a8a9b3354641448c282367cabe07000fa9883325c5d86b62704b5250f701c4d4b5881d89d4fb7048691eeefb50d436f184a6ff7af7198d86bf07078084c74e9e0c73a909c6cb568bf8c15ffb756978ebbddc975ab099c10af7229588066869ded7904adf087b712b154a26f2f8bc8fd4cc92a07bd945b5cc9df41709c8000958b6ddf56947fecedcc6ad86dfa8c6a685e6734c9e624c2cdbbe5e3dfb2fe30459d1b0155e3c1c9fb7a0d04f2440376c56cc8410d8d08e48d1cfa8e3a72cf604f1a05e458ac578b9719bd3f25609d60f85e4d609980a5d7ac8d96ea178e32b056131019a03d497ae2e99b41fd62d9098b7376422bd47e4787bd1928185d6bfc8921d48f15296c97cb82009960e0d998e7e1ec44484b6552114296358a014aa794063001df5a50cdcc5c456d169e616a3444a05548da615d6f062e13cf452744f8aefff90d4c6db752cd19e7f17b4d5aa116e50e4eefad599b642bc3bec3a9a5e7cbba4a8203c977d070e0b5aae3a4b88f9b3e5d25b19d8c43b69e8543930a1dd3e1d6d79b8abb69d379ceb512dfa8f2eac70509996be8467f663f190a9ebd21e1ece7d3b23f6d53cf2cc61efad18d32d5c2b592b605bc36837aaad7a45756ae0b57380ba959e6da72b387cfd90ee18788eb1e231be45921feedff520fe7b542434392f165df29b2958930a1a362c6f181e8bdb4e0cab302619a66e6b3b1d987238ed8954af90a05d85b33f6c8f3e853fae8af9f8d9eeb60d1bbf8334dda7624b5f5dea41c2bfcb85913459cef7ab65454399f8f2e50f56ff6599b80537f63883e7e6e619f0f8bfb47857597d9a3c72a214354a2865b62278b2884e2ba9f56b71ae9b5cea0124827dda817c00d14075a3489955a97e6b1edc3148e06614a8917308f515c760844ad21fb09bd5dfd515a724e6ccf94172455aafff017191a8b71a2bc01598ad5e7f61c27af92f77a0589a2ea55b7ba84b002e46e6309a02f11ef64457bf4bbf7d93183357aeb78a32f8754b4b38cf6105ceeb7c0438685821e39bd65d765e8259e0f635f7f3ed70f2c263acafcd7df11679d70f5bf6c48361db8c893e07833a90823f7560009aebce3f1fb49634de5ffa5c161053414efb22488262b06dc88d46c861e962e6f70bffdf44372739b6c3d1194a17c167055436df1d9c51aeee14b5565332defe45a459b34bdf97e774cfea63f9776885936910a3f027a1a6a423b4dcdf47515c903db4e8be171c468278b481035de5029ed8db051d7948b06d5c7e1ac09eaa34c05aa7f5e17c6714b402384c180cbd7748d57854d15d8830a4ec4194d7dadf158678bbc91e4aea4314c2a88c1d0da386f5ce0759b7c4b50ab549ff47263543fc1c53124ccad460e0b6aca35d51d2a7dcd94ec49a050e1150ccbe423db394d1aac70a1239f2e525de5ee14759c9d48bee3738b44778d40c353c6b16dd8ef9dfaf38cd9e903840b4e15037f2e4e0d26271592c186258017cc21e55e2b24f896f64e8636998fd7bf134165c8ed2a7ede08ba1077599822fcc63419a84fce7f68c6033b708bffb5e5122a07b1ef02b34b79e56719ef6698f4c5b1a91127b2272d3155908d2149f11169f3e62102d2063ab380377c97514440711826f09d935c9e693dac71bbb97df908e1e1c1a158b893595c385370b0cda2499c322a10ca34ec7b9e3437d63bdded2b932a7f1cced3bf370cf749a5808ea8bd32302a7ab914a891748702e8fcea7d0d9a61f9e23b10ff707bd16ab4955161a776876a4db9a5285be00d6214ef93ddf32fe32f140988201a23a980d1021d984940ead085649ccc593bc95df99bb05d0e7c0b44da079e14d1ee2c905d2456e0adad155a4fd5bfa7a222beffa6bf7c066cfd55a3a430b9dace3a51e1d7ff4e340367fb8cebc275394a5019f97bd9904496d0cc7118ddacf0a04ccca8504e5d42ab4c9a27b72b95b75da5b47f9e05c8b3721391ba306011019867b5d5f2ee9fd8dd2faeadfec3c188333dd3f31149f132c706b77656bd3ab15a0c9bc0341299f17525f2f6ded3e9b3e45e58a542fc820fb816362155e4386a3cfc5249c1a9674d3a2515c5c59cc1a1723d30b11b7807ddfdfe387c5493e77d0236673c3a8e815942e27bd6e89b8c6198d189dcfd0ee5f0ee5b8cf0bd34c2e1a5f241bb59b7754c476123ffd78760906c7eca59f1194de7bd86e2d7d1290648a4fe22a33940c375f417db8dadccb201af50b4cac609cfc991c34a3c7c465f82cbd8da22ee6dfd5c9be4fb576d23097fffdac307734a282619be7bd806bf1dba5e592a03e0b833761216f42cb9aa378564e6505b48bf7e76af6ef3d5fc0c4db897b5c9dc27c52ca0315a1548bd13650903d7281075aa5bf5bb533f8908a292038a61741b14b2fedcf6b8e467319bcf383c4062f3d57d3dd8805d15cb7c7064e9b57c1e70cc8d6bfb4ee6c8f4e5e0ef9715a2652230e3d79af81b53bb58fcfaec773d595f30c46ac6f84e36fd6b47dead860a7707cb68d475b8b6c8440b1b705e125e9a8de1c952ee3cf4cb5621db7a95a8dfe395f9950889f7ad66cd4f751d26989dc113e0608d5b9a371d2d68c00ade0f517053b8a60b691594e941a76acfd19274ac40e4442446b4665c2795cd9849019af72ef8436d3a2765459bda22e786b89ea388a22f5d4573f3842db46ac3f52c60e77c11ae4b51ba4e47c3f2b31d44ae917a5b3a9c73e066dd8b8c20de9a0f7c411d067f483048c9e62506d711d3ddb841d469b894f38ebe0b21c8b9b5506dc9ce9e05ed0612c3dde0643f28c56c9c82c1bbfbb520a03afdd041e418f3e865bc54805192e217f6993f5a2abe2d313a8bdfa4e2289d37fcc218325d56e5c21b438ee199e41862b0f98a52bde5592c95df89a248b862022243c2428d451b158fa9612a7c5abb63514e9ed107738ceae79d2fd5020bc3065f79b37c991a5766fb54688ae3b4ce937d60f321d4f5191da3010f083ae21eec9421f236ec0c5717a7045485a27510b8f9a8c004efa21de20885966dbcb469094244f3278dbe108e3249045e0bce8a899a6fdb4bf64457e3a8434e94c636753a8988ddec9a652b51da3298720b9ce0d61da4c63d67bfcc249ccc389b0bc26e67cfa409b115584b56c322fdd9513e78f38da72cfaa5f362a2bcc1cee38afb4be5ecc2b77ed8ee09b3e5c10706cd8a5a7df327cc279d23dcb5e17f1e8170e19650610aa70af87e9f076b21ac7731c32d6ec8154555801b0b233ca97c27d3d17549abd2542edd3afebacc69f206fcb74030d394d700750cc1920e9d1b83c2e7ae742b8e7ba1c62e334a33d4d965292954d50e227b30444fb9f7f92590ef156eda59b9e62bc8f458a28435506f1594d37b2368776e63de129ffa0eddb57ce104cfd9166044a5c870efd442c6cd34e90f5507cadab843b5e9b93e99608ac7f6c0ffc142f32c455d396555f83344521f16518a537ac1212df8ee3ffc3ea7950cfa22bb27eb3c21dac2266a6a03ebb03328226b3f5249f27b200c97ed5a6b1167b3b49fdc312f3b4d833ae98dd3060df3f203017cf0327df8cd7d1836f8f1e881ca880985e54acc610b79d18ddb7519661a34dbe641e78edcd7707e534381f084721490aaed73737d3814484bcd4ad807c0d891087b4c61595236ea2fd71f8c45fc573ce525596dc79b46512c4be0a5f13ce3c8f11036ca45d947f37e2a0e1d9bf66058057c7f0714d56fe3c17d49f0c78aedf5e32d65397367d32b45d9be61b2389ffe0ca039a5c4d876ec2f1a42abdbeb29cdeafa21f93b75c6d26f90a9ee22dc8d55c12c6db567cacd36047d4018874d8ddfb75798b1aa799e404ca570e1e8524cc86a5bedee5bcf2ddcabb4900ef3f880d77ad6361da5e658677329f8fb8657b1e8455544f2d4a194d298d828c633b67c218cc6bb2e9c95c8ea00696c681a59b31be21af039c5947b772a90ee23555beaa6fab78271ef33bcfc26aa1407233db76d2bec755948ba291aa3992beb8d51f5c1bb2accf0ab5938c1b6a0acd2ec8436c40cb46a704327f4e24d600a28c4a5d79ead7b64c3a84a31daec3de78750572e9e23f8bef58473b1389bfcd52c7413e635bc6100766e02e0388dd01b49e4a65419b4d7766a50afc2a3afba9313d0aa041fb637a2e75fd574b1ec616c09ead23e80acfe3ccfa8ec70255e1cec161a190aec22a4f23a9f53b08461afaada66617382d33331813d9640ea1e6ffbea44051075c8c82777754a703284afaf194d879c467fecd1b074b498a3737ab5dd6165608112716df6763e8bfd6edd31e6f0207aa80e8f038d18d787f25d7b342bd2c8df7e866baac2d9e71590e04098c2d1035dc4308439d19bcc8c16124a8ef01dbb2204af74fa75a80b2aee31afb30d01dd355e2d57983ccf653eb96af09e064a895e03685ddc3bf09d44b746edc6ca98c995c912bd4c370a03b15b11dfd510aef940251771c4962bdd26f2239ac985bf9f13f33e785426dad5463e60160cc3d2623b0289100d72ab443bc7e78ad60f80e7b555a39e1863fe520725fac13f9c1678e5e85682d1af40104f935a8350cd33854a7d2974b6dc63452538ba8f8db22955b42cfe33deff693c2e5b8c4e2b850fb018c3a8186ba9f5162587af150d4031ae18844cb895b5b2def0e0b0eb80f6d12ba76af2c07f7a28a848bad3c3b7babad7c8439de8bbda9584ec783b9febc9250240b8bc15feba00c4615cd21f22021a1f747084505dc96c89c451288857cb5030ede997e71ffab57a1a8045dcea472ac062b3577ee49bc52d354d6ea2c4517122adf099f47a21bad596a8a8c0e74b63707a1ef1faf3fdd543c56b285c0db7e70f46c52342e7ff03b0a223581870994b933dd6261c641813ab43056bca0a71c5a447bbd663586dc48b30f1bb90f67fae4f4a9f0b09275ea4862685cae74ba96b62ff07286cc33f62404038017485aa2fa426b6a3195ffeb9842a524aecbd4a53ef70fbb558d3de1a1a897978a7dba053b6959f980f65731a713e33e84bd07be29c121a1750d5c40019490a27baa9491fbba62b98d7dd661a9c5bce63701859191e2982a9d628436ffb9759f12b01509aad37ea9b47a7a604e207c07eb455377ed6b17e7e6090f8e90f927ab0da2c8240df785c182e211e57fcff7d77457620d293d5bbd9c61c3036b15bb8a5501aeb3d30c8e5e3bca73dcbabf01ec76a0e6bf5abe758896f763e8e58dec994a0df43a1146ff3ee577301070fe31a7065bda991a99a612fbc2d81c467d3f0c18161b8574296c44fed46a532d2e8edf2296860d4d24945c444c580ca7bf58d8f422252e40c1fec779efcef914e6d9b473c422d179a81e342e06451d9c494703b03e0ac97bd3d4efdde7220e443bfada6b2527bf70b9ad6a35a387936a5837197457bc61ef14917bc62bae146e2c5611cb55e49953157500bd27a15d6a81958b6a17e495d6abc23ede8c3864e65a18e14bf068bdfbf2deb98a85b78a7abb426ed16f05a2de900570838c90b303aaf3decc99f946b9fb4a61ee6fbddf87ce41901ee06e7c31c5a50df91266328f4bf776b48fcec8ded8cbe567845b89d717aae867b6bb94f5747caae049b3253683456ec4606f9ca5e9f5f1cba5186588a467c15aa6f425589fe8086a3f131e771a35c7abe9bf65a35fd5d5bf788f24a7e30ffb0dd56edbfa9447bbab6c0fb550991cb4e327c977d5c8f8495180c18c50c0e14c7963bbe5b4fce9cc5899683db27afb1c0c7ecfacb73bda163b4dd5b99d5fc72e0ede01cbde790c5c51d95664f1079733e0657055b72a0dc8b967869373ce2d43399279be7c1d61cf712e2ca4530edc443ee9774f7510307cb3e06630043727a2c86db9b982362094287e3fb41c61147a5dec1caf82000c79f767af8295c266924e19f51eea1616cfbea792bc85de988d2fc983d9de83bc27cde1a96d377b5ce35a0b78f424849fd40b6875a41d6fc74aca61b8d37d00c10882c808621eb01fa124fd34f437eeb7573ceb8497300f4bdddbc17c64c65f4214346a2d5c3350cd0137703ded3e2302604c1b6e5f26109757e7b8b1ee0bb9f6ae184eae9b8683ab18f3e3687c211277b4d9024a4e212659d3839c3a702d27ba20c4e72aa72f97cf73c9494222636d975835ccecae9b0cf4e723ed6b1e7b5b64fe56b7a7e6914d2b6cba6b8d3a93b19340bdf61fdff7d5e0d2010a0951d45b90a5cfe87b1064c12068a4bdd50ddc501d471c28f57204e9ef7059332f168a578438bf091dd1f54519e1b5381f30baaedc3b3917e37429ac507ec491ff1371b528c5f6f2c416945b9b6b0b14543820e1b5f3d67711cc5f31a6212b4cd96eca77eefad8d900d82d759a773e431eb48c1fb4c838d50fd7293cd11a33069324bec00b7f9a181d2ef64b975b336f3168bcf0bed9dc9d25406d211fa899199c5c34941de98a87dcb83de03d5e2509dbae41208f2ed862c06dd634b78d9e858de813767cf40427e2a0aeba861fe22c59867e331f4b59b0b7d4cddd60b3610cd2d156bde15083754e7ae44080857216f7a2d780ebc3dace35cee16e1d840e9b2d1345d9893889bf07585dac739e738a24c7041cd3f9da90b4975c235a6feb35ffda9d4687e166be104e59fd9c67d3fec28c9b50f3c25be4d2fa34bbd877f7159a20772812b4b48e73cd6b91b668508d20c7f020c26438787b7d0e82f0362146ccfd177e9e9851892dbab7c17c597f029d1b57f94cfa3a9dc269fb29ce8396797580e5d99c8d1bb1c8101198d6d1a7b409ca3ce24da29c2b48bc2b88cc5d80c1dd4422db9f99ac07fdb920b1c9072bb6cabd79793e1b6e8119389452ed145dfe27e5aa0be7f2133176f278668af951cd584ef072d117a78a24e15b75dd27ffbf1e2fad3efea05a5846e200775c214fef8ec4ce0f8753d415199b0b56935897304b9a1ca072df099d0950e2813e9f2ca82a6e5956fd31eea5f6400c7db0e1e2e57ad672dca3e476181c1034d0bff7f1dc28797da25d2f392fd9ca1650daa8a5efedb3c1068ef6a81e4100da9974e155dc9f57eb8659d6d97ad7b88630659de8dabbceb577605a4e149c5081c5e3a087df7d40332ab14a44d1fc1e595316cb5c4ede2c85f1cba0f92c204aed87d7c381e865ad4ac45da843fd41e817e232245e94bb31c55caf50d2743f9d2904b3d27ec345fff8143148e508f3d78b15bffb027bfa4eab3ecabd67a7b14caa917dfe58236335770a63ce98e1a77f865fcabd1fb44fda34d40dbb5f8dd1509ed496e4b0e60000dc8cb8fdf21dab125c216c158b13ed208dfed963f2c1827a64ca4402a7ce68270fb1355f36b2954149a27d6fee6d9296dc311d0381293ec55629161fc012c25db59f8d1478bad0f912f2d5bdfa43aba1b2ed08275adf87a20f79096b717ea79f4d2b0b37d0bf8a1a740ada62429eae0d8b6500edbffb1d47edba85d0bbbc09183a792e11754fc5f97b515b66cde74f1d79c7d673d45aea7a482ce28397c0789773149de1be61cfa41f71d5022516e0912e18bff3a2f306f773f0b57b26866efe86f44b497347372cf44910948c2053da0a6013d4d4a6b86cfc783e12153ae25488a56c7df0c4e8d17484649d2663773ed3c88fad06037086a07e39b466288af2ba92c682a4d6bc77232127d0bb77f281e46c0ec0c0cbef473bc757ffb9b8990a0a480cbd71adccea519dbd541172b68924d30cec8a11ee110ad3cf2fcf17c347d816695242a3dfac087a77964573edd6a902b88d6f162f949ad48291cff1074c1870fb45f22bbf8b91a1fa1ee55968a6be7ef06e9e1dd4078d038f5c5f912c22d8e1922d4508fc18c40bf8e3fa751af8013ad166ea7543a49da8d8aaadda4901c7bf7be28213190c2e247ff8c103b5facc48bd48cf71db497c15fe1b229acba617ba912b6cad91b9d88dd3dec17f07569263bad45192f55c349f2cf65377bb94f6b74238fc63b155177a05a1369e50a87a8ad6ac7efb641e91c13e50a7b585b7734f84d962d558c4eaf1a1d7a03471a63c922107d1cc458770101f102df138718d99ebc9bb1b9b6b2c9d409925b5d44cc96bd1f4acda2b39f7b12551feed2468f671e36e3f1028cc17f7694d3682d9c9e2e4a6b646133a953e8bd7432d75b3bd332518043a46380ee0806dac7ad66bcdf21ea104ed2a373c23ab2b9a746a579f4fd2effbafd4a6eb5c9e3ffb3387d40a21ceab791c939940c4b462d8bd3ef0bae2e9ef9a070f4dff53b840c9b5318b7764a667e7faf43e003afc0e1c2e9961b19c1849eed40db924c48dfb55bf3293725575d0a13ce4700f6a85fea0b0073bb97e8ae93da763ec5dad53eaabb68b6f69dff20009efe6b23577003b5310313cc72e828d12eaaec09c21684f0a6e7ba9ea5fe4e849d2d6267fc930ad0e38cb12cb422055ab326fc8937868f22fed21e26f45833d14646e02a173b4ef0a56d2fd201485c8e7abfca9a5f374f93898eda6f1f548e1297fe11937eeeb957c130b14df860540efcb95bb722f126ccbcbd3aa6a00170d82838eab6ae7ea983222449f867cf9948d4293671f3fa0d0affd034185600f395f454de443e92d504ba75f7c0c6dd76ea0ed41abf68a26b683e7a0c9a5a02e055527efd0921f11293e0768cf7b8eed76f2fe6ab2f62e5afc0ef9c932615fc8f091614605fea7d902dd59c9a376a84cec92e77c4d65a5ce72bcbca6b3764986ff83c12a20c73cf10d112e1eaa41f3547d968da914b843fb346f97aca6c557aaa3caa09463e8a8b14b3f4e09b3dc3510ffe5ea9434d98d0ad197b5d8e0e362c39ca44d2f931819b0e256c75e8ceea28b37c0269bdd87bfd158d47e646504d0d41c6c2027d345183b52c373ef1afaf95a5e1d28b344dc1023a2518f07671fe5d909e64bedef2c930fb312f41e8bcf86261e3fd6c54a59baf2e92f35562f5024c92f3fe1bc0217d6c0a181fa27fdd74b2fae4364210d3bae20a40e46f63f63d12daf43a446ccd35f5e76aef1323a2b41b86d827c007bb41a897de396c0a4f6875c7495902064b286bfec834d85a7980ef66c73a7ae2d4db4f202f7763c9f85c18c220f759d640c0d4778ccfa48f74603693f85b0e21e9b07dd957aaec1a7bc488c9752384fc3a686bf8d8a74ad1444e399322e89dd162143f308d666d915c54772bbebdaa66bbf526a423ee7c29bc237bb7339a396abfac0cd908e4cb60ba4b1e81079eaf37bf72cda3adbbf2880fdb046c50bcaeed37295fb77cf92d0262a72f232617d63bbc4ffb016b00920af07160b20bab0babc2e3f25cdbc22439b9b5e64712bfef3c251a0a6c72e85b144914f458f7c4821b493c43968b6bbfcf2e2c0bf192c77e42ef434ecc73a3ebfa91ca9df9b740756c21eb1fcae5323babed52427fad504819e7df92837ea4f42795cf59edb9b8b8abeaf4bb898f0498f2644b7525fb2f5fd1676ab0065582891cc13c4e52ae9c8a82e68a02491e856f277de065d65d71253b1bff12d3493b6058a7778a3baff0c986bef33fe239eaf8d3583445ae8b7f452ecf89aed07e98dcebe8500bba559b5966202a3ce4cb3ccfb445bdf5b8b749dcdeab151b5eafc296a5e90c105b74c26896e72b01dcb09e5ebe07ebd8c5b813bd6fee5eedc83166836b791d20d31904c78d2b8e1cbff8809fb04e202421b8425620e9c6e0ad86017863091a7275e9ef8a85bb1d76ee6c370def3047b04803768b9747391960d4ee36c8c92feb14fbdfd6a9e8fdec8a682aa215fe9f9f9f709428a1214475f8429ec5dc8b121ac9b0efadce05f095acaa01508b127aa01dbe9e11170ea9cdfd812277f1048e416acc8bf11697bce67599af0be929888007f916282e13e4c445228c16d8cc5a159b7d410b3602ac5b85dc13b9f5653d8ffe044e63b165cdc6d07ffcd00af7b9ff97e66a1c86e0bd9ab7cb953a8ca55dd250357b2ab25422fd89f61ce97669450c62937c5e5a340106f1cde88c58050f36cb7f77e123545263e49c4a99e15600ee000820a7a7507387314949c27a70dedba14b738c453428c9d7fbceee038950ef34447bfdc8b4aa739bc139a8c0bc65a4d507dd033c013340527dda48f932e289d111ee9d3fd9f59eb45c71ea21ddb1d8f505c1cd6c44884744ae94aa3146951aca508565c155e34dafd5e44b76c703f624cff53fb928770e0bef53daebf0820698b681f71f07f6b6b8d49f9d90fa4c70202a062a9f877ff4f3087eec40c775058ce9392194e7853b951ed05ab8ffb12d95dc8471fdf81b5de608d70d00e570bef4a1b05b526a539a18df1d21ac07927cede21bed3ee25b83e5f72cf84369f5e4f0386f6d1314e0cfab35311e535c7cc3afc0d1c53bdd3d26e668e097b927ecce68235b4692a5a2ec39c3b5bf8fc7ef401d98aeb4b48dca9ffa8efc0b1b0d2ce012aa02366357d9d1e681aab45c3e71d2030a4d7b4f93c94be2bfbb3075aa5648001bd4c6c615efd5e1f8af8569c6de3f29a6226c0bb7a0a55370a47fcb178a0fbc1aed74d62c98fbbcb244ed8a32ed1ca0d1c82fd52e8ebef63bcb153e2ea0d87ca554a53ef6bc8b2b19c483eedc69e03958dd6879911d13724f322161bb293d89433f14d1469e03cacc36df3c816dd784bd1be737fd50e5a803cb13d0077f679c96ee959fb099f9d8647317645bc9762c227a1a27a9d51109b1292fca3bcda1d3dcaee0692a6524caa0540edda3380a9a07a13bdaec8e3cc723603540d12436506b034dc578bfe08d694fc32c7788822f735dd9421e2230b3dd1d7f3481046f2e63f19a787b1142864e33005685460e48d75bc88b36ee409f2263d0ee34d8b69abc6206a6a9c7548bbc348e2bfe0d1e138ae9e5add6aea81d3ce9d801696ae6020de64b91a5ed8e7d755aab4192671831d6eaba3cdd721ba7b3245ab6396c395ae176c2f14e67db80e5530fc02e647edcd1759acf470fc93d6240afbb2524540bb41927fb98e18e6204f30ffcb967d1a4f2740392d44386425ca920a9be9c04fd02ba3bb626910ce9fc8bc8c9d9b1bc2dfc5a93b6c08e5c57cb955281fbdbd1df87dd4d36af65e9bb0db18439e858bc0a3f446fbd78e6668ef1c369045453229b133032d73bce1bd72c1fe1a143352927925c248af6c851ff0b18143b88415c09dac842c483274dc5d90963a12aeda8477d3616321e48bf6433d578e8c6ac6cf4167732e2041c34dc2bcf4e7d510a89e746a58f1916eb18881cf081fe3634768ac1e1a74abebf80e5565ec96a2bdaaf23f7a33f571df4f2dc97277437d1d43116da7851d9ebcb43a08c5a99f47fa13b4f9056b7c4b0424669712b87e9753d1899248952a0058cd3477bcab8e2f3c6d3086d7e2b756b9e503ff18ed2a4a325357ed01a211cd3273a2777f7b35147f6079b90b069c5cd0874584fa5e39c841647b34be3b8741a22593d84592dc0ee31cc0fbf0fb3b8c510686fd3c91ab3d8e5abb4f26bfc8d61cf7644b01854dc6e41e98df047e59fd619a2525583fb7fe8289fff852f95bf20c7a2462cc6b8359f07d994f3fcfa60f4e08d3cf140c6db28655caea45a294b6eb3d589b0ad35e68348c91cbfb8a4853f1569a447166cd2e9539a7a650d4ddf9c31cdcf995e2e3bc192beb34ce8500de322082564505fe52edece47b38d6f3f13acb61bd513c0e4304be614daa896abfa54d57f8d2de316bd6d1a17d518e2e44b7a370a7f510895169a5edd3e5537978bf95a8ae465067b36d5be1e8b9882b17a31f5053d1b302748807d8bd6fc569e176491e0620f8896e0aa5e778ebdf444296182aac468cd7ac7807b2a67f62a2d59308b0f5b916eb5be7428b77bb6eb1160772b590d6a093dfc7169e754f9853784ed30a5ad81a65d29f64ee60b2e31b63ea498563a965befc3f1d19c3a581c9a0ca6ccd147db1090085f569f315e37d34970c4c499fb406d3e56f9c43fe3fd8cd3cf5e2cb236bdd1b9c9c5acbc8d403408af02b1972bdb8b4dc4f29532a2191ad5d90f40c08e3d9693425b8ec662b682262fceddbbfce4beb5b05efcae41b146630bc6bb1a4d9409f15c41a9ca3b355cef425471b746cf516dcaef6f172e81861299c0cb86454908131949a03b90466c3e8950800825dcf70dfa4457b35e9089842db39e9b2c54c3b4eef3f71d83e020ca65e07f6734b538405ab21b5c239f48b8478276497a19c3d9e6dc19024e37b37f71f30e11f54df555b688e487f71b1782522ac8787a7e276e5799890176fde8f3736abbb8d54df5102ba0f342ff69969a54a48121c5b02acb405393ce399abf31c0dfe36568966adc85e86e7bd9d52b1a1e9526db7b6c941a9989cad873dd081a3cc317829908ac2284635fed8f407733f733fd3eb61e6c197b6b0487fb51b10f0709fed29d6eeb7703a866eda0697f8e7fc04fe75f9e9b8b87de98392d143e75ea9b95b2eb395bc532a33c58311bd803205b2777917aecd617706477da8c86a2b70e3fd7b571594d4f480390ad82a8ce2f37abaca4c73b197bd2b5325769d98ed0671e91a72ad3b62cd20c930fe99901a8a409ed35255d1f3bc0718e8c86e3f5ef3274cfbc4fe68652e82debed96b54acc5558dd0ecc025f6df12cf0481e9bb0f60bf1189894e07a6b2012c3add514904025925f79a66b90a7c96ae28fce4c31b9a504183d69e11ae25ad73a04fecfde47f15837756e9535699ba8af6efc5751579c7f7f5e85d42d506cafb40f99d1062bd3f7a4feebedd8dc5804912f73f769fafd2260461e29875913e8729ba94b8fe63cbd685b7e6ba0e02c3a0e2181a6e309cac895200df0ddee14455276e97f1e457d5dab6d46706bf4a7698eb578626a816c107361f861b83112b605a4dcd7c6da5c8930e0502d8f2e120a992ae92f66052d3f49a66688fc435f6a631cf30c8fd1698ec05457c7252317e2aa669bb6e99b58acc71a67db045ef890bc0bf8e4399aa1c80bc193ed1784700187a2c1ba3979bd6805e8b69e125af70e8a2da8ec4f2533114d9dd7c23f46a16f576c3e1ac78076bece80e66c70c468b3654e1909c00ed39aad3143fe5ccc1e72da14456f06f11e728a8f1b9cf5d1d4e18a738ddf1b751c08dc1035b854409f5732a8a3ef8f51388ebbc2bfd10337b30abb125f828a9c6d40f7474f8042c5a69a72002853c070b111b04a87de2d6b312452c02b132479324c814642ab6149683ffc8a8be95936d61370307ce299df5af93cd9e5a68dac64ed25539d715135c276605e74e4b4bd46b9c0fc98ee0c67abdd527cdddde8d73b4239d301abd554cf28d8ca20994109b703953567bcc4c4d9f07c5b23f7f8da21fcf1aeb56e8647f99f8f31fbfe97717e420142504abe60bc4b703cc0f9b7009c608508eca3741cfdfc71e41682c1b5c1ec21eedebed6b3738a72443efa72181f73b725e7bccd11a671d286e92383a2d9d01e71c2415830a1d70861b28baf61394edae4c4b2b56aadb8c382ff55530d270d86d01861bde0a362c5909501e444d58c3785493bbf094f8894195a6a2cb51c58371016c6f5169583bfbda8f0d7348969f7ba4eaf11de0cc469827b85b796979b44ec441214b0b55f776195aa5d2fe07cdfc86c253b0f5194496c2b5054805bb6ef6dc08b9a490bbdfbc8ba21fd2fa169d0eadbdbc0282d1e1086896504726a40513e2130abb6b356032578db98cc7b56b777269f1aba711edf970dafa7f6f517074b0e29318854e5e69b1baedacb0db92add1e8d9a912e281dc60825d75d5a55759d61c2c4a1b2ee358db140452eda7acb5f80504423c459639fd910e056cee0e16b26622bcef16462272cf9de4b51c703c9a95a388855b49cf194b630592fa9efa8988946d51fc2114d3bdea0a389a85a087ed96adcaf8f3938a3ecdfb09005b2550711966e9fff6cf3474f3f8767eabff0d90f2475d6b211fae09d87c96d51cbb8b71645228de0159a0e725889ab05789f34b34e2940abac2a02f766a8f58832ef732d6de9c43a05e636c821bcd8a0dde4d36786c51cfa207fc397fa0c02202bbb8d37fb48e9dc2beadc811698da8ecdbb96efafaad1e09f16721a696f732d7b66c11e31e1b6ef7803853349ebf351814074fd64387bfb085aaedbbec07d65653e97cacd80a35a5ddb4207d8889585f5badfc111e8262887f6e216f42c021662389884c3dd185a6fdf8b0065d93ddce3398ea9b9aad4f08fc5765ae78c3235fab8696dc0853edaa024ef2d21e58b476a0389c1b2d0879ba87e0e99a68fb0872504afb0c49601e269dc841462c3c25a2011305eb7acb0b772b6cf1793b7dba56f5798038eff4b7b4f781776bb876fb50a6065ece2aa231a91044e31be0cd925bc2d63cfc88e539ee9eb3b9740f44e19841e0c37614caaad0ea11bc9bf0bc6fa628331f1827f1dd44143d951d37b262f67c15b65c1378d69fc482d8013c9ca30651dbeb4473b043bd69a5ae09c4d115e04a98e50355b82513ba7ebb6668a12f8970fb1330cb0cbd2017065efcb211ccd2b80ff127b2061a07ca15ceb76fb294aea65eb08bf9f367bfa13c1aa1b7cf7a13c833fee50589f124f4cd5a3c0c7abf770eb70c60f7b5bd98d4694fd102f4ec118bc08a49073c38e30faaa460c2c7687e9770fc49eff6214591f0d5c710f6efc466ca3f2d2e84fe13804ee3a6780971eaa3b52a63f3872a8d54f97594da9d8acbd989d2c9646f81280f7550e99764312f8d791e2b6e2e7415fe99cf96df39f6e8a835994b9b46a1f37eed86f31945aab1028158c3dcc62819bdc7c2b1371b37f309a3b704c9c9175df5c2053497d2757d9e3124a6dcdeffab99c4ce9afb7c16c266fa2fa37c5ca2f3c11f8b5608c9d529f8a820b8674157c7d4a1ce9c20ef6a117e0752a094b8767249c2e7808c373511135f5af4518a8a70643f36945821b6496249d7275536eb4ba2f44ddb5d2ac8e66ede2532e33dea4319db18227540e83f14de8a01935a585db166550dc8f37ea5163dc1a6d1c8feeb9e5d69fa7ac6b454e27112399081195a21e10694639c027e4fce910f451547643af5fda3e094ccba887b73fa28f19f736fd0522e89b2fac2db926c32b5cd1f3ff164932cb9f5f21bad4f07fd38a6f4a279fc3e7bf1ecee74a0ac27cc93ee4fd66c2f907a054f374ab88af16acf2ee7193c13d0e73dcc6ad3e499dec6df6de00b0fca766bda5f4e5609298b91bf4d9713fd0235b44d23c5a7d0bacbe280474c5db3319fc6958e73fad2065eb40046d02f6eb909e38ecbc83569329d099bb4bbc87744d6f8f4a18fcd0e83a6d991d90ca1d09efb1f9352f45b75c1a11397b6caa7ddf924a3e4f777c8d35c107894a6589891361dcd8d66e9971a5264354c0de12d84d4a489338e4ae8d1ffe37ec146404265690a91c3472f8b1e04484f686d0dfe9992bca42a5f625338099ba55a82ac206d6fb1055340fdc1f9e91a4988df21a7348fa68da531d4abaa31d01f511256257968dfeeec80766450030a3ea277f7c85fb73d499dd017e85111df33adc5f663ae7500aa22f8250b70e25c59c8a0af62eea02dade9111599fe6c6e5d59393484dd7ec674dd6c1f5291eaeea011fba6cdc6ada1e9a59b205bef79b42fe6017caca41359be4b3cb2b262959418060d32f9807d177ff20ed58f252fa9258ea19b7d28bb9a86f7053d66ae22e3e27532f6e6e317488c08045d72dde8ac67be54a89cb7ac7d305090e56b17bbd3264a4088788a97d04391e5ec6125adaaf6c006f550addc8a6084de0cf4158a6e5f036c6bd2dcac68773d8af760e3ea2f4401f26a7b567ce1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>栈和队列</title>
    <url>/2024/09/23/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c12f2ccb74e60fb976739bda31bdd5738b0a3092a22df92e2872dbd374d1a5af"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表</title>
    <url>/2024/09/18/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2d2c0f7353ec54a069a1bc7a04c5c74edff063a7f389c33ad1972c2fd22bd30e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>近世代数-001-二元运算及其性质</title>
    <url>/2024/10/13/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0-%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E5%8F%8A%E5%85%B6%E6%80%A7%E8%B4%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241013103139067.png" alt="image-20241013103139067"></p>
<p><strong>二元运算的定义</strong>：设S为集合，映射f：SxS-&gt;S称为S上的一个二元运算</p>
<ul>
<li>S中任意两个元素都可以进行运算，且运算的结果唯一</li>
<li>S中任何两个元素的运算结果都属于S，这个性质成为运算的<strong>封闭性</strong></li>
<li>按照定义，运算的封闭性已经蕴含在定义中</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241013104002682.png" alt="image-20241013104002682"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241013104933404.png" alt="image-20241013104933404"></p>
<p><strong>一元运算的定义</strong>：设S为集合，映射f : S→S 称为S上的一元运算.</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241013105049418.png" alt="image-20241013105049418"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015102834810.png" alt="image-20241015102834810"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015102847256.png" alt="image-20241015102847256"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015102857820.png" alt="image-20241015102857820"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015102908957.png" alt="image-20241015102908957"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015102918846.png" alt="image-20241015102918846"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015103014770.png" alt="image-20241015103014770"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015103032266.png" alt="image-20241015103032266"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015103057817.png" alt="image-20241015103057817"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015103728223.png" alt="image-20241015103728223"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015103810852.png" alt="image-20241015103810852"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015103834722.png" alt="image-20241015103834722"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015104002518.png" alt="image-20241015104002518"></p>
<ul>
<li>同理，如果一个二元运算有左零元θl，一定有右零元θr吗？</li>
</ul>
<p>​	答案是否定的，考虑二元运算 x 。y &#x3D;  x</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015104200533.png" alt="image-20241015104200533"></p>
<p>（1）（2）不一定</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015104618563.png" alt="image-20241015104618563"></p>
<ul>
<li><p>如果x有左逆元yl，那x一定有右逆元yr吗?（不一定）</p>
<p>——单射左可逆，满射右可逆</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>近世代数</tag>
      </tags>
  </entry>
  <entry>
    <title>近世代数-002-代数系统及其同态与同构</title>
    <url>/2024/10/13/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0-%E4%BB%A3%E6%95%B0%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%90%8C%E6%80%81%E4%B8%8E%E5%90%8C%E6%9E%84/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015110807262.png" alt="image-20241015110807262"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015110744452.png" alt="image-20241015110744452"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015111357536.png" alt="image-20241015111357536"></p>
<p>近世代数（或抽象代数）的主要研究内容就是 研究所谓的代数系统，即带有运算的集合。在近世 代数里，不管是在群、环里还是在其它代数系统 里，研究一种代数系统就是要解决这一系统的<strong>存在问题、数量问题和构造问题</strong>。如果对于一个代数系 统，这三个问题能得到圆满的解答，研究的目的就 算达到了</p>
<p><strong>由已知的代数系统可以通过系统的方法构建新 的代数系统，即子代数和积代数。 这些代数系统（即子代数和积代数）能够保持 或者基本上保持原有代数系统的良好性质。</strong></p>
<h2 id="子代数"><a href="#子代数" class="headerlink" title="子代数"></a>子代数</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015112033678.png" alt="image-20241015112033678"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015112158434.png" alt="image-20241015112158434"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015112411970.png" alt="image-20241015112411970"></p>
<h2 id="积代数"><a href="#积代数" class="headerlink" title="积代数"></a>积代数</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015112447943.png" alt="image-20241015112447943"></p>
<ol>
<li>第一步，把定义域扩充到<strong>笛卡尔积</strong></li>
<li>第二步，笛卡尔积中取出两个元素，进行新定义运算</li>
<li>第三步，定义的新运算等于两个笛卡尔积中，属于a的元素和属于b的元素分别进行原有运算</li>
</ol>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015113323852.png" alt="image-20241015113323852"></p>
<p>在代数系统的研究中，子代数和积代数是两个重要的概念。让我们逐一讨论这两个问题。</p>
<h3 id="1-子代数的存在性"><a href="#1-子代数的存在性" class="headerlink" title="1. 子代数的存在性"></a>1. <strong>子代数的存在性</strong></h3><ul>
<li><strong>子代数（Subalgebra）</strong>：子代数是从原代数系统中选出一个子集，并且这个子集在代数运算下仍然封闭（也就是说，子集中任意两个元素进行原代数系统的运算，结果仍在子集中）。子代数继承了原代数系统的运算和性质。</li>
</ul>
<h4 id="问题：设-V-是一个代数系统，-V-一定有子代数吗？或者-V-的子代数一定存在吗？"><a href="#问题：设-V-是一个代数系统，-V-一定有子代数吗？或者-V-的子代数一定存在吗？" class="headerlink" title="问题：设 ( V ) 是一个代数系统，( V ) 一定有子代数吗？或者 ( V ) 的子代数一定存在吗？"></a>问题：设 ( V ) 是一个代数系统，( V ) 一定有子代数吗？或者 ( V ) 的子代数一定存在吗？</h4><ul>
<li><p><strong>答案：是的，代数系统 ( V ) 总是有子代数的</strong>。</p>
</li>
<li><p><strong>解释：</strong> 每个代数系统至少有两个子代数：</p>
<ol>
<li><strong>平凡子代数（trivial subalgebra）</strong>：包含代数系统的单位元或某些特殊元素，通常是系统中唯一的零元素或单位元素（例如，在一个群中，包含唯一单位元的子集构成平凡子群）。</li>
<li><strong>自身子代数</strong>：代数系统本身就是它的一个子代数。</li>
</ol>
</li>
<li><p><strong>总结</strong>：因此，代数系统 ( V ) 至少有两个子代数，平凡子代数和代数系统本身。这意味着<strong>子代数总是存在的</strong>。</p>
</li>
</ul>
<h3 id="2-积代数的存在性"><a href="#2-积代数的存在性" class="headerlink" title="2. 积代数的存在性"></a>2. <strong>积代数的存在性</strong></h3><ul>
<li><strong>积代数（Product Algebra）</strong>：积代数是指在给定的代数系统上，构造一个新代数系统，其元素是原系统的元素对（或更高维的元素组），并且新系统中的运算是在每个坐标分量上分别进行原系统的运算。形式上，如果 ( V_1 ) 和 ( V_2 ) 是两个代数系统，那么它们的积代数 ( V_1 \times V_2 ) 是由所有形式为 ( (v_1, v_2) ) 的元素组成，其中 ( v_1 \in V_1 )，( v_2 \in V_2 )，且代数运算是分量的逐点运算。</li>
</ul>
<h4 id="问题：设-V-是一个代数系统，-V-一定有积代数吗？或者-V-的积代数一定存在吗？"><a href="#问题：设-V-是一个代数系统，-V-一定有积代数吗？或者-V-的积代数一定存在吗？" class="headerlink" title="问题：设 ( V ) 是一个代数系统，( V ) 一定有积代数吗？或者 ( V ) 的积代数一定存在吗？"></a>问题：设 ( V ) 是一个代数系统，( V ) 一定有积代数吗？或者 ( V ) 的积代数一定存在吗？</h4><ul>
<li><p><strong>答案：是的，积代数一定存在</strong>，但这取决于你是否给定了另一个代数系统进行积运算。</p>
</li>
<li><p><strong>解释：</strong></p>
<ul>
<li>如果你有两个代数系统 ( V_1 ) 和 ( V_2 )，你可以总是构造它们的积代数 ( V_1 \times V_2 )。积代数的定义是根据两个代数系统的逐分量运算构造的，因此，只要你有两个代数系统，积代数总是可以存在的。</li>
<li>对于一个代数系统 ( V ) 自身，如果你想构造与自己做积代数（即 ( V \times V )），这个积代数也是存在的。</li>
</ul>
</li>
<li><p><strong>总结</strong>：积代数总是可以构造的，因为积代数是一个代数运算的扩展，它取决于给定代数系统的逐点运算。因此，<strong>积代数的存在性是可以保证的</strong>，只要有至少一个代数系统（如自身或其他代数系统）来构造积。</p>
</li>
</ul>
<hr>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li><strong>子代数的存在性</strong>：每个代数系统至少有两个子代数（平凡子代数和自身子代数），因此子代数总是存在的。</li>
<li><strong>积代数的存在性</strong>：给定一个代数系统 ( V )，它的积代数（无论是自身的积代数，还是与其他系统的积代数）总是可以构造，因此积代数也一定存在。</li>
</ol>
<h2 id="同态映射"><a href="#同态映射" class="headerlink" title="同态映射"></a>同态映射</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015114138959.png" alt="image-20241015114138959"></p>
<ol>
<li>两个定义域为A,B的代数系统，一个A-&gt;B的映射</li>
<li>如果A中取出x，y，进行A系统内的运算以后，映射到B系统，，等于A中的两个元素先映射到B系统，再进行B系统内的运算，则这个<strong>映射f</strong>称为同态映射，简称同态</li>
<li>f是单射，满射，双射分别称为 单同态，满同态（此时称V2是V1的同态像，记作V1~V2）,同构</li>
<li>如果v1&#x3D;v2，自同态</li>
</ol>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015115806377.png" alt="image-20241015115806377"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241015115906592.png" alt="image-20241015115906592"></p>
<ol>
<li><p>a@b &#x3D; b@a ,f(a@b) &#x3D; <strong>f(a)#f(b)</strong> &#x3D;  f(b@a) &#x3D; <strong>f(b)#f(a)</strong>,</p>
<p>至于为什么要规定满同态才成立，想想便知，上面的式子其实已经隐含了一个条件，那就是对于b里面的所有能表示成<strong>f(x属于A)<strong>的元素，运算#具有交换律，那想要让所有B</strong>中元素对于运算#都具有交换律，就要保证所有B中的的元素都能表示成a中元素的f映射</strong>，也就是必须A-&gt;B的映射f为满射，即满同态</p>
</li>
<li><p>a@(b?c) &#x3D; a@c ?b@c , f(a@(b?c)) &#x3D; f(a)#f(b?c) &#x3D;<strong>f(a)#(f(b)&amp;f(c)</strong></p>
<p>f(a@c ?b@c) &#x3D; f(a@c) &amp; f(b@c) &#x3D; <strong>f(a)#f(c) &amp;f(b)#f(c)</strong></p>
<p>同理，规定满同态成立的原因，也是要把存在A中元素，能映射到B中元素的每一个角落，使得B也有这个性质</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018162651115.png" alt="image-20241018162651115"></p>
<ul>
<li><strong>总结来说，对于满同态映射f，A中的 交换律 分配律 单位元 零元 逆元 均能由f映射到B</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018163006857.png" alt="image-20241018163006857"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018163028610.png" alt="image-20241018163028610"></p>
<h3 id="注意，群理论中的ker和商集的定义-与-集合论-等价类中ker和商集的定义不一样！"><a href="#注意，群理论中的ker和商集的定义-与-集合论-等价类中ker和商集的定义不一样！" class="headerlink" title="注意，群理论中的ker和商集的定义 与 集合论 等价类中ker和商集的定义不一样！"></a><strong>注意，群理论中的ker和商集的定义 与 集合论 等价类中ker和商集的定义不一样！</strong></h3><h3 id="1-群论中的“核”和“商群”"><a href="#1-群论中的“核”和“商群”" class="headerlink" title="1. 群论中的“核”和“商群”"></a>1. 群论中的“核”和“商群”</h3><p>在<strong>群论</strong>中，核和商群是与<strong>群同态</strong>相关的概念：</p>
<ul>
<li><strong>核（kernel）</strong>：对于一个群同态 f:G→G′<em>f</em>:<em>G</em>→<em>G</em>′，核是那些被映射到目标群 G′<em>G</em>′ 中<strong>单位元</strong>的元素集合。核只包括那些在同态下“失去”区别的元素，它们被看作相等。</li>
<li><strong>商群（quotient group）</strong>：商群是通过核来构造的，它的元素是<strong>陪集（coset）</strong>。陪集将原群 G<em>G</em> 中那些在同态下被映射到 G′<em>G</em>′ 中同一个元素的所有元素归为一组。商群中的每个元素实际上是原群的一个等价类，这些等价类是根据映射到 G′<em>G</em>′ 中同一元素来分的。</li>
</ul>
<h3 id="2-等价关系和等价类中的“核”和“商集”"><a href="#2-等价关系和等价类中的“核”和“商集”" class="headerlink" title="2. 等价关系和等价类中的“核”和“商集”"></a>2. 等价关系和等价类中的“核”和“商集”</h3><p>在<strong>等价关系</strong>和<strong>集合论</strong>中，确实有类似的概念，但定义略有不同：</p>
<ul>
<li><strong>等价类</strong>：等价关系是集合中的一种关系，表示两个元素“等价”。如果两个元素通过某个等价关系被认为是等价的，它们属于同一个<strong>等价类</strong>。一个集合可以根据等价关系分成若干个等价类。</li>
<li><strong>核</strong>：在一些代数结构（如模糊集合、泛代数）中，核可以表示<strong>映射到同一元素的元素集合</strong>。这与你提到的情况类似，即核是那些通过某个映射被映射到相同元素的元素的集合。</li>
<li>**商集：在等价关系下，商集是将所有等价类作为集合中的单个元素看待的结果。换句话说，商集中的每个元素都是一个等价类，这些等价类包含了原集合中所有相互等价的元素。</li>
</ul>
<h3 id="3-二者的异同"><a href="#3-二者的异同" class="headerlink" title="3. 二者的异同"></a>3. 二者的异同</h3><p>尽管<strong>群论</strong>中的核和商群与<strong>集合论</strong>中的核和商集存在一些联系，但它们的定义和使用方式是不同的：</p>
<ul>
<li><strong>核的相似点</strong>：在集合论的等价类中，核可以看作是那些通过某个映射或等价关系被归为同一类的元素集合。而在群论中，核是映射到单位元的元素集合，它们也是在映射下“无法区分”的元素。</li>
<li><strong>商集和商群的区别</strong>：集合论中的<strong>商集</strong>是将等价类视为集合中的单个元素，而<strong>商群</strong>则不仅仅是分类，更是保留了群的结构（运算规则）。群论中的商群不仅是“分类”，还要满足群的运算性质。</li>
</ul>
<h3 id="对于群论中ker和商集的理解（相对于集合论，它有什么改变）："><a href="#对于群论中ker和商集的理解（相对于集合论，它有什么改变）：" class="headerlink" title="对于群论中ker和商集的理解（相对于集合论，它有什么改变）："></a>对于群论中ker和商集的理解（相对于集合论，它有什么改变）：</h3><ol>
<li><strong>为什么核是映射到单位元的元素，而不是映射到其他元素的元素？</strong><ul>
<li>核的定义就是用来捕捉映射下变成单位元的元素的。这个定义在同态理论中很重要，因为核的性质与同态的性质直接相关。比如，ker⁡(f)ker(<em>f</em>) 的元素决定了哪些元素在同态映射中“无变化”。</li>
</ul>
</li>
<li><strong>映射到其他元素的原群中的元素怎么办？</strong><ul>
<li>它们没有被“遗弃”，而是通过陪集的方式出现在商群 G&#x2F;ker⁡(f)<em>G</em>&#x2F;ker(<em>f</em>) 中。G<em>G</em> 中每一个映射到 G′<em>G</em>′ 中不同元素 g′∈G′<em>g</em>′∈<em>G</em>′ 的元素对应一个特定的陪集 gker⁡(f)<em>g</em>ker(<em>f</em>)。这就是商群的构造方式，商群中每一个元素（陪集）实际上代表了 G<em>G</em> 中一类被 f<em>f</em> 映射为同一 G′<em>G</em>′ 元素的元素。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>近世代数</tag>
      </tags>
  </entry>
  <entry>
    <title>近世代数-005-有限群和子群</title>
    <url>/2024/10/18/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0-%E6%9C%89%E9%99%90%E7%BE%A4%E5%92%8C%E5%AD%90%E7%BE%A4/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h2><p>有限群的定义及性质(补充)</p>
<p>子群的定义</p>
<p>子群的性质</p>
<p>子群的判别 </p>
<p>典型子群</p>
<h2 id="有限群的定义及性质-补充"><a href="#有限群的定义及性质-补充" class="headerlink" title="有限群的定义及性质(补充)"></a>有限群的定义及性质(补充)</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018204835303.png" alt="image-20241018204835303"></p>
<p>令A&#x3D;{0,1,-1}，请问集合A关于普通乘法* 能否作成一个(有限)群？为什么？</p>
<ul>
<li>答：不行，有零元，和单位元冲突</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018205115002.png" alt="image-20241018205115002"></p>
<p>证明：</p>
<p>​	</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>近世代数</tag>
      </tags>
  </entry>
  <entry>
    <title>近世代数-003-群的定义及性质</title>
    <url>/2024/10/18/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0-%E7%BE%A4%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%80%A7%E8%B4%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol>
<li>群的定义</li>
<li>群的基本性质</li>
<li>群的实例</li>
<li>群中的术语</li>
</ol>
<h2 id="群的定义"><a href="#群的定义" class="headerlink" title="群的定义"></a>群的定义</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018165805648.png" alt="image-20241018165805648"></p>
<ul>
<li><p>**&#x3D;&#x3D;代数系统&#x3D;&#x3D;  ——结合律——&gt; &#x3D;&#x3D;半群&#x3D;&#x3D; —有单位元—&gt;  &#x3D;&#x3D;幺半群&#x3D;&#x3D;  **—两条路—&gt;</p>
</li>
<li><p><strong>——交换律——&gt;  &#x3D;&#x3D;可换幺半群&#x3D;&#x3D;</strong></p>
<p><strong>——如果每个元素都有逆元——&gt; &#x3D;&#x3D;群&#x3D;&#x3D;</strong></p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018170724752.png" alt="image-20241018170724752"></p>
<p><img src="C:/Users/29111/AppData/Roaming/Typora/typora-user-images/image-20241018170702011.png" alt="image-20241018170702011"></p>
<ul>
<li><strong>对于IV  ，可以这么考虑：直接让a&#x3D;b，那么运算的左单位元和右单位元都存在，即单位元存在，然后再让b等于单位元e，那么就能推出逆元也存在</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018171414327.png" alt="image-20241018171414327"></p>
<ul>
<li>答案是否定的</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018173248517.png" alt="image-20241018173248517"></p>
<h2 id="群的性质"><a href="#群的性质" class="headerlink" title="群的性质"></a>群的性质</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018173338024.png" alt="image-20241018173338024"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018173355154.png" alt="image-20241018173355154"></p>
<h4 id="讨论群中特异元素的性质"><a href="#讨论群中特异元素的性质" class="headerlink" title="讨论群中特异元素的性质"></a>讨论群中特异元素的性质</h4><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018173458748.png" alt="image-20241018173458748"></p>
<ul>
<li>逆一遍，再逆一遍，还等于自身</li>
<li>先运算再逆，等于先逆，再交换过来算</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018190900808.png" alt="image-20241018190900808"></p>
<ul>
<li>0元不存在，因为只要是群，就一定有逆元，如果有0元，就冲突了</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018191220599.png" alt="image-20241018191220599"></p>
<ul>
<li><strong>这两个性质都是利用了群的性质中的可逆性</strong></li>
</ul>
<h2 id="群的实例"><a href="#群的实例" class="headerlink" title="群的实例"></a>群的实例</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018191555819.png" alt="image-20241018191555819"></p>
<h2 id="群中的术语"><a href="#群中的术语" class="headerlink" title="群中的术语"></a>群中的术语</h2><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018191955947.png" alt="image-20241018191955947"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018192004215.png" alt="image-20241018192004215"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018192144706.png" alt="image-20241018192144706"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018192737213.png" alt="image-20241018192737213"></p>
<p>在这个问题中，群运算是<strong>对称差</strong> ⊕⊕，我们可以利用以下性质：</p>
<ol>
<li><p><strong>对称差的逆元</strong>：对称差运算的一个特点是，每个元素的逆元就是它本身。也就是说，对于任意 X∈P({a,b})<em>X</em>∈<em>P</em>({<em>a</em>,<em>b</em>})，有：</p>
<p>X⊕X&#x3D;∅<em>X</em>⊕<em>X</em>&#x3D;∅</p>
<p>因为对称差只保留不重叠的元素，因此两个相同的集合进行对称差操作时，结果是空集。</p>
</li>
<li><p><strong>单位元</strong>：在对称差运算下，单位元是<strong>空集</strong> ∅∅，因为对于任意集合 X<em>X</em>，有：</p>
<p>X⊕∅&#x3D;X<em>X</em>⊕∅&#x3D;<em>X</em></p>
<p>所以我们可以把对称差的运算当作某种“加法”操作，其中每个元素的“逆元”是它自己。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018193708168.png" alt="image-20241018193708168"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018193743149.png" alt="image-20241018193743149"></p>
<h3 id="群中元素的幂"><a href="#群中元素的幂" class="headerlink" title="群中元素的幂"></a>群中元素的幂</h3><p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018194011084.png" alt="image-20241018194011084"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018194044829.png" alt="image-20241018194044829"></p>
<ul>
<li>注意，必须是可交换群才满足第三条性质</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018194316830.png" alt="image-20241018194316830"></p>
<h3 id="模-n运算中的元素的阶"><a href="#模-n运算中的元素的阶" class="headerlink" title="模 n运算中的元素的阶"></a>模 n运算中的元素的阶</h3><p>例子中提到的群 ⟨Z6,⊕⟩ 是指模 6下的加法群。这个群的元素是 Z6&#x3D;{[0],[1],[2],[3],[4],[5]}，其中每个元素是整数对 6 取模的等价类（即余数）。</p>
<p>在这个群中，运算 ⊕⊕ 是指<strong>模 6 加法</strong>，例如：</p>
<ul>
<li>[2]⊕[3]&#x3D;[5]</li>
<li>[4]⊕[4]&#x3D;[2] （因为 4+4&#x3D;8，模 6 后得到 2）</li>
<li>[3]⊕[3]&#x3D;[0] （因为 3+3&#x3D;6，模 6 后得到 0）</li>
</ul>
<p>群的单位元是 [0]，因为对于任意元素 [a]∈Z6，我们有 [a]⊕[0]&#x3D;[<em>a</em>]。</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018194624206.png" alt="image-20241018194624206"></p>
<p>r∣k：这个符号表示<strong>整除</strong>。读作“r 整除 k”，意思是 k 可以被 r整除，即存在一个整数 m，使得 k&#x3D;mr。例如：</p>
<ul>
<li>3∣6，因为 6 可以被 3 整除，且 6&#x3D;3×26&#x3D;3×2。</li>
<li>4∤6，因为 6 不能被 4 整除。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018195442637.png" alt="image-20241018195442637"></p>
<p>设 ∣a∣&#x3D;r，即a^r^&#x3D;<em>e</em>。我们希望证明 a^−1^ 的阶也是 <em>r</em>，即 (a^−1^)^r^&#x3D;e</p>
<p>通过群的性质，(a^−1^)^r^&#x3D;(a^r^)^−1^由于 a^r^&#x3D;e，我们有：</p>
<p>(a^r^)^−1^&#x3D;e^−1^&#x3D;e</p>
<p>因此，(a^−1^)^r^&#x3D;e，说明 a^−1^ 的阶不大于 r</p>
<p>另一方面，假设 (a^−1^)^k^&#x3D;e 对某个 <em>k</em> 成立。我们通过逆元的性质得到：</p>
<p>a^k^&#x3D;(a^−1^)^−k^&#x3D;e^−1^&#x3D;e</p>
<p>由于 a的阶是 <em>r</em>，因此 <em>k</em> 必须是 <em>r</em> 的倍数，即<em>k</em>&#x3D;<em>r</em>。这说明 <em>a</em>^−1^ 的阶恰好是 <em>r</em>。</p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018200226504.png" alt="image-20241018200226504"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018200434602.png" alt="image-20241018200434602"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018200634225.png" alt="image-20241018200634225"></p>
<ul>
<li>首先要讨论是不是无限集</li>
<li>对于一坨东西来说，左右各自添一个元素和一个元素的逆和原来一坨的基数相等</li>
</ul>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018200840462.png" alt="image-20241018200840462"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018202449239.png" alt="image-20241018202449239"></p>
<p><img src="https://raw.githubusercontent.com/TheRiddler-EdwardNygma/imgupload/main/blog-img/image-20241018204452162.png" alt="image-20241018204452162"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>近世代数</tag>
      </tags>
  </entry>
  <entry>
    <title>静态库/动态库</title>
    <url>/2025/01/07/%E9%9D%99%E6%80%81%E5%BA%93%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p>一般来说，Windows的静态库文件扩展名是 .lib，动态库文件扩展名是 .dll (Dynamic-Link Libraries)；Linux的静态库扩展名是 .a，动态库扩展名是 .so (Shared Object)</p>
<p>Linux系统存储的库的位置一般在：&#x2F;lib 和 &#x2F;usr&#x2F;lib。 在 64 位的系统上有些库也可能被存储在&#x2F;usr&#x2F;lib64 下。库的头文件一般会被存储在 &#x2F;usr&#x2F;include 下或其子目录下。<br>Linux库有两种，一种是静态库，其命令规则为 libxxx.a；一种是共享库，其命令规则为 libxxx.so</p>
<h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><h3 id="静态库生成"><a href="#静态库生成" class="headerlink" title="静态库生成"></a>静态库生成</h3><h4 id="step1-编译生成-o文件"><a href="#step1-编译生成-o文件" class="headerlink" title="step1 编译生成.o文件"></a>step1 编译生成.o文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c hello.c</span><br></pre></td></tr></table></figure>

<p>此时将会生成一个hello.o文件 </p>
<p>-c 和含义：只编译，不链接</p>
<h4 id="step2-使用-o文件生成-a静态库"><a href="#step2-使用-o文件生成-a静态库" class="headerlink" title="step2 使用.o文件生成 .a静态库"></a>step2 使用.o文件生成 .a静态库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ar -crv libhello.a hello.o</span><br></pre></td></tr></table></figure>

<p>-crv是ar命令的选项：c，r，v分别代表crate，replace，verbose</p>
<ol>
<li><strong><code>-c</code> (create)：</strong><ul>
<li>表示创建一个新的静态库文件（即 <code>libhello.a</code>）。</li>
<li>如果库文件已经存在，<code>-c</code> 不会报错，而是继续执行操作。</li>
<li>如果没有此选项，<code>ar</code> 在库文件不存在时可能会提示错误。</li>
</ul>
</li>
<li><strong><code>-r</code> (replace)：</strong><ul>
<li>将一个或多个目标文件（如 <code>hello.o</code>）添加到静态库中。</li>
<li>如果静态库中已经存在同名文件，则替换它。</li>
<li>如果静态库中不存在该文件，则会新增该文件。</li>
</ul>
</li>
<li><strong><code>-v</code> (verbose)：</strong><ul>
<li>显示详细信息。</li>
<li>在执行操作时，会列出具体处理了哪些目标文件。</li>
</ul>
</li>
</ol>
<h3 id="动态库生成"><a href="#动态库生成" class="headerlink" title="动态库生成"></a>动态库生成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC -o libhyhello.so hello.o</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o hello main.c libhyhello.so </span><br></pre></td></tr></table></figure>

<p><strong><code>-shared</code></strong></p>
<ul>
<li>指定生成一个共享库（动态库，<code>.so</code> 文件）</li>
<li>共享库是运行时动态加载的，适用于多进程共享代码，减少内存占用</li>
</ul>
<p><strong><code>-fPIC</code></strong></p>
<ul>
<li>生成位置无关代码（Position-Independent Code）</li>
<li><strong>作用：</strong> 共享库在内存中加载到任何地址都能正常运行，这对于动态库至关重要</li>
<li><code>hello.o</code> 必须是通过 <code>-fPIC</code> 编译生成的，确保目标代码是位置无关的</li>
</ul>
<p><strong><code>-o libhyhello.so</code></strong></p>
<ul>
<li>指定输出文件名为 <code>libhyhello.so</code>，这是动态库的标准命名格式</li>
<li>Linux 系统中，动态库通常以 <code>lib</code> 开头，扩展名为 <code>.so</code>（shared object）</li>
</ul>
<p><strong><code>hello.o</code></strong></p>
<ul>
<li>输入文件，是先前用 <code>gcc</code> 编译生成的目标文件</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -o hello main.c -L. -lhello</span><br></pre></td></tr></table></figure>

<p><strong><code>-L.</code></strong></p>
<ul>
<li>指定库的搜索路径为当前目录 (<code>.</code>)。</li>
<li>链接器在查找静态库或动态库时，除了默认的路径（如 <code>/usr/lib</code>、<code>/usr/local/lib</code>），也会在当前目录中查找。</li>
<li><strong>作用：</strong> 如果静态库文件 <code>libhello.a</code> 或动态库文件 <code>libhello.so</code> 位于当前目录，这个选项确保它们能够被正确找到。</li>
</ul>
<p><strong><code>-lhello</code></strong></p>
<ul>
<li>表示链接名为 <code>hello</code> 的库。</li>
<li>工作原理：<ul>
<li>链接器会自动寻找以下文件：<ul>
<li>静态库：<code>libhello.a</code></li>
<li>动态库：<code>libhello.so</code></li>
</ul>
</li>
<li>搜索路径包括默认路径和通过 <code>-L</code> 指定的路径（这里是当前目录 <code>.</code>）。</li>
</ul>
</li>
</ul>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc main.c libhyhello.a -o hello</span><br></pre></td></tr></table></figure>

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c main.c</span><br><span class="line">gcc -o hello main.o libmyhello.a</span><br></pre></td></tr></table></figure>

<h2 id="GCC命令相同时，会先执行-a文件，还是会先执行-so文件？"><a href="#GCC命令相同时，会先执行-a文件，还是会先执行-so文件？" class="headerlink" title="GCC命令相同时，会先执行.a文件，还是会先执行.so文件？"></a>GCC命令相同时，会先执行.a文件，还是会先执行.so文件？</h2><p>先删除除.c和.h文件外的所有文件，然后再编译形成.o文件，生成.o文件后，再由.o文件分别生成.a文件和.so文件。<br>执行程序后，发现当静态库和动态库同名时，gcc 命令将优先使用动态库，默认去连&#x2F;usr&#x2F;lib 和&#x2F;lib 等目录中的动态库。</p>
<h2 id="静态库与动态库的区别"><a href="#静态库与动态库的区别" class="headerlink" title="静态库与动态库的区别"></a>静态库与动态库的区别</h2><p>每一个程序在使用静态库时，都会将静态库文件拷贝一份添加到自身。如果有多个程序都要使用该静态库文件时，都会给自身添加一份拷贝，这就导致会产生空间浪费。在源文件较少时不明显，但如果在一个项目中，静态库文件本身就比较大，并且使用该静态库文件的源程序很多，这就会造成大量内存浪费。<br>而动态库文件在被使用时，会对所有想使用该动态库的源程序添加一个标记，在程序执行时再链接动态库文件使用。这就是动态库的优点，也是动态库被称为共享库的原因。</p>
<p>参考资料<a href="https://blog.csdn.net/weixin_43717839/article/details/127991174?spm=1001.2014.3001.5502">【C++】静态库和动态库文件的生成和使用_c++ .a文件-CSDN博客</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
</search>
